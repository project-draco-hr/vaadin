{
  PrintWriter printWriter=null;
  printWriter=context.tryCreate(logger,packageName,className);
  if (printWriter == null) {
    return;
  }
  logger.log(Type.INFO,"Detecting server to client RPC interface types...");
  Date date=new Date();
  TypeOracle typeOracle=context.getTypeOracle();
  JClassType serverToClientRpcType=typeOracle.findType(ClientRpc.class.getName());
  JClassType[] rpcInterfaceSubtypes=serverToClientRpcType.getSubtypes();
  ClassSourceFileComposerFactory composer=null;
  composer=new ClassSourceFileComposerFactory(packageName,className);
  composer.addImport("com.google.gwt.core.client.GWT");
  composer.addImplementedInterface(RpcManager.class.getName());
  SourceWriter sourceWriter=composer.createSourceWriter(context,printWriter);
  sourceWriter.indent();
  List<JClassType> rpcInterfaces=new ArrayList<JClassType>();
  for (  JClassType type : rpcInterfaceSubtypes) {
    if (null == type.isInterface()) {
      continue;
    }
    rpcInterfaces.add(type);
    sourceWriter.println("private void " + getInvokeMethodName(type) + "("+ MethodInvocation.class.getName()+ " invocation, "+ ConnectorMap.class.getName()+ " connectorMap) {");
    sourceWriter.indent();
    for (    JClassType currentType : type.getFlattenedSupertypeHierarchy()) {
      for (      JMethod method : currentType.getMethods()) {
        sourceWriter.println("if (\"" + method.getName() + "\".equals(invocation.getMethodName())) {");
        sourceWriter.indent();
        String paramString="";
        JType[] parameterTypes=method.getParameterTypes();
        for (int i=0; i < parameterTypes.length; ++i) {
          paramString=paramString + "(" + parameterTypes[i].getQualifiedSourceName()+ ") invocation.getParameters()["+ i+ "]";
          if (i < parameterTypes.length - 1) {
            paramString=paramString + ", ";
          }
        }
        sourceWriter.println(Connector.class.getName() + " connector = connectorMap.getConnector(invocation.getConnectorId());");
        sourceWriter.println("for (" + ClientRpc.class.getName() + " rpcImplementation : connector.getRpcImplementations(\""+ type.getQualifiedSourceName()+ "\")) {");
        sourceWriter.indent();
        sourceWriter.println("((" + type.getQualifiedSourceName() + ") rpcImplementation)."+ method.getName()+ "("+ paramString+ ");");
        sourceWriter.outdent();
        sourceWriter.println("}");
        sourceWriter.println("return;");
        sourceWriter.outdent();
        sourceWriter.println("}");
      }
    }
    sourceWriter.outdent();
    sourceWriter.println("}");
    logger.log(Type.DEBUG,"Constructed helper method for server to client RPC for " + type.getName());
  }
  sourceWriter.println("public void applyInvocation(" + MethodInvocation.class.getName() + " invocation, "+ ConnectorMap.class.getName()+ " connectorMap) {");
  sourceWriter.indent();
  for (  JClassType type : rpcInterfaces) {
    sourceWriter.println("if (\"" + type.getQualifiedSourceName() + "\".equals(invocation.getInterfaceName())) {");
    sourceWriter.indent();
    sourceWriter.println(getInvokeMethodName(type) + "(invocation, connectorMap);");
    sourceWriter.println("return;");
    sourceWriter.outdent();
    sourceWriter.println("}");
    logger.log(Type.INFO,"Configured server to client RPC for " + type.getName());
  }
  sourceWriter.outdent();
  sourceWriter.println("}");
  sourceWriter.outdent();
  sourceWriter.println("}");
  context.commit(logger,printWriter);
  logger.log(Type.INFO,"Done. (" + (new Date().getTime() - date.getTime()) / 1000 + "seconds)");
}
