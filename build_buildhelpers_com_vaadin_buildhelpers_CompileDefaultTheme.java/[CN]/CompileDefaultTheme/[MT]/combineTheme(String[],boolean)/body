{
  StringBuffer combinedCss=new StringBuffer();
  for (int j=0; j < themeNames.length; j++) {
    File f=new File(THEME_DIR + themeNames[j]);
    combinedCss.append("/* Automatically compiled css file from subdirectories. */\n");
    File[] subdir=f.listFiles();
    Arrays.sort(subdir,new Comparator(){
      public int compare(      Object arg0,      Object arg1){
        return ((File)arg0).compareTo((File)arg1);
      }
    }
);
    for (int i=0; i < subdir.length; i++) {
      File dir=subdir[i];
      String name=dir.getName();
      String filename=dir.getPath() + "/" + name+ ".css";
      File cssFile=new File(filename);
      if (cssFile.isFile()) {
        combinedCss.append("\n");
        combinedCss.append("/* " + filename.replaceAll("\\\\","/") + " */");
        combinedCss.append("\n");
        FileInputStream fstream=new FileInputStream(cssFile);
        DataInputStream in=new DataInputStream(fstream);
        BufferedReader br=new BufferedReader(new InputStreamReader(in));
        String strLine;
        while ((strLine=br.readLine()) != null) {
          String urlPrefix="";
          if (j < themeNames.length - 1) {
            urlPrefix="../" + themeNames[j] + "/";
          }
          if (strLine.indexOf("url(../") > 0) {
            strLine=strLine.replaceAll("url\\(../",("url\\(" + urlPrefix));
          }
 else {
            strLine=strLine.replaceAll("url\\(",("url\\(" + urlPrefix + name+ "/"));
          }
          combinedCss.append(strLine);
          combinedCss.append("\n");
        }
        in.close();
      }
    }
  }
  String stylesCssDir=THEME_DIR + themeNames[themeNames.length - 1] + "/";
  String stylesCssName=stylesCssDir + "styles.css";
  BufferedWriter out=new BufferedWriter(new FileWriter(stylesCssName));
  out.write(combinedCss.toString());
  out.close();
  System.out.println("Compiled CSS to " + THEME_DIR + themeNames[themeNames.length - 1]+ "/styles.css ("+ combinedCss.toString().length()+ " bytes)");
  if (useSmartSprites) {
    createSprites(combinedCss);
    System.out.println("Used SmartSprites to create sprites");
    File oldCss=new File(stylesCssName);
    oldCss.delete();
    File newCss=new File(stylesCssDir + "styles-sprite.css");
    boolean ok=newCss.renameTo(oldCss);
    if (!ok) {
      System.out.println("Rename " + newCss + " -> "+ oldCss+ " failed");
    }
  }
}
