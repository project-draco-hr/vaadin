{
  StringBuffer combinedCss=new StringBuffer();
  if (version == null) {
    version="9.9.9.INTERNAL-DEBUG-BUILD";
  }
  version=version.replaceAll("\\.","_");
  combinedCss.append(".v-theme-version:after {content:\"" + version + "\";}\n");
  combinedCss.append(".v-theme-version-" + version + " {display: none;}\n");
  for (int j=0; j < themeNames.length; j++) {
    File f=new File(THEME_DIR + themeNames[j]);
    combinedCss.append("/* Automatically compiled css file from subdirectories. */\n");
    File[] subdir=f.listFiles();
    Arrays.sort(subdir,new Comparator<File>(){
      public int compare(      File arg0,      File arg1){
        return arg0.compareTo(arg1);
      }
    }
);
    for (int i=0; i < subdir.length; i++) {
      File dir=subdir[i];
      String folder=dir.getName();
      String filename=dir.getPath() + "/" + folder+ ".css";
      processCSSFile(new File(filename),folder,themeNames[j],combinedCss,j < themeNames.length - 1);
    }
  }
  String stylesCssDir=THEME_DIR + themeNames[themeNames.length - 1] + "/";
  String stylesCssName=stylesCssDir + "styles.css";
  BufferedWriter out=new BufferedWriter(new FileWriter(stylesCssName));
  out.write(combinedCss.toString());
  out.close();
  System.out.println("Compiled CSS to " + THEME_DIR + themeNames[themeNames.length - 1]+ "/styles.css ("+ combinedCss.toString().length()+ " bytes)");
  if (useSmartSprites) {
    createSprites(themeNames[themeNames.length - 1]);
    System.out.println("Used SmartSprites to create sprites");
    File oldCss=new File(stylesCssName);
    oldCss.delete();
    File newCss=new File(stylesCssDir + "styles-sprite.css");
    boolean ok=newCss.renameTo(oldCss);
    if (!ok) {
      System.out.println("Rename " + newCss + " -> "+ oldCss+ " failed");
    }
  }
}
