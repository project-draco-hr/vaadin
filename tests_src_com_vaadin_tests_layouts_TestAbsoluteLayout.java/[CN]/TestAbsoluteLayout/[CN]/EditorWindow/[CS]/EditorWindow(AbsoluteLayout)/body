{
  super("AbsoluteLayout editor aka k??yh??n miehen wysiwyg");
  l=lo;
  setHeight("600px");
  Button componentChooser=new Button("choose component to edit");
  componentChooser.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      final Window chooser=new Window("Choose component");
      chooser.getContent().setSizeUndefined();
      chooser.setModal(true);
      NativeSelect select=new NativeSelect("Choose component to edit");
      select.setNullSelectionAllowed(false);
      IndexedContainer container=new IndexedContainer();
      container.addContainerProperty("caption",String.class,"");
      Iterator<Component> componentIterator=l.getComponentIterator();
      while (componentIterator.hasNext()) {
        AbstractComponent next=(AbstractComponent)componentIterator.next();
        Item item=container.addItem(next);
        String caption=next.getTag();
        caption+="; cap: " + next.getCaption() + "; debugid"+ getDebugId();
        if (next instanceof Property) {
          caption+=" value:" + ((Property)next).getValue();
        }
        item.getItemProperty("caption").setValue(caption);
      }
      select.setContainerDataSource(container);
      select.setItemCaptionPropertyId("caption");
      select.setImmediate(true);
      select.addListener(new ValueChangeListener(){
        public void valueChange(        ValueChangeEvent event){
          editcomponent((Component)event.getProperty().getValue());
          getMainWindow().removeWindow(chooser);
        }
      }
);
      chooser.addComponent(select);
      getMainWindow().addWindow(chooser);
    }
  }
);
  addComponent(componentChooser);
  Button addComp=new Button("add component");
  addComp.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      final Window chooser=new Window("Choose component type to add");
      chooser.getContent().setSizeUndefined();
      chooser.setModal(true);
      NativeSelect select=new NativeSelect("Choose component to edit");
      select.setNullSelectionAllowed(false);
      IndexedContainer container=new IndexedContainer();
      URL resource=AbstractComponent.class.getResource(".");
      File directory=new File(resource.getFile());
      if (directory.exists()) {
        final String[] files=directory.list();
        for (int j=0; j < files.length; j++) {
          if (files[j].endsWith(".class")) {
            String p=resource.toString() + files[j].substring(0,files[j].length() - 6);
            p=p.replaceAll(".*classes/","");
            p=p.replaceAll("/",".");
            Class<?> c;
            try {
              c=Class.forName(p);
              if (AbstractComponent.class.isAssignableFrom(c) && !p.toLowerCase().contains("layout") && !p.toLowerCase().contains("abstract")) {
                container.addItem(c);
              }
            }
 catch (            ClassNotFoundException e) {
              e.printStackTrace();
            }
          }
        }
      }
      select.setContainerDataSource(container);
      select.setImmediate(true);
      select.addListener(new ValueChangeListener(){
        public void valueChange(        ValueChangeEvent event){
          Class<?> c=(Class<?>)event.getProperty().getValue();
          try {
            Component newInstance=(Component)c.newInstance();
            l.addComponent(newInstance);
            editcomponent(newInstance);
            getMainWindow().removeWindow(chooser);
          }
 catch (          InstantiationException e) {
            e.printStackTrace();
          }
catch (          IllegalAccessException e) {
            e.printStackTrace();
          }
        }
      }
);
      chooser.addComponent(select);
      getMainWindow().addWindow(chooser);
    }
  }
);
  addComponent(addComp);
  componentEditor=new Form();
  componentEditor.setWriteThrough(false);
  componentEditor.setCaption("Component properties:");
  componentEditor.setFieldFactory(MFieldFactory.get());
  addComponent(componentEditor);
  positionEditor=new Form();
  positionEditor.setCaption("Component position");
  positionEditor.setWriteThrough(false);
  positionEditor.setFieldFactory(MFieldFactory.get());
  addComponent(positionEditor);
  Button b=new Button("Commit changes",new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      positionEditor.commit();
      componentEditor.commit();
    }
  }
);
  addComponent(b);
}
