{
  db=new SampleDB(true);
  db.generateResources();
  db.generateDemoUser();
  Window mainWindow=new Window("Reservr");
  setMainWindow(mainWindow);
  setTheme("reservr");
  TabSheet mainTabs=new TabSheet();
  mainWindow.addComponent(mainTabs);
  mainWindow.addComponent(new Button("close",this,"close"));
  OrderedLayout reservationTab=new OrderedLayout();
  mainTabs.addTab(reservationTab,"Make reservation",null);
  resourcePanel=new ResourceSelectorPanel("Resources");
  resourcePanel.setResourceContainer(db.getResources(null));
  resourcePanel.addListener(ResourceSelectorPanel.SelectedResourcesChangedEvent.class,this,"selectedResourcesChanged");
  reservationTab.addComponent(resourcePanel);
  Panel reservationPanel=new Panel(new OrderedLayout(OrderedLayout.ORIENTATION_HORIZONTAL));
  reservationTab.addComponent(reservationPanel);
  OrderedLayout infoLayout=new OrderedLayout();
  reservationPanel.addComponent(infoLayout);
  resourceName=new Label("Choose resource");
  resourceName.setCaption("Reserving resource");
  infoLayout.addComponent(resourceName);
  description=new TextField();
  description.setColumns(40);
  description.setRows(5);
  infoLayout.addComponent(description);
  reservationButton=new Button("Make reservation",this,"makeReservation");
  infoLayout.addComponent(reservationButton);
  statusLabel=new Label();
  infoLayout.addComponent(statusLabel);
  map=new GoogleMap();
  map.setWidth(290);
  map.setHeight(150);
  map.setZoomLevel(12);
  map.setItemMarkerHtmlPropertyId(SampleDB.Resource.PROPERTY_ID_NAME);
  map.setItemMarkerXPropertyId(SampleDB.Resource.PROPERTY_ID_LOCATIONX);
  map.setItemMarkerYPropertyId(SampleDB.Resource.PROPERTY_ID_LOCATIONY);
  map.setContainerDataSource(db.getResources(null));
  infoLayout.addComponent(map);
  Date now=new Date();
  reservedFrom=new CalendarField();
  reservedFrom.setMinimumDate(now);
  initCalendarFieldPropertyIds(reservedFrom);
  reservationPanel.addComponent(reservedFrom);
  reservedTo=new CalendarField();
  reservedTo.setMinimumDate(now);
  initCalendarFieldPropertyIds(reservedTo);
  reservationPanel.addComponent(reservedTo);
  reservedFrom.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      Date fd=(Date)reservedFrom.getValue();
      Date td=(Date)reservedTo.getValue();
      if (fd == null) {
        reservedTo.setValue(null);
        reservedTo.setEnabled(false);
        refreshSelectedResources();
        return;
      }
 else {
        reservedTo.setEnabled(true);
      }
      reservedTo.setMinimumDate(fd);
      if (td == null || td.before(fd)) {
        reservedTo.setValue(fd);
      }
      refreshSelectedResources();
      resetStatus();
    }
  }
);
  reservedFrom.setImmediate(true);
  reservedFrom.setValue(now);
  reservedTo.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      refreshSelectedResources();
      resetStatus();
    }
  }
);
  reservedTo.setImmediate(true);
  reservedTo.setValue(now);
  OrderedLayout allLayout=new OrderedLayout(OrderedLayout.ORIENTATION_HORIZONTAL);
  allCalendar=new CalendarField();
  initCalendarFieldPropertyIds(allCalendar);
  allLayout.addComponent(allCalendar);
  allTable=new Table();
  allLayout.addComponent(allTable);
  mainTabs.addTab(allLayout,"All reservations",null);
  mainTabs.addListener(new TabSheet.SelectedTabChangeListener(){
    public void selectedTabChange(    SelectedTabChangeEvent event){
      refreshReservations();
    }
  }
);
  refreshReservations();
}
