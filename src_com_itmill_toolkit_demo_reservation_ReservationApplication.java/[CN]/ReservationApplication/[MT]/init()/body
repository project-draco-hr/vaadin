{
  db=new SampleDB();
  final Window mainWindow=new Window("Reservr ");
  setMainWindow(mainWindow);
  setTheme("reservr");
  mainWindow.getLayout().setWidth("100%");
  Label logo=new Label("Reservr");
  logo.setStyleName("logo");
  mainWindow.addComponent(logo);
  Label slogan=new Label("Representational vehicles on-the-road");
  slogan.setStyleName("slogan");
  mainWindow.addComponent(slogan);
  final TabSheet mainTabs=new TabSheet();
  mainWindow.addComponent(mainTabs);
  final OrderedLayout reservationTab=new OrderedLayout();
  reservationTab.setWidth("100%");
  mainTabs.addTab(reservationTab,"Make reservation",null);
  resourcePanel=new ResourceSelectorPanel("Resources");
  resourcePanel.setResourceContainer(db.getResources(null));
  resourcePanel.addListener(ResourceSelectorPanel.SelectedResourcesChangedEvent.class,this,"selectedResourcesChanged");
  reservationTab.addComponent(resourcePanel);
  final Panel reservationPanel=new Panel("Reservation",new OrderedLayout(OrderedLayout.ORIENTATION_HORIZONTAL));
  reservationPanel.addStyleName(Panel.STYLE_LIGHT);
  reservationPanel.getLayout().setMargin(true);
  reservationTab.addComponent(reservationPanel);
  final OrderedLayout infoLayout=new OrderedLayout();
  infoLayout.setSizeUndefined();
  infoLayout.setMargin(false,true,false,false);
  reservationPanel.addComponent(infoLayout);
  resourceName=new Label("From the list above");
  resourceName.setCaption("Choose resource");
  infoLayout.addComponent(resourceName);
  description=new TextField();
  description.setWidth("250px");
  description.setRows(5);
  infoLayout.addComponent(description);
  reservationButton=new Button("Make reservation",this,"makeReservation");
  infoLayout.addComponent(reservationButton);
  map=new GoogleMap();
  map.setWidth("250px");
  map.setHeight("250px");
  map.setItemMarkerHtmlPropertyId(SampleDB.Resource.PROPERTY_ID_NAME);
  map.setItemMarkerXPropertyId(SampleDB.Resource.PROPERTY_ID_LOCATIONX);
  map.setItemMarkerYPropertyId(SampleDB.Resource.PROPERTY_ID_LOCATIONY);
  map.setContainerDataSource(db.getResources(null));
  infoLayout.addComponent(map);
  final Calendar from=Calendar.getInstance();
  from.add(Calendar.HOUR,1);
  from.set(Calendar.MINUTE,0);
  from.set(Calendar.SECOND,0);
  from.set(Calendar.MILLISECOND,0);
  reservedFrom=new CalendarField("From");
  reservedFrom.setMinimumDate(from.getTime());
  reservedFrom.setValue(from.getTime());
  reservedFrom.setImmediate(true);
  initCalendarFieldPropertyIds(reservedFrom);
  reservationPanel.addComponent(reservedFrom);
  final Label arrowLabel=new Label("&raquo;");
  arrowLabel.setContentMode(Label.CONTENT_XHTML);
  arrowLabel.setStyleName("arrow");
  reservationPanel.addComponent(arrowLabel);
  final Calendar to=Calendar.getInstance();
  to.setTime(from.getTime());
  to.add(Calendar.MILLISECOND,(int)DEFAULT_GAP_MILLIS);
  reservedTo=new CalendarField("To");
  reservedTo.setMinimumDate(to.getTime());
  reservedTo.setValue(to.getTime());
  reservedTo.setImmediate(true);
  initCalendarFieldPropertyIds(reservedTo);
  reservationPanel.addComponent(reservedTo);
  reservedFrom.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      final Date fd=(Date)reservedFrom.getValue();
      if (fd == null) {
        reservedTo.setValue(null);
        reservedTo.setEnabled(false);
        refreshSelectedResources(true);
        return;
      }
 else {
        reservedTo.setEnabled(true);
      }
      reservedTo.setMinimumDate(new Date(fd.getTime() + DEFAULT_GAP_MILLIS));
      final Calendar to=Calendar.getInstance();
      to.setTime(fd);
      to.add(Calendar.MILLISECOND,(int)currentGapMillis);
      reservedTo.setValue(to.getTime());
      refreshSelectedResources(true);
    }
  }
);
  reservedTo.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      final Date from=(Date)reservedFrom.getValue();
      final Date to=(Date)reservedTo.getValue();
      currentGapMillis=to.getTime() - from.getTime();
      if (currentGapMillis <= 0) {
        final Calendar t=Calendar.getInstance();
        t.setTime(from);
        t.add(Calendar.MILLISECOND,(int)DEFAULT_GAP_MILLIS);
        reservedTo.setValue(t.getTime());
      }
      refreshSelectedResources(true);
    }
  }
);
  allTable=new Table();
  allTable.setWidth("100%");
  allTable.setHeight("450px");
  allTable.setColumnCollapsingAllowed(true);
  allTable.setColumnReorderingAllowed(true);
  mainTabs.addTab(allTable,"All reservations",null);
  mainTabs.addListener(new TabSheet.SelectedTabChangeListener(){
    public void selectedTabChange(    SelectedTabChangeEvent event){
      refreshReservations();
    }
  }
);
  resourcePanel.selectFirstCategory();
  refreshReservations();
  refreshSelectedResources(true);
}
