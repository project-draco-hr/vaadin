{
  if (isLayoutRunning()) {
    throw new IllegalStateException("Can't start a new layout phase before the previous layout phase ends.");
  }
  VConsole.log("Starting layout phase");
  int passes=0;
  Duration totalDuration=new Duration();
  currentDependencyTree=new LayoutDependencyTree();
  for (  ManagedLayout layout : needsHorizontalLayout) {
    currentDependencyTree.setNeedsHorizontalLayout(layout,true);
  }
  for (  ManagedLayout layout : needsVerticalLayout) {
    currentDependencyTree.setNeedsVerticalLayout(layout,true);
  }
  needsHorizontalLayout.clear();
  needsVerticalLayout.clear();
  measureNonPaintables(currentDependencyTree);
  VConsole.log("Layout init in " + totalDuration.elapsedMillis() + " ms");
  while (true) {
    Duration passDuration=new Duration();
    passes++;
    int measuredConnectorCount=measureConnectors(currentDependencyTree,passes == 1);
    int measureTime=passDuration.elapsedMillis();
    VConsole.log("Measured " + measuredConnectorCount + " elements in "+ measureTime+ " ms");
    FastStringSet updatedSet=FastStringSet.create();
    while (currentDependencyTree.hasHorizontalConnectorToLayout() || currentDependencyTree.hasVerticaConnectorToLayout()) {
      for (      ManagedLayout layout : currentDependencyTree.getHorizontalLayoutTargets()) {
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          cl.layoutHorizontally();
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          rr.layout();
        }
        updatedSet.add(layout.getConnectorId());
      }
      for (      ManagedLayout layout : currentDependencyTree.getVerticalLayoutTargets()) {
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsVerticallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          cl.layoutVertically();
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          rr.layout();
        }
        updatedSet.add(layout.getConnectorId());
      }
    }
    JsArrayString changed=updatedSet.dump();
    VConsole.log(changed.length() + " requestLayout invocations in " + (passDuration.elapsedMillis() - measureTime)+ "ms");
    StringBuilder b=new StringBuilder();
    b.append(changed.length());
    b.append(" changed widgets in pass ");
    b.append(passes);
    b.append(" in ");
    b.append(passDuration.elapsedMillis());
    b.append(" ms: ");
    if (changed.length() < 10) {
      for (int i=0; i < changed.length(); i++) {
        if (i != 0) {
          b.append(", ");
        }
        b.append(changed.get(i));
      }
    }
    VConsole.log(b.toString());
    if (changed.length() == 0) {
      VConsole.log("No more changes in pass " + passes);
      break;
    }
    if (passes > 100) {
      VConsole.log(LOOP_ABORT_MESSAGE);
      VNotification.createNotification(VNotification.DELAY_FOREVER).show(LOOP_ABORT_MESSAGE,VNotification.CENTERED,"error");
      break;
    }
  }
  int postLayoutStart=totalDuration.elapsedMillis();
  for (  ComponentConnector connector : connection.getConnectorMap().getComponentConnectors()) {
    if (connector instanceof PostLayoutListener) {
      ((PostLayoutListener)connector).postLayout();
    }
  }
  VConsole.log("Invoke post layout listeners in " + (totalDuration.elapsedMillis() - postLayoutStart) + " ms");
  currentDependencyTree=null;
  VConsole.log("Total layout phase time: " + totalDuration.elapsedMillis() + "ms");
}
