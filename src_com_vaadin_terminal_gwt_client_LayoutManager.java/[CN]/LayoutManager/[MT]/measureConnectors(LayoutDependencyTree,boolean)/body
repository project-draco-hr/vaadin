{
  if (!pendingOverflowFixes.isEmpty()) {
    Duration duration=new Duration();
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      componentConnector.getWidget().getElement().getParentElement().getStyle().setTop(1,Unit.PX);
    }
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      componentConnector.getWidget().getElement().getParentElement().getOffsetHeight();
    }
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      componentConnector.getWidget().getElement().getParentElement().getStyle().setTop(0,Unit.PX);
      layoutDependencyTree.setNeedsMeasure(componentConnector,true);
    }
    VConsole.log("Did overflow fix for " + pendingOverflowFixes.size() + " elements  in "+ duration.elapsedMillis()+ " ms");
    pendingOverflowFixes.clear();
  }
  int measureCount=0;
  if (measureAll) {
    ComponentConnector[] connectors=ConnectorMap.get(connection).getComponentConnectors();
    for (    ComponentConnector connector : connectors) {
      measueConnector(layoutDependencyTree,connector);
    }
    for (    ComponentConnector connector : connectors) {
      layoutDependencyTree.setNeedsMeasure(connector,false);
    }
    measureCount+=connectors.length;
  }
  while (layoutDependencyTree.hasConnectorsToMeasure()) {
    Collection<ComponentConnector> measureTargets=layoutDependencyTree.getMeasureTargets();
    for (    ComponentConnector connector : measureTargets) {
      measueConnector(layoutDependencyTree,connector);
      measureCount++;
    }
    for (    ComponentConnector connector : measureTargets) {
      layoutDependencyTree.setNeedsMeasure(connector,false);
    }
  }
  return measureCount;
}
