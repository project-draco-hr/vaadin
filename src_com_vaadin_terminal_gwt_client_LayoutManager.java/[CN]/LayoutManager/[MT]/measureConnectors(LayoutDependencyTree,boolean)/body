{
  if (!pendingOverflowFixes.isEmpty()) {
    Duration duration=new Duration();
    HashMap<Element,String> originalOverflows=new HashMap<Element,String>();
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      Element parentElement=componentConnector.getWidget().getElement().getParentElement();
      Style style=parentElement.getStyle();
      String originalOverflow=style.getOverflow();
      if (originalOverflow != null && !originalOverflows.containsKey(parentElement)) {
        originalOverflows.put(parentElement,originalOverflow);
      }
      style.setOverflow(Overflow.HIDDEN);
    }
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      componentConnector.getWidget().getElement().getParentElement().getOffsetHeight();
    }
    for (    ComponentConnector componentConnector : pendingOverflowFixes) {
      Element parentElement=componentConnector.getWidget().getElement().getParentElement();
      parentElement.getStyle().setProperty("overflow",originalOverflows.get(parentElement));
      layoutDependencyTree.setNeedsMeasure(componentConnector,true);
      ComponentContainerConnector parent=componentConnector.getParent();
      if (parent instanceof ManagedLayout) {
        ManagedLayout managedParent=(ManagedLayout)parent;
        layoutDependencyTree.setNeedsHorizontalLayout(managedParent,true);
        layoutDependencyTree.setNeedsVerticalLayout(managedParent,true);
      }
    }
    VConsole.log("Did overflow fix for " + pendingOverflowFixes.size() + " elements  in "+ duration.elapsedMillis()+ " ms");
    pendingOverflowFixes.clear();
  }
  int measureCount=0;
  if (measureAll) {
    ComponentConnector[] connectors=ConnectorMap.get(connection).getComponentConnectors();
    for (    ComponentConnector connector : connectors) {
      measueConnector(connector);
    }
    for (    ComponentConnector connector : connectors) {
      layoutDependencyTree.setNeedsMeasure(connector,false);
    }
    measureCount+=connectors.length;
  }
  while (layoutDependencyTree.hasConnectorsToMeasure()) {
    Collection<ComponentConnector> measureTargets=layoutDependencyTree.getMeasureTargets();
    for (    ComponentConnector connector : measureTargets) {
      measueConnector(connector);
      measureCount++;
    }
    for (    ComponentConnector connector : measureTargets) {
      layoutDependencyTree.setNeedsMeasure(connector,false);
    }
  }
  return measureCount;
}
