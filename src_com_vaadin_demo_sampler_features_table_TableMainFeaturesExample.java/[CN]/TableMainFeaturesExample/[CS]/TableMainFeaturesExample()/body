{
  addComponent(table);
  final Label selected=new Label("No selection");
  addComponent(selected);
  table.setStyleName("iso3166");
  table.setWidth("100%");
  table.setPageLength(7);
  table.setSelectable(true);
  table.setMultiSelect(true);
  table.setImmediate(true);
  table.setContainerDataSource(ExampleUtil.getISO3166Container());
  table.setColumnReorderingAllowed(true);
  table.setColumnCollapsingAllowed(true);
  table.setColumnHeaders(new String[]{"Country","Code","Icon file"});
  table.setColumnIcon(ExampleUtil.iso3166_PROPERTY_FLAG,new ThemeResource("../sampler/icons/action_save.gif"));
  table.setColumnIcon(ExampleUtil.iso3166_PROPERTY_NAME,new ThemeResource("../sampler/icons/icon_get_world.gif"));
  table.setColumnIcon(ExampleUtil.iso3166_PROPERTY_SHORT,new ThemeResource("../sampler/icons/page_code.gif"));
  table.setColumnAlignment(ExampleUtil.iso3166_PROPERTY_SHORT,Table.ALIGN_CENTER);
  table.setColumnExpandRatio(ExampleUtil.iso3166_PROPERTY_NAME,1);
  table.setColumnWidth(ExampleUtil.iso3166_PROPERTY_SHORT,70);
  try {
    table.setColumnCollapsed(ExampleUtil.iso3166_PROPERTY_FLAG,true);
  }
 catch (  IllegalAccessException e) {
    System.err.println(e);
  }
  table.setRowHeaderMode(Table.ROW_HEADER_MODE_ICON_ONLY);
  table.setItemIconPropertyId(ExampleUtil.iso3166_PROPERTY_FLAG);
  table.addActionHandler(new Action.Handler(){
    public Action[] getActions(    Object target,    Object sender){
      if (markedRows.contains(target)) {
        return ACTIONS_MARKED;
      }
 else {
        return ACTIONS_UNMARKED;
      }
    }
    public void handleAction(    Action action,    Object sender,    Object target){
      if (ACTION_MARK.equals(action)) {
        markedRows.add(target);
        table.requestRepaint();
      }
 else       if (ACTION_UNMARK.equals(action)) {
        markedRows.remove(target);
        table.requestRepaint();
      }
 else       if (ACTION_LOG.equals(action)) {
        Item item=table.getItem(target);
        addComponent(new Label("Saved: " + target + ", "+ item.getItemProperty(ExampleUtil.iso3166_PROPERTY_NAME).getValue()));
      }
    }
  }
);
  table.setCellStyleGenerator(new CellStyleGenerator(){
    public String getStyle(    Object itemId,    Object propertyId){
      if (propertyId == null) {
        return (markedRows.contains(itemId) ? "marked" : null);
      }
 else       if (ExampleUtil.iso3166_PROPERTY_NAME.equals(propertyId)) {
        return "bold";
      }
 else {
        return null;
      }
    }
  }
);
  table.addListener(new Table.ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      Set<?> value=(Set<?>)event.getProperty().getValue();
      if (null == value || value.size() == 0) {
        selected.setValue("No selection");
      }
 else {
        selected.setValue("Selected: " + table.getValue());
      }
    }
  }
);
}
