{
  final Form form=new Form(new VerticalLayout());
  TextField tf=new TextField("A field, must contain 1-2 chars");
  tf.addValidator(new StringLengthValidator("Invalid length",1,2,false));
  tf.setRequired(true);
  tf.setValue("ab");
  form.addField("a",tf);
  tf=new TextField("A field, must contain an integer");
  tf.addValidator(new IntegerValidator("Invalid integer {0}"));
  tf.setRequired(true);
  tf.setValue("123");
  form.addField("b",tf);
  tf=new TextField("A field, must contain an integer or be empty");
  tf.addValidator(new IntegerValidator("Invalid integer {0}"));
  tf.setValue("-321");
  form.addField("c",tf);
  tf=new TextField("A field, must contain a floating point number or be empty");
  tf.addValidator(new DoubleValidator("Invalid double {0}"));
  tf.setValue("-123.45e6");
  form.addField("d",tf);
  tf=new TextField("A field, must contain an e-mail address or be empty");
  tf.addValidator(new EmailValidator("Invalid e-mail address {0}"));
  tf.setValue("a.b@example.com");
  form.addField("e",tf);
  tf=new TextField("A field, must match the regular expression a.*b.*c");
  tf.addValidator(new RegexpValidator("a.*b.*c","{0} does not match the regular expression"));
  tf.setValue("aagsabeqgc");
  form.addField("f",tf);
  tf=new TextField("A field, must contain the regular expression a.*b.*c");
  tf.addValidator(new RegexpValidator("a.*b.*c",false,"{0} does not contain the regular expression"));
  tf.setValue("aagsabeqgc");
  form.addField("g",tf);
  tf=new TextField("A field, must match the regular expression ^a.*b.*c$");
  tf.addValidator(new RegexpValidator("^a.*b.*c$",false,"{0} does not match the regular expression with ^ and $"));
  tf.setValue("aagsabeqgc");
  form.addField("h",tf);
  tf=new TextField("A field, must contain the regular expression ^a.*b.*c$");
  tf.addValidator(new RegexpValidator("^a.*b.*c$",false,"{0} does not contain the regular expression with ^ and $"));
  tf.setValue("aagsabeqgc");
  form.addField("i",tf);
  tf=new TextField("A field, must be a floating point number with 4-5 chars");
  CompositeValidator cv=new CompositeValidator(CombinationMode.AND,"The field must contain a floating point number with 4-5 characters");
  cv.addValidator(new StringLengthValidator("String length of '{0}' should be 4-5 characters",4,5,false));
  cv.addValidator(new DoubleValidator("{0} must be a floating point number"));
  tf.addValidator(cv);
  tf.setValue("12.34");
  form.addField("j",tf);
  tf=new TextField("A field, must be a floating point number or 4-5 chars");
  cv=new CompositeValidator(CombinationMode.OR,"The field must contain a floating point  or with 4-5 characters");
  cv.addValidator(new StringLengthValidator("String length of '{0}' should be 4-5 characters",4,5,false));
  cv.addValidator(new DoubleValidator("{0} must be a floating point number"));
  tf.addValidator(cv);
  tf.setValue("12.34g");
  form.addField("jb",tf);
  tf=new TextField("Postal Code");
  tf.setColumns(5);
  Validator postalCodeValidator=new AbstractStringValidator("Postal code must be a number 10000-99999."){
    @Override protected boolean isValidString(    String value){
      return value.matches("[1-9][0-9]{4}");
    }
  }
;
  tf.addValidator(postalCodeValidator);
  tf.setValue("12345");
  form.addField("k",tf);
  Button b=new Button("Commit",new ClickListener(){
    public void buttonClick(    ClickEvent event){
      try {
        form.commit();
        if (form.isValid()) {
          getMainWindow().showNotification("OK! Form validated and no error was thrown",Notification.TYPE_HUMANIZED_MESSAGE);
        }
 else {
          getMainWindow().showNotification("Form is invalid but no exception was thrown",Notification.TYPE_ERROR_MESSAGE);
        }
      }
 catch (      Exception e) {
        if (form.isValid()) {
          getMainWindow().showNotification("Form is valid but an exception was thrown",Notification.TYPE_ERROR_MESSAGE);
        }
 else {
          getMainWindow().showNotification("OK! Error was thrown for an invalid input",Notification.TYPE_HUMANIZED_MESSAGE);
        }
      }
    }
  }
);
  addComponent(form);
  addComponent(b);
}
