{
  if (!hierarchical) {
    if (noChildrenAllowed == null || parent == null || children == null || roots == null) {
      noChildrenAllowed=new HashSet<Object>();
      parent=new Hashtable<Object,Object>();
      children=new Hashtable<Object,LinkedList<Object>>();
      roots=new LinkedHashSet<Object>(container.getItemIds());
    }
 else {
      final Collection<?> itemIds=container.getItemIds();
      Comparator<Object> basedOnOrderFromWrappedContainer=new Comparator<Object>(){
        public int compare(        Object o1,        Object o2){
          if (o1.equals(o2)) {
            return 0;
          }
          for (          Object id : itemIds) {
            if (id == o1) {
              return -1;
            }
 else             if (id == o2) {
              return 1;
            }
          }
          return 0;
        }
      }
;
      final HashSet<Object> s=new HashSet<Object>();
      s.addAll(parent.keySet());
      s.addAll(children.keySet());
      s.addAll(roots);
      for (final Iterator<Object> i=s.iterator(); i.hasNext(); ) {
        final Object id=i.next();
        if (!container.containsId(id)) {
          removeFromHierarchyWrapper(id);
        }
      }
      final Collection<?> ids=container.getItemIds();
      for (final Iterator<?> i=ids.iterator(); i.hasNext(); ) {
        final Object id=i.next();
        if (!s.contains(id)) {
          addToHierarchyWrapper(id);
          s.add(id);
        }
      }
      Object[] array=roots.toArray();
      Arrays.sort(array,basedOnOrderFromWrappedContainer);
      roots=new LinkedHashSet<Object>();
      for (int i=0; i < array.length; i++) {
        roots.add(array[i]);
      }
      for (      Object object : children.keySet()) {
        LinkedList<Object> object2=children.get(object);
        Collections.sort(object2,basedOnOrderFromWrappedContainer);
      }
    }
  }
}
