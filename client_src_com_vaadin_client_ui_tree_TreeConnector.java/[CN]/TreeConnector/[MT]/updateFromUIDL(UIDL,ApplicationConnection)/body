{
  if (!isRealUpdate(uidl)) {
    return;
  }
  getWidget().rendering=true;
  getWidget().client=client;
  if (uidl.hasAttribute("partialUpdate")) {
    handleUpdate(uidl);
    WidgetUtil.forceIE8Redraw(getWidget().getElement());
    getWidget().rendering=false;
    return;
  }
  getWidget().paintableId=uidl.getId();
  getWidget().immediate=getState().immediate;
  getWidget().disabled=!isEnabled();
  getWidget().readonly=isReadOnly();
  getWidget().dragMode=uidl.hasAttribute("dragMode") ? uidl.getIntAttribute("dragMode") : 0;
  getWidget().isNullSelectionAllowed=uidl.getBooleanAttribute("nullselect");
  getWidget().isHtmlContentAllowed=uidl.getBooleanAttribute(TreeConstants.ATTRIBUTE_HTML_ALLOWED);
  if (uidl.hasAttribute("alb")) {
    getWidget().bodyActionKeys=uidl.getStringArrayAttribute("alb");
  }
  getWidget().body.clear();
  getWidget().clearNodeToKeyMap();
  tooltipMap.clear();
  TreeNode childTree=null;
  UIDL childUidl=null;
  for (final Iterator<?> i=uidl.getChildIterator(); i.hasNext(); ) {
    childUidl=(UIDL)i.next();
    if ("actions".equals(childUidl.getTag())) {
      updateActionMap(childUidl);
      continue;
    }
 else     if ("-ac".equals(childUidl.getTag())) {
      getWidget().updateDropHandler(childUidl);
      continue;
    }
    childTree=getWidget().new TreeNode();
    getConnection().getVTooltip().connectHandlersToWidget(childTree);
    updateNodeFromUIDL(childTree,childUidl,1);
    getWidget().body.add(childTree);
    childTree.addStyleDependentName("root");
    childTree.childNodeContainer.addStyleDependentName("root");
  }
  if (childTree != null && childUidl != null) {
    boolean leaf=!childUidl.getTag().equals("node");
    childTree.addStyleDependentName(leaf ? "leaf-last" : "last");
    childTree.childNodeContainer.addStyleDependentName("last");
  }
  final String selectMode=uidl.getStringAttribute("selectmode");
  getWidget().selectable=!"none".equals(selectMode);
  getWidget().isMultiselect="multi".equals(selectMode);
  if (getWidget().isMultiselect) {
    Roles.getTreeRole().setAriaMultiselectableProperty(getWidget().getElement(),true);
    if (BrowserInfo.get().isTouchDevice()) {
      getWidget().multiSelectMode=MultiSelectMode.SIMPLE;
    }
 else {
      getWidget().multiSelectMode=MultiSelectMode.valueOf(uidl.getStringAttribute("multiselectmode"));
    }
  }
 else {
    Roles.getTreeRole().setAriaMultiselectableProperty(getWidget().getElement(),false);
  }
  getWidget().selectedIds=uidl.getStringArrayVariableAsSet("selected");
  if (getWidget().lastSelection != null) {
    getWidget().lastSelection=getWidget().getNodeByKey(getWidget().lastSelection.key);
  }
  if (getWidget().focusedNode != null) {
    Set<String> selectedIds=getWidget().selectedIds;
    if (!selectedIds.isEmpty() && !selectedIds.contains(getWidget().focusedNode.key)) {
      String keySelectedId=selectedIds.iterator().next();
      TreeNode nodeToSelect=getWidget().getNodeByKey(keySelectedId);
      getWidget().setFocusedNode(nodeToSelect);
    }
 else {
      getWidget().setFocusedNode(getWidget().getNodeByKey(getWidget().focusedNode.key));
    }
  }
  if (getWidget().lastSelection == null && getWidget().focusedNode == null && !getWidget().selectedIds.isEmpty()) {
    getWidget().setFocusedNode(getWidget().getNodeByKey(getWidget().selectedIds.iterator().next()));
    getWidget().focusedNode.setFocused(false);
  }
  WidgetUtil.forceIE8Redraw(getWidget().getElement());
  getWidget().rendering=false;
}
