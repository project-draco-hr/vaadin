{
  Token var;
  ArrayList<String> list;
  jj_consume_token(EACH_SYM);
  label_71:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[108]=jj_gen;
break label_71;
}
jj_consume_token(S);
}
var=jj_consume_token(VARIABLE);
label_72: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[109]=jj_gen;
break label_72;
}
jj_consume_token(S);
}
jj_consume_token(EACH_IN);
label_73: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[110]=jj_gen;
break label_73;
}
jj_consume_token(S);
}
list=stringList();
jj_consume_token(LBRACE);
label_74: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[111]=jj_gen;
break label_74;
}
jj_consume_token(S);
}
documentHandler.startEachDirective(var.image,list);
label_75: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case EACH_VAR:
case INCLUDE_SYM:
case EXTEND_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
;
break;
default :
jj_la1[112]=jj_gen;
break label_75;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INCLUDE_SYM:
includeDirective();
break;
case MEDIA_SYM:
media();
break;
case EXTEND_SYM:
extendDirective();
break;
case VARIABLE:
variable();
break;
default :
jj_la1[113]=jj_gen;
if (jj_2_5(3)) {
declarationOrNestedProperties();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case EACH_VAR:
case IDENT:
case HASH:
styleRule();
break;
default :
jj_la1[114]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
}
jj_consume_token(RBRACE);
label_76: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[115]=jj_gen;
break label_76;
}
jj_consume_token(S);
}
documentHandler.endEachDirective();
}
