{
  String name;
  Token variable=null;
  LexicalUnitImpl first=null;
  LexicalUnitImpl prev=null;
  LexicalUnitImpl next=null;
  name=variableName();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLON:
case VARIABLE:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLON:
      jj_consume_token(COLON);
    label_91:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
        ;
      break;
default :
    jj_la1[140]=jj_gen;
  break label_91;
}
jj_consume_token(S);
}
first=nonVariableTerm(null);
prev=first;
label_92: while (true) {
if (jj_2_11(3)) {
;
}
 else {
break label_92;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
jj_consume_token(COMMA);
label_93: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[141]=jj_gen;
break label_93;
}
jj_consume_token(S);
}
break;
default :
jj_la1[142]=jj_gen;
;
}
prev=nonVariableTerm(prev);
}
break;
case VARIABLE:
variable=jj_consume_token(VARIABLE);
first=LexicalUnitImpl.createVariable(token.beginLine,token.beginColumn,prev,variable.image);
break;
default :
jj_la1[143]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[144]=jj_gen;
;
}
VariableNode arg=new VariableNode(name,first,false);
{
if (true) return arg;
}
throw new Error("Missing return statement in function");
}
