{
  String name;
  ArrayList<VariableNode> args=null;
  String body;
  jj_consume_token(MIXIN_SYM);
  label_81:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[120]=jj_gen;
break label_81;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENT:
name=property();
break;
case FUNCTION:
name=functionName();
args=arglist();
jj_consume_token(RPARAN);
label_82: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[121]=jj_gen;
break label_82;
}
jj_consume_token(S);
}
break;
default :
jj_la1[122]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(LBRACE);
label_83: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[123]=jj_gen;
break label_83;
}
jj_consume_token(S);
}
documentHandler.startMixinDirective(name,args);
label_84: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case EACH_VAR:
case INCLUDE_SYM:
case EXTEND_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
;
break;
default :
jj_la1[124]=jj_gen;
break label_84;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INCLUDE_SYM:
includeDirective();
break;
case MEDIA_SYM:
media();
break;
case EXTEND_SYM:
extendDirective();
break;
case VARIABLE:
variable();
break;
default :
jj_la1[125]=jj_gen;
if (jj_2_6(3)) {
declarationOrNestedProperties();
}
 else {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case EACH_VAR:
case IDENT:
case HASH:
styleRule();
break;
default :
jj_la1[126]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
}
jj_consume_token(RBRACE);
label_85: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[127]=jj_gen;
break label_85;
}
jj_consume_token(S);
}
documentHandler.endMixinDirective(name,args);
}
