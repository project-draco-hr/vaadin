{
  int cases=0;
  Token att=null;
  Token val=null;
  String attValue=null;
  jj_consume_token(LBRACKET);
  label_52:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[77]=jj_gen;
break label_52;
}
jj_consume_token(S);
}
att=jj_consume_token(IDENT);
label_53: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[78]=jj_gen;
break label_53;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DASHMATCH:
case INCLUDES:
case EQ:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EQ:
jj_consume_token(EQ);
cases=1;
break;
case INCLUDES:
jj_consume_token(INCLUDES);
cases=2;
break;
case DASHMATCH:
jj_consume_token(DASHMATCH);
cases=3;
break;
default :
jj_la1[79]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_54: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[80]=jj_gen;
break label_54;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENT:
val=jj_consume_token(IDENT);
attValue=val.image;
break;
case STRING:
val=jj_consume_token(STRING);
attValue=convertStringIndex(val.image,1,val.image.length() - 1);
break;
default :
jj_la1[81]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_55: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[82]=jj_gen;
break label_55;
}
jj_consume_token(S);
}
break;
default :
jj_la1[83]=jj_gen;
;
}
jj_consume_token(RBRACKET);
String name=convertIdent(att.image);
Condition c;
switch (cases) {
case 0:
c=conditionFactory.createAttributeCondition(name,null,false,null);
break;
case 1:
c=conditionFactory.createAttributeCondition(name,null,false,attValue);
break;
case 2:
c=conditionFactory.createOneOfAttributeCondition(name,null,false,attValue);
break;
case 3:
c=conditionFactory.createBeginHyphenAttributeCondition(name,null,false,attValue);
break;
default :
c=null;
}
if (pred == null) {
{
if (true) return c;
}
}
 else {
{
if (true) return conditionFactory.createAndCondition(pred,c);
}
}
throw new Error("Missing return statement in function");
}
