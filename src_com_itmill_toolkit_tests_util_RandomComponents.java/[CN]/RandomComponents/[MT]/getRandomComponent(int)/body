{
  AbstractComponent result=null;
  int randint=seededRandom.nextInt(23);
  MultiListener l=new MultiListener();
switch (randint) {
case 0:
    result=new Label();
  result.setCaption("Label component " + caption);
break;
case 1:
result=new Button();
result.setCaption("Button component " + caption);
((Button)result).addListener((Button.ClickListener)l);
break;
case 2:
result=new TextField();
result.setCaption("TextField component " + caption);
break;
case 3:
result=new Select("Select component " + caption);
result.setCaption("Select component " + caption);
result.setImmediate(true);
((Select)result).setNewItemsAllowed(true);
((Select)result).addItem("first");
((Select)result).addItem("first");
((Select)result).addItem("first");
((Select)result).addItem("second");
((Select)result).addItem("third");
((Select)result).addItem("fourth");
((Select)result).addListener((ValueChangeListener)l);
((Select)result).addListener((PropertySetChangeListener)l);
((Select)result).addListener((ItemSetChangeListener)l);
break;
case 4:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LabelExample());
break;
case 5:
result=new Panel();
result.setCaption("Panel component " + caption);
((Panel)result).addComponent(new Label("Panel is a container for other components, by default it draws a frame around it's " + "extremities and may have a caption to clarify the nature of the contained components' purpose." + " Panel contains an layout where the actual contained components are added, "+ "this layout may be switched on the fly."));
((Panel)result).setWidth(250);
break;
case 6:
result=new DateField();
((DateField)result).setStyleName("calendar");
((DateField)result).setValue(new java.util.Date());
result.setCaption("Calendar component " + caption);
break;
case 7:
result=new DateField();
((DateField)result).setValue(new java.util.Date());
result.setCaption("Calendar component " + caption);
break;
case 8:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new ButtonExample());
break;
case 9:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new ClientCachingExample());
break;
case 10:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new ComboBoxExample());
break;
case 11:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LabelExample());
break;
case 12:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LabelExample());
break;
case 13:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LabelExample());
break;
case 14:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LayoutExample());
break;
case 15:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new NotificationExample());
break;
case 16:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new LabelExample());
break;
case 17:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new SelectExample());
break;
case 18:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new ValueInputExample());
break;
case 19:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new WindowingExample());
break;
case 20:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new TreeExample());
break;
case 21:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new TableExample());
break;
case 22:
result=new OrderedLayout();
((OrderedLayout)result).addComponent(new StressComponentsInTable());
break;
}
return result;
}
