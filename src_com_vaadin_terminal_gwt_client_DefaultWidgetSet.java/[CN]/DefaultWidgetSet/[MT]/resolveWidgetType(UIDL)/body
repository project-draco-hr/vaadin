{
  final String tag=uidl.getTag();
  if ("button".equals(tag) || "nativebutton".equals(tag)) {
    if ("switch".equals(uidl.getStringAttribute("type"))) {
      return VCheckBox.class;
    }
 else     if ("nativebutton".equals(tag)) {
      return VNativeButton.class;
    }
 else {
      return VButton.class;
    }
  }
 else   if ("window".equals(tag)) {
    return VWindow.class;
  }
 else   if ("orderedlayout".equals(tag)) {
    return VOrderedLayout.class;
  }
 else   if ("verticallayout".equals(tag)) {
    return VVerticalLayout.class;
  }
 else   if ("horizontallayout".equals(tag)) {
    return VHorizontalLayout.class;
  }
 else   if ("label".equals(tag)) {
    return VLabel.class;
  }
 else   if ("link".equals(tag)) {
    return VLink.class;
  }
 else   if ("gridlayout".equals(tag)) {
    return VGridLayout.class;
  }
 else   if ("tree".equals(tag)) {
    return VTree.class;
  }
 else   if ("select".equals(tag)) {
    if (uidl.hasAttribute("type")) {
      final String type=uidl.getStringAttribute("type");
      if (type.equals("twincol")) {
        return VTwinColSelect.class;
      }
      if (type.equals("optiongroup")) {
        return VOptionGroup.class;
      }
      if (type.equals("native")) {
        return VNativeSelect.class;
      }
      if (type.equals("list")) {
        return VListSelect.class;
      }
    }
 else {
      if (uidl.hasAttribute("selectmode") && uidl.getStringAttribute("selectmode").equals("multi")) {
        return VListSelect.class;
      }
 else {
        return VFilterSelect.class;
      }
    }
  }
 else   if ("panel".equals(tag)) {
    return VPanel.class;
  }
 else   if ("tabsheet".equals(tag)) {
    return VTabsheet.class;
  }
 else   if ("accordion".equals(tag)) {
    return VAccordion.class;
  }
 else   if ("embedded".equals(tag)) {
    return VEmbedded.class;
  }
 else   if ("customlayout".equals(tag)) {
    return VCustomLayout.class;
  }
 else   if ("customcomponent".equals(tag)) {
    return VCustomComponent.class;
  }
 else   if ("textfield".equals(tag)) {
    if (uidl.getBooleanAttribute("richtext")) {
      return VRichTextArea.class;
    }
 else     if (uidl.hasAttribute("multiline")) {
      return VTextArea.class;
    }
 else     if (uidl.getBooleanAttribute("secret")) {
      return VPasswordField.class;
    }
 else {
      return VTextField.class;
    }
  }
 else   if ("table".equals(tag)) {
    return VScrollTable.class;
  }
 else   if ("pagingtable".equals(tag)) {
    return VTablePaging.class;
  }
 else   if ("datefield".equals(tag)) {
    if (uidl.hasAttribute("type")) {
      if ("inline".equals(uidl.getStringAttribute("type"))) {
        return VDateFieldCalendar.class;
      }
 else       if ("popup".equals(uidl.getStringAttribute("type"))) {
        return VPopupCalendar.class;
      }
    }
    return VPopupCalendar.class;
  }
 else   if ("slider".equals(tag)) {
    return VSlider.class;
  }
 else   if ("form".equals(tag)) {
    return VForm.class;
  }
 else   if ("formlayout".equals(tag)) {
    return VFormLayout.class;
  }
 else   if ("upload".equals(tag)) {
    return VUpload.class;
  }
 else   if ("hsplitpanel".equals(tag)) {
    return VSplitPanelHorizontal.class;
  }
 else   if ("vsplitpanel".equals(tag)) {
    return VSplitPanelVertical.class;
  }
 else   if ("progressindicator".equals(tag)) {
    return VProgressIndicator.class;
  }
 else   if ("menubar".equals(tag)) {
    return VMenuBar.class;
  }
 else   if ("popupview".equals(tag)) {
    return VPopupView.class;
  }
 else   if ("urifragment".equals(tag)) {
    return VUriFragmentUtility.class;
  }
 else   if (VAbsoluteLayout.TAGNAME.equals(tag)) {
    return VAbsoluteLayout.class;
  }
 else   if (VCssLayout.TAGNAME.equals(tag)) {
    return VCssLayout.class;
  }
  return VUnknownComponent.class;
}
