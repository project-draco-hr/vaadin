{
  List<FrameworkMethod> tests=new LinkedList<FrameworkMethod>();
  if (!AbstractTB3Test.class.isAssignableFrom(getTestClass().getJavaClass())) {
    throw new RuntimeException(getClass().getName() + " only supports " + AbstractTB3Test.class.getName());
  }
  try {
    AbstractTB3Test testClassInstance=getTestClassInstance();
    Collection<DesiredCapabilities> desiredCapabilites=getDesiredCapabilities(testClassInstance);
    TestNameSuffix testNameSuffixProperty=findAnnotation(testClassInstance.getClass(),TestNameSuffix.class);
    for (    FrameworkMethod m : getTestMethods()) {
      if (desiredCapabilites.size() > 0) {
        for (        DesiredCapabilities capabilities : desiredCapabilites) {
          TB3Method method=new TB3Method(m.getMethod(),capabilities);
          if (testNameSuffixProperty != null) {
            method.setTestNameSuffix("-" + System.getProperty(testNameSuffixProperty.property()));
          }
          tests.add(method);
        }
      }
 else {
        tests.add(new IgnoredTestMethod(m.getMethod()));
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Error retrieving browsers to run on",e);
  }
  return tests;
}
