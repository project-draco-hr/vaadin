{
  final Class<?> beanClass=instance.getClass();
  if (Character.isLowerCase(beanPropertyName.charAt(0))) {
    final char[] buf=beanPropertyName.toCharArray();
    buf[0]=Character.toUpperCase(buf[0]);
    beanPropertyName=new String(buf);
  }
  getMethod=null;
  try {
    getMethod=initGetterMethod(beanPropertyName,beanClass);
  }
 catch (  final java.lang.NoSuchMethodException ignored) {
    throw new MethodException(this,"Bean property " + beanPropertyName + " can not be found");
  }
  Class<?> returnType=getMethod.getReturnType();
  setMethod=null;
  try {
    setMethod=beanClass.getMethod("set" + beanPropertyName,new Class[]{returnType});
  }
 catch (  final java.lang.NoSuchMethodException skipped) {
  }
  if (returnType.isPrimitive()) {
    type=(Class<T>)convertPrimitiveType(returnType);
    if (type.isPrimitive()) {
      throw new MethodException(this,"Bean property " + beanPropertyName + " getter return type must not be void");
    }
  }
 else {
    type=(Class<T>)returnType;
  }
  setArguments(DEFAULT_GET_ARGS,DEFAULT_SET_ARGS,0);
  this.instance=instance;
}
