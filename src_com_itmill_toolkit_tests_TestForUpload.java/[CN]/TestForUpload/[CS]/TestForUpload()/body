{
  setCompositionRoot(this.main);
  this.main.addComponent(new Label("This is a simple test for upload application. " + "Upload should work with big files and concurrent " + "requests should not be blocked. Button 'b' reads "+ "current state into label below it. Memory receiver "+ "streams upload contents into memory. You may track"+ "consumption."+ "tempfile receiver writes upload to file and "+ "should have low memory consumption."));
  this.main.addComponent(new Label("Clicking on button b updates information about upload components status or same with garbage collector."));
  this.up=new Upload("Upload",this.buffer);
  this.up.setImmediate(true);
  this.up.addListener((FinishedListener)this);
  this.up.addListener((FailedListener)this);
  this.up.addListener((SucceededListener)this);
  this.up.addListener((StartedListener)this);
  this.up.setProgressListener(this);
  Button b=new Button("b",this,"readState");
  Button c=new Button("b with gc",this,"gc");
  this.main.addComponent(b);
  this.main.addComponent(c);
  this.uploadBufferSelector=new Select("Receiver type");
  this.uploadBufferSelector.setColumns(6);
  this.uploadBufferSelector.setImmediate(true);
  this.uploadBufferSelector.addItem("memory");
  this.uploadBufferSelector.setValue("memory");
  this.uploadBufferSelector.addItem("tempfile");
  this.uploadBufferSelector.addListener(new AbstractField.ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      setBuffer();
    }
  }
);
  this.main.addComponent(this.uploadBufferSelector);
  this.main.addComponent(this.up);
  this.l=new Label("Idle");
  this.main.addComponent(this.l);
  this.pi.setVisible(false);
  this.pi.setPollingInterval(1000);
  this.main.addComponent(this.pi);
  this.memoryStatus=new Label();
  this.main.addComponent(this.memoryStatus);
  this.status.setVisible(false);
  this.main.addComponent(this.status);
  Button restart=new Button("R");
  restart.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      getApplication().close();
    }
  }
);
  this.main.addComponent(restart);
}
