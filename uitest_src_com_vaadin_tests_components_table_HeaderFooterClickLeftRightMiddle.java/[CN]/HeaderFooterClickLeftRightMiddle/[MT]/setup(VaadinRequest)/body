{
  final Table table=new Table();
  table.setColumnReorderingAllowed(true);
  table.setContainerDataSource(createContainer());
  table.setWidth("400px");
  table.setHeight("400px");
  table.setImmediate(true);
  table.setFooterVisible(true);
  CheckBox immediateCheckbox=new CheckBox("Immediate");
  immediateCheckbox.setImmediate(true);
  immediateCheckbox.setValue(table.isImmediate());
  immediateCheckbox.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setImmediate((Boolean)event.getProperty().getValue());
    }
  }
);
  CheckBox headerClickListenerCheckbox=new CheckBox("Header click listener");
  headerClickListenerCheckbox.setImmediate(true);
  headerClickListenerCheckbox.addValueChangeListener(new ValueChangeListener(){
    private HeaderClickListener headerClickListener=new HeaderClickListener(){
      @Override public void headerClick(      HeaderClickEvent event){
        String type=event.isDoubleClick() ? "Double click" : "Click";
        log(type + " on header " + event.getPropertyId().toString()+ " using "+ event.getButtonName());
      }
    }
;
    @Override public void valueChange(    ValueChangeEvent event){
      if (table.getListeners(HeaderClickEvent.class).isEmpty()) {
        table.addHeaderClickListener(headerClickListener);
      }
 else {
        table.removeHeaderClickListener(headerClickListener);
      }
    }
  }
);
  headerClickListenerCheckbox.setValue(true);
  CheckBox footerClickListenerCheckbox=new CheckBox("Footer click listener");
  footerClickListenerCheckbox.setImmediate(true);
  footerClickListenerCheckbox.addValueChangeListener(new ValueChangeListener(){
    private FooterClickListener footerClickListener=new FooterClickListener(){
      @Override public void footerClick(      FooterClickEvent event){
        String type=event.isDoubleClick() ? "Double click" : "Click";
        log(type + " on footer " + event.getPropertyId().toString()+ " using "+ event.getButtonName());
      }
    }
;
    @Override public void valueChange(    ValueChangeEvent event){
      if (table.getListeners(FooterClickEvent.class).isEmpty()) {
        table.addFooterClickListener(footerClickListener);
      }
 else {
        table.removeFooterClickListener(footerClickListener);
      }
    }
  }
);
  footerClickListenerCheckbox.setValue(true);
  CheckBox sortEnabledCheckbox=new CheckBox("Sortable");
  sortEnabledCheckbox.setImmediate(true);
  sortEnabledCheckbox.setValue(table.isSortEnabled());
  sortEnabledCheckbox.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setSortEnabled((Boolean)event.getProperty().getValue());
    }
  }
);
  CheckBox columnReorderingCheckbox=new CheckBox("Column reordering allowed");
  columnReorderingCheckbox.setImmediate(true);
  columnReorderingCheckbox.setValue(table.isColumnReorderingAllowed());
  columnReorderingCheckbox.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setColumnReorderingAllowed((Boolean)event.getProperty().getValue());
    }
  }
);
  addComponent(immediateCheckbox);
  addComponent(headerClickListenerCheckbox);
  addComponent(footerClickListenerCheckbox);
  addComponent(sortEnabledCheckbox);
  addComponent(columnReorderingCheckbox);
  addComponent(table);
}
