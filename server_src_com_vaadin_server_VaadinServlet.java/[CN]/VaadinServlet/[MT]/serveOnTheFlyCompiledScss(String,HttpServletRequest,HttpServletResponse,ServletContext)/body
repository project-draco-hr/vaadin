{
  if (!filename.endsWith(".css")) {
    return false;
  }
  String scssFilename=filename.substring(0,filename.length() - 4) + ".scss";
  URL scssUrl=findResourceURL(scssFilename,sc);
  if (scssUrl == null) {
    return false;
  }
  if (!isAllowedVAADINResourceUrl(request,scssUrl)) {
    getLogger().log(Level.INFO,"Requested resource [{0}] not accessible in the VAADIN directory or access to it is forbidden.",filename);
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
    return true;
  }
  if (getService().getDeploymentConfiguration().isProductionMode()) {
    getLogger().log(Level.INFO,"Request for {0} not handled by sass compiler while in production mode",filename);
    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return true;
  }
synchronized (SCSS_MUTEX) {
    String realFilename=sc.getRealPath(scssFilename);
    ScssStylesheet scss=ScssStylesheet.get(realFilename);
    if (scss == null) {
      if (scssFilename.startsWith("/")) {
        scssFilename=scssFilename.substring(1);
      }
      scss=ScssStylesheet.get(scssFilename);
    }
    if (scss == null) {
      getLogger().log(Level.WARNING,"Scss file {0} exists but ScssStylesheet was not able to find it",scssFilename);
      return false;
    }
    try {
      getLogger().log(Level.FINE,"Compiling {0} for request to {1}",new Object[]{realFilename,filename});
      scss.compile();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return false;
    }
    response.setHeader("Cache-Control","no-cache");
    final String mimetype=getService().getMimeType(filename);
    writeResponse(response,mimetype,scss.toString());
    return true;
  }
}
