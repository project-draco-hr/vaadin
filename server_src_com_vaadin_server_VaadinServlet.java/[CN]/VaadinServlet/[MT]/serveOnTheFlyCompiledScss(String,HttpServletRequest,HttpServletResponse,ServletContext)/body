{
  if (!filename.endsWith(".css")) {
    return false;
  }
  String scssFilename=filename.substring(0,filename.length() - 4) + ".scss";
  URL scssUrl=findResourceURL(scssFilename,sc);
  if (scssUrl == null) {
    return false;
  }
  if (!isAllowedVAADINResourceUrl(request,scssUrl)) {
    getLogger().log(Level.INFO,"Requested resource [{0}] not accessible in the VAADIN directory or access to it is forbidden.",filename);
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
    return true;
  }
  if (getService().getDeploymentConfiguration().isProductionMode()) {
    getLogger().log(Level.INFO,"Request for {0} not handled by sass compiler while in production mode",filename);
    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
    return true;
  }
synchronized (SCSS_MUTEX) {
    ScssCacheEntry cacheEntry=scssCache.get(scssFilename);
    if (cacheEntry == null) {
      try {
        cacheEntry=loadPersistedScssCache(scssFilename,sc);
      }
 catch (      Exception e) {
        getLogger().log(Level.WARNING,"Could not read persisted scss cache",e);
      }
    }
    if (cacheEntry == null || !cacheEntry.isStillValid()) {
      cacheEntry=compileScssOnTheFly(filename,scssFilename,sc);
      persistCacheEntry(cacheEntry);
    }
    scssCache.put(scssFilename,cacheEntry);
    if (cacheEntry == null) {
      return false;
    }
    response.setHeader("Cache-Control","no-cache");
    final String mimetype=getService().getMimeType(filename);
    writeResponse(response,mimetype,cacheEntry.getCss());
    return true;
  }
}
