{
  panel=new FlowPanel();
  if (!quietMode) {
    DOM.appendChild(getContainerElement(),caption);
    setWidget(panel);
    caption.setClassName("v-debug-console-caption");
    setStyleName("v-debug-console");
    DOM.setStyleAttribute(getElement(),"zIndex",20000 + "");
    DOM.setStyleAttribute(getElement(),"overflow","hidden");
    sinkEvents(Event.ONDBLCLICK);
    sinkEvents(Event.MOUSEEVENTS);
    panel.setStyleName("v-debug-console-content");
    caption.setInnerHTML("Debug window");
    caption.setTitle(help);
    show();
    setToDefaultSizeAndPos();
    actions=new HorizontalPanel();
    actions.add(clear);
    actions.add(restart);
    actions.add(forceLayout);
    actions.add(analyzeLayout);
    actions.add(savePosition);
    savePosition.setTitle("Saves the position and size of debug console to a cookie");
    actions.add(autoScroll);
    actions.add(hostedMode);
    if (Location.getParameter("gwt.codesvr") != null) {
      hostedMode.setValue(true);
    }
    hostedMode.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        if (hostedMode.getValue()) {
          addHMParameter();
        }
 else {
          removeHMParameter();
        }
      }
      private void addHMParameter(){
        UrlBuilder createUrlBuilder=Location.createUrlBuilder();
        createUrlBuilder.setParameter("gwt.codesvr","localhost:9997");
        Location.assign(createUrlBuilder.buildString());
      }
      private void removeHMParameter(){
        UrlBuilder createUrlBuilder=Location.createUrlBuilder();
        createUrlBuilder.removeParameter("gwt.codesvr");
        Location.assign(createUrlBuilder.buildString());
      }
    }
);
    autoScroll.setTitle("Automatically scroll so that new messages are visible");
    panel.add(actions);
    panel.add(new HTML("<i>" + help + "</i>"));
    clear.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        int width=panel.getOffsetWidth();
        int height=panel.getOffsetHeight();
        panel=new FlowPanel();
        panel.setPixelSize(width,height);
        panel.setStyleName("v-debug-console-content");
        panel.add(actions);
        setWidget(panel);
      }
    }
);
    restart.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        String queryString=Window.Location.getQueryString();
        if (queryString != null && queryString.contains("restartApplications")) {
          Window.Location.reload();
        }
 else {
          String url=Location.getHref();
          String separator="?";
          if (url.contains("?")) {
            separator="&";
          }
          if (!url.contains("restartApplication")) {
            url+=separator;
            url+="restartApplication";
          }
          if (!"".equals(Location.getHash())) {
            String hash=Location.getHash();
            url=url.replace(hash,"") + hash;
          }
          Window.Location.replace(url);
        }
      }
    }
);
    forceLayout.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
      }
    }
);
    analyzeLayout.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        List<ApplicationConnection> runningApplications=ApplicationConfiguration.getRunningApplications();
        for (        ApplicationConnection applicationConnection : runningApplications) {
          applicationConnection.analyzeLayouts();
        }
      }
    }
);
    analyzeLayout.setTitle("Analyzes currently rendered view and " + "reports possible common problems in usage of relative sizes." + "Will cause server visit/rendering of whole screen and loss of"+ " all non committed variables form client side.");
    savePosition.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        String pos=getAbsoluteLeft() + "," + getAbsoluteTop()+ ","+ getOffsetWidth()+ ","+ getOffsetHeight()+ ","+ autoScroll.getValue();
        Cookies.setCookie(POS_COOKIE_NAME,pos);
      }
    }
);
  }
  log("Widget set is built on version: " + ApplicationConfiguration.VERSION);
  logToDebugWindow("<div class=\"v-theme-version v-theme-version-" + ApplicationConfiguration.VERSION.replaceAll("\\.","_") + "\">Warning: widgetset version "+ ApplicationConfiguration.VERSION+ " does not seem to match theme version </div>",true);
}
