{
  super(false,false);
  this.client=client;
  panel=new FlowPanel();
  if (showWindow) {
    DOM.appendChild(getContainerElement(),caption);
    setWidget(panel);
    caption.setClassName("i-debug-console-caption");
    setStyleName("i-debug-console");
    DOM.setStyleAttribute(getElement(),"zIndex",20000 + "");
    DOM.setStyleAttribute(getElement(),"overflow","hidden");
    sinkEvents(Event.ONDBLCLICK);
    sinkEvents(Event.MOUSEEVENTS);
    panel.setStyleName("i-debug-console-content");
    caption.setInnerHTML("Debug window");
    caption.setTitle(help);
    show();
    minimize();
    actions=new HorizontalPanel();
    actions.add(clear);
    actions.add(restart);
    actions.add(forceLayout);
    actions.add(analyzeLayout);
    panel.add(actions);
    panel.add(new HTML("<i>" + help + "</i>"));
    clear.addClickListener(new ClickListener(){
      public void onClick(      Widget sender){
        int width=panel.getOffsetWidth();
        int height=panel.getOffsetHeight();
        panel=new FlowPanel();
        panel.setPixelSize(width,height);
        panel.setStyleName("i-debug-console-content");
        panel.add(actions);
        setWidget(panel);
      }
    }
);
    restart.addClickListener(new ClickListener(){
      public void onClick(      Widget sender){
        String queryString=Window.Location.getQueryString();
        if (queryString != null && queryString.contains("restartApplications")) {
          Window.Location.reload();
        }
 else {
          String url=Location.getHref();
          String separator="?";
          if (url.contains("?")) {
            separator="&";
          }
          if (!url.contains("restartApplication")) {
            url+=separator;
            url+="restartApplication";
          }
          if (!"".equals(Location.getHash())) {
            String hash=Location.getHash();
            url=url.replace(hash,"") + hash;
          }
          Window.Location.replace(url);
        }
      }
    }
);
    forceLayout.addClickListener(new ClickListener(){
      public void onClick(      Widget sender){
        VDebugConsole.this.client.forceLayout();
      }
    }
);
    analyzeLayout.addClickListener(new ClickListener(){
      public void onClick(      Widget sender){
        List<ApplicationConnection> runningApplications=ApplicationConfiguration.getRunningApplications();
        for (        ApplicationConnection applicationConnection : runningApplications) {
          applicationConnection.analyzeLayouts();
        }
      }
    }
);
    analyzeLayout.setTitle("Analyzes currently rendered view and " + "reports possible common problems in usage of relative sizes." + "Will cause server visit/rendering of whole screen + lose of"+ " all non committed variables form client side.");
  }
  log("Toolkit application servlet version: " + cnf.getServletVersion());
  log("Widget set is built on version: " + VERSION);
  log("Application version: " + cnf.getApplicationVersion());
  if (!cnf.getServletVersion().equals(VERSION)) {
    error("Warning: your widget set seems to be built with a different " + "version than the one used on server. Unexpected " + "behavior may occur.");
  }
}
