{
  LinkedHashMap<String,String> primaryStyleNames=new LinkedHashMap<String,String>();
  primaryStyleNames.put("v-grid","v-grid");
  primaryStyleNames.put("v-escalator","v-escalator");
  primaryStyleNames.put("my-grid","my-grid");
  createMultiClickAction("Primary style name","State",primaryStyleNames,new Command<Grid,String>(){
    @Override public void execute(    Grid grid,    String value,    Object data){
      grid.setPrimaryStyleName(value);
    }
  }
,primaryStyleNames.get("v-grid"));
  LinkedHashMap<String,SelectionMode> selectionModes=new LinkedHashMap<String,Grid.SelectionMode>();
  selectionModes.put("single",SelectionMode.SINGLE);
  selectionModes.put("multi",SelectionMode.MULTI);
  selectionModes.put("none",SelectionMode.NONE);
  createSelectAction("Selection mode","State",selectionModes,"none",new Command<Grid,Grid.SelectionMode>(){
    @Override public void execute(    Grid grid,    SelectionMode selectionMode,    Object data){
      grid.setSelectionMode(selectionMode);
    }
  }
);
  LinkedHashMap<String,List<SortOrder>> sortableProperties=new LinkedHashMap<String,List<SortOrder>>();
  for (  Object propertyId : ds.getSortableContainerPropertyIds()) {
    sortableProperties.put(propertyId + ", ASC",Sort.by(propertyId).build());
    sortableProperties.put(propertyId + ", DESC",Sort.by(propertyId,SortDirection.DESCENDING).build());
  }
  createSelectAction("Sort by column","State",sortableProperties,"Column 9, ascending",new Command<Grid,List<SortOrder>>(){
    @Override public void execute(    Grid grid,    List<SortOrder> sortOrder,    Object data){
      grid.setSortOrder(sortOrder);
    }
  }
);
  createBooleanAction("Reverse Grid Columns","State",false,new Command<Grid,Boolean>(){
    @Override public void execute(    Grid c,    Boolean value,    Object data){
      List<Object> ids=new ArrayList<Object>();
      ids.addAll(ds.getContainerPropertyIds());
      if (!value) {
        c.setColumnOrder(ids.toArray());
      }
 else {
        Object[] idsArray=new Object[ids.size()];
        for (int i=0; i < ids.size(); ++i) {
          idsArray[i]=ids.get((ids.size() - 1) - i);
        }
        c.setColumnOrder(idsArray);
      }
    }
  }
);
  LinkedHashMap<String,CellStyleGenerator> styleGenerators=new LinkedHashMap<String,CellStyleGenerator>();
  styleGenerators.put("None",null);
  styleGenerators.put("Row only",new CellStyleGenerator(){
    @Override public String getStyle(    Grid grid,    Object itemId,    Object propertyId){
      if (propertyId == null) {
        return "row" + itemId;
      }
 else {
        return null;
      }
    }
  }
);
  styleGenerators.put("Cell only",new CellStyleGenerator(){
    @Override public String getStyle(    Grid grid,    Object itemId,    Object propertyId){
      if (propertyId == null) {
        return null;
      }
 else {
        return propertyId.toString().replace(' ','-');
      }
    }
  }
);
  styleGenerators.put("Combined",new CellStyleGenerator(){
    @Override public String getStyle(    Grid grid,    Object itemId,    Object propertyId){
      int rowIndex=((Integer)itemId).intValue();
      if (propertyId == null) {
        if (rowIndex % 4 == 0) {
          return null;
        }
 else {
          return "row" + itemId;
        }
      }
 else {
        if (rowIndex % 4 == 1) {
          return null;
        }
 else         if (rowIndex % 4 == 3 && "Column 1".equals(propertyId)) {
          return null;
        }
        return propertyId.toString().replace(' ','_');
      }
    }
  }
);
  createSelectAction("Style generator","State",styleGenerators,"None",new Command<Grid,CellStyleGenerator>(){
    @Override public void execute(    Grid grid,    CellStyleGenerator generator,    Object data){
      grid.setCellStyleGenerator(generator);
    }
  }
);
  LinkedHashMap<String,Integer> frozenOptions=new LinkedHashMap<String,Integer>();
  for (int i=-1; i <= COLUMNS; i++) {
    frozenOptions.put(String.valueOf(i),Integer.valueOf(i));
  }
  createSelectAction("Frozen column count","State",frozenOptions,"0",new Command<Grid,Integer>(){
    @Override public void execute(    Grid c,    Integer value,    Object data){
      c.setFrozenColumnCount(value.intValue());
    }
  }
);
}
