{
  createCategory("Columns",null);
  for (int c=0; c < COLUMNS; c++) {
    final int index=c;
    createCategory(getColumnProperty(c),"Columns");
    createClickAction("Add / Remove",getColumnProperty(c),new Command<Grid,String>(){
      boolean wasHidable;
      boolean wasHidden;
      String wasColumnHidingToggleCaption;
      @Override public void execute(      Grid grid,      String value,      Object data){
        String columnProperty=getColumnProperty((Integer)data);
        Column column=grid.getColumn(columnProperty);
        if (column == null) {
          column=grid.addColumn(columnProperty);
          column.setHidable(wasHidable);
          column.setHidden(wasHidden);
          column.setHidingToggleCaption(wasColumnHidingToggleCaption);
        }
 else {
          wasHidable=column.isHidable();
          wasHidden=column.isHidden();
          wasColumnHidingToggleCaption=column.getHidingToggleCaption();
          grid.removeColumn(columnProperty);
        }
      }
    }
,null,c);
    createClickAction("Move left",getColumnProperty(c),new Command<Grid,String>(){
      @Override public void execute(      Grid grid,      String value,      Object data){
        final String columnProperty=getColumnProperty((Integer)data);
        List<Column> cols=grid.getColumns();
        List<Object> reordered=new ArrayList<Object>();
        boolean addAsLast=false;
        for (int i=0; i < cols.size(); i++) {
          Column col=cols.get(i);
          if (col.getPropertyId().equals(columnProperty)) {
            if (i == 0) {
              addAsLast=true;
            }
 else {
              reordered.add(i - 1,columnProperty);
            }
          }
 else {
            reordered.add(col.getPropertyId());
          }
        }
        if (addAsLast) {
          reordered.add(columnProperty);
        }
        grid.setColumnOrder(reordered.toArray());
      }
    }
,null,c);
    createBooleanAction("Sortable",getColumnProperty(c),true,new Command<Grid,Boolean>(){
      @Override public void execute(      Grid grid,      Boolean value,      Object columnIndex){
        Object propertyId=getColumnProperty((Integer)columnIndex);
        Column column=grid.getColumn(propertyId);
        column.setSortable(value);
      }
    }
,c);
    createBooleanAction("Resizable",getColumnProperty(c),true,new Command<Grid,Boolean>(){
      @Override public void execute(      Grid grid,      Boolean value,      Object columnIndex){
        Object propertyId=getColumnProperty((Integer)columnIndex);
        Column column=grid.getColumn(propertyId);
        column.setResizable(value);
      }
    }
,c);
    createBooleanAction("Hidable",getColumnProperty(c),isColumnHidableByDefault(c),new Command<Grid,Boolean>(){
      @Override public void execute(      Grid c,      Boolean hidable,      Object propertyId){
        grid.getColumn(propertyId).setHidable(hidable);
      }
    }
,getColumnProperty(c));
    createBooleanAction("Hidden",getColumnProperty(c),isColumnHiddenByDefault(c),new Command<Grid,Boolean>(){
      @Override public void execute(      Grid c,      Boolean hidden,      Object propertyId){
        grid.getColumn(propertyId).setHidden(hidden);
      }
    }
,getColumnProperty(c));
    createClickAction("Change hiding toggle caption",getColumnProperty(c),new Command<Grid,String>(){
      int count=0;
      @Override public void execute(      Grid grid,      String value,      Object data){
        final String columnProperty=getColumnProperty((Integer)data);
        grid.getColumn(columnProperty).setHidingToggleCaption(columnProperty + " caption " + count++);
      }
    }
,null,c);
    createClickAction("Change header caption",getColumnProperty(c),new Command<Grid,String>(){
      int count=0;
      @Override public void execute(      Grid grid,      String value,      Object data){
        final String columnProperty=getColumnProperty((Integer)data);
        grid.getColumn(columnProperty).setHeaderCaption(columnProperty + " header " + count++);
      }
    }
,null,c);
    createCategory("Column " + c + " Width",getColumnProperty(c));
    createClickAction("Auto","Column " + c + " Width",new Command<Grid,Integer>(){
      @Override public void execute(      Grid grid,      Integer value,      Object columnIndex){
        Object propertyId=getColumnProperty((Integer)columnIndex);
        Column column=grid.getColumn(propertyId);
        column.setWidthUndefined();
      }
    }
,-1,c);
    createClickAction("25.5px","Column " + c + " Width",new Command<Grid,Void>(){
      @Override public void execute(      Grid grid,      Void value,      Object columnIndex){
        grid.getColumns().get((Integer)columnIndex).setWidth(25.5);
      }
    }
,null,c);
    for (int w=50; w < 300; w+=50) {
      createClickAction(w + "px","Column " + c + " Width",new Command<Grid,Integer>(){
        @Override public void execute(        Grid grid,        Integer value,        Object columnIndex){
          Object propertyId=getColumnProperty((Integer)columnIndex);
          Column column=grid.getColumn(propertyId);
          column.setWidth(value);
        }
      }
,w,c);
    }
    LinkedHashMap<String,GridStaticCellType> defaultRows=new LinkedHashMap<String,GridStaticCellType>();
    defaultRows.put("Text Header",GridStaticCellType.TEXT);
    defaultRows.put("Html Header ",GridStaticCellType.HTML);
    defaultRows.put("Widget Header",GridStaticCellType.WIDGET);
    createMultiClickAction("Header Type",getColumnProperty(c),defaultRows,new Command<Grid,GridStaticCellType>(){
      @Override public void execute(      Grid grid,      GridStaticCellType value,      Object columnIndex){
        final Object propertyId=getColumnProperty((Integer)columnIndex);
        final HeaderCell cell=grid.getDefaultHeaderRow().getCell(propertyId);
switch (value) {
case TEXT:
          cell.setText("Text Header");
        break;
case HTML:
      cell.setHtml("HTML Header");
    break;
case WIDGET:
  cell.setComponent(new Button("Button Header",new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log("Button clicked!");
    }
  }
));
default :
break;
}
}
}
,c);
defaultRows=new LinkedHashMap<String,GridStaticCellType>();
defaultRows.put("Text Footer",GridStaticCellType.TEXT);
defaultRows.put("Html Footer",GridStaticCellType.HTML);
defaultRows.put("Widget Footer",GridStaticCellType.WIDGET);
createMultiClickAction("Footer Type",getColumnProperty(c),defaultRows,new Command<Grid,GridStaticCellType>(){
@Override public void execute(Grid grid,GridStaticCellType value,Object columnIndex){
final Object propertyId=getColumnProperty((Integer)columnIndex);
final FooterCell cell=grid.getFooterRow(0).getCell(propertyId);
switch (value) {
case TEXT:
cell.setText("Text Footer");
break;
case HTML:
cell.setHtml("HTML Footer");
break;
case WIDGET:
cell.setComponent(new Button("Button Footer",new ClickListener(){
@Override public void buttonClick(ClickEvent event){
log("Button clicked!");
}
}
));
default :
break;
}
}
}
,c);
}
createBooleanAction("All columns resizable","Columns",false,new Command<Grid,Boolean>(){
@Override public void execute(Grid c,Boolean value,Object data){
for (Column col : grid.getColumns()) {
col.setResizable(value);
}
}
}
);
createBooleanAction("All columns hidable","Columns",false,new Command<Grid,Boolean>(){
@Override public void execute(Grid c,Boolean value,Object data){
for (Column col : grid.getColumns()) {
col.setHidable(value);
}
}
}
);
createClickAction("All columns expanding, Col 0 has max width of 30px","Columns",new Command<Grid,Boolean>(){
@Override public void execute(Grid c,Boolean value,Object data){
for (Column col : grid.getColumns()) {
col.setWidthUndefined();
}
grid.getColumns().get(0).setMaximumWidth(30);
}
}
,null);
}
