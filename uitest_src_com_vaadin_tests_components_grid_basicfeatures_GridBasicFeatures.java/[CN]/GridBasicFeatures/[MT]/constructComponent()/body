{
  ds=new IndexedContainer(){
    @Override public List<Object> getItemIds(    int startIndex,    int numberOfIds){
      log("Requested items " + startIndex + " - "+ (startIndex + numberOfIds));
      return super.getItemIds(startIndex,numberOfIds);
    }
  }
;
{
    int col=0;
    for (; col < COLUMNS - MANUALLY_FORMATTED_COLUMNS; col++) {
      ds.addContainerProperty(getColumnProperty(col),String.class,"");
    }
    ds.addContainerProperty(getColumnProperty(col++),Integer.class,Integer.valueOf(0));
    ds.addContainerProperty(getColumnProperty(col++),Date.class,new Date());
    ds.addContainerProperty(getColumnProperty(col++),String.class,"");
    ds.addContainerProperty(getColumnProperty(col++),Integer.class,0);
    ds.addContainerProperty(getColumnProperty(col++),Integer.class,0);
  }
{
    Random rand=new Random();
    rand.setSeed(13334);
    long timestamp=0;
    for (int row=0; row < ROWS; row++) {
      Item item=ds.addItem(Integer.valueOf(row));
      int col=0;
      for (; col < COLUMNS - MANUALLY_FORMATTED_COLUMNS; col++) {
        item.getItemProperty(getColumnProperty(col)).setValue("(" + row + ", "+ col+ ")");
      }
      item.getItemProperty(getColumnProperty(1)).setReadOnly(true);
      item.getItemProperty(getColumnProperty(col++)).setValue(Integer.valueOf(row));
      item.getItemProperty(getColumnProperty(col++)).setValue(new Date(timestamp));
      timestamp+=91250000;
      item.getItemProperty(getColumnProperty(col++)).setValue("<b>" + row + "</b>");
      item.getItemProperty(getColumnProperty(col++)).setValue(rand.nextInt());
      item.getItemProperty(getColumnProperty(col++)).setValue(rand.nextInt(5));
    }
  }
  Grid grid=new Grid(ds);
{
    int col=grid.getContainerDataSource().getContainerPropertyIds().size() - MANUALLY_FORMATTED_COLUMNS;
    grid.getColumn(getColumnProperty(col++)).setRenderer(new NumberRenderer(new DecimalFormat("0,000.00",DecimalFormatSymbols.getInstance(new Locale("fi","FI")))));
    grid.getColumn(getColumnProperty(col++)).setRenderer(new DateRenderer(new SimpleDateFormat("dd.MM.yy HH:mm")));
    grid.getColumn(getColumnProperty(col++)).setRenderer(new HtmlRenderer());
    grid.getColumn(getColumnProperty(col++)).setRenderer(new NumberRenderer());
    grid.getColumn(getColumnProperty(col++)).setRenderer(new NumberRenderer());
  }
  grid.appendFooterRow();
  grid.setFooterVisible(false);
  for (int col=0; col < COLUMNS; col++) {
    grid.getFooterRow(0).getCell(getColumnProperty(col)).setText("Footer " + col);
  }
  for (int col=0; col < COLUMNS; col++) {
    grid.getColumn(getColumnProperty(col)).setWidth(100 + col * 50);
  }
  grid.addSortListener(new SortListener(){
    @Override public void sort(    SortEvent event){
      log("SortOrderChangeEvent: isUserOriginated? " + event.isUserOriginated());
    }
  }
);
  grid.setSelectionMode(SelectionMode.NONE);
  grid.getEditorRowField(getColumnProperty(3)).setReadOnly(true);
  createGridActions();
  createColumnActions();
  createPropertyActions();
  createHeaderActions();
  createFooterActions();
  createRowActions();
  createEditorRowActions();
  addHeightActions();
  addFilterActions();
  this.grid=grid;
  return grid;
}
