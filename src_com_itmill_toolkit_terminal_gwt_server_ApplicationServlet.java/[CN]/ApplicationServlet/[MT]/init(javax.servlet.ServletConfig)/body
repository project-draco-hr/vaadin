{
  super.init(servletConfig);
  final String applicationRunner=servletConfig.getInitParameter("applicationRunner");
  if (applicationRunner != null) {
    if ("true".equals(applicationRunner)) {
      isApplicationRunnerServlet=true;
    }
 else     if ("false".equals(applicationRunner)) {
      isApplicationRunnerServlet=false;
    }
 else {
      throw new ServletException("If applicationRunner parameter is given for an application, it must be 'true' or 'false'");
    }
  }
  applicationProperties=new Properties();
  for (final Enumeration e=servletConfig.getInitParameterNames(); e.hasMoreElements(); ) {
    final String name=(String)e.nextElement();
    applicationProperties.setProperty(name,servletConfig.getInitParameter(name));
  }
  final ServletContext context=servletConfig.getServletContext();
  for (final Enumeration e=context.getInitParameterNames(); e.hasMoreElements(); ) {
    final String name=(String)e.nextElement();
    applicationProperties.setProperty(name,context.getInitParameter(name));
  }
  if (getApplicationOrSystemProperty(PARAMETER_DEBUG,"true").equals("false")) {
    productionMode=true;
  }
 else   if (getApplicationOrSystemProperty(PARAMETER_PRODUCTION_MODE,"false").equals("true")) {
    productionMode=true;
  }
  if (!productionMode) {
    System.err.println(NOT_PRODUCTION_MODE_INFO);
  }
  if (getApplicationOrSystemProperty("testingToolsActive","false").equals("true")) {
    testingToolsActive=true;
    testingToolsServerUri=getApplicationOrSystemProperty("testingToolsServerUri",null);
  }
  final String classLoaderName=getApplicationOrSystemProperty("ClassLoader",null);
  ClassLoader classLoader;
  if (classLoaderName == null) {
    classLoader=getClass().getClassLoader();
  }
 else {
    try {
      final Class classLoaderClass=getClass().getClassLoader().loadClass(classLoaderName);
      final Constructor c=classLoaderClass.getConstructor(new Class[]{ClassLoader.class});
      classLoader=(ClassLoader)c.newInstance(new Object[]{getClass().getClassLoader()});
    }
 catch (    final Exception e) {
      throw new ServletException("Could not find specified class loader: " + classLoaderName,e);
    }
  }
  this.classLoader=classLoader;
  if (!isApplicationRunnerServlet) {
    final String applicationClassName=servletConfig.getInitParameter("application");
    if (applicationClassName == null) {
      throw new ServletException("Application not specified in servlet parameters");
    }
    try {
      applicationClass=classLoader.loadClass(applicationClassName);
    }
 catch (    final ClassNotFoundException e) {
      throw new ServletException("Failed to load application class: " + applicationClassName);
    }
  }
 else {
  }
}
