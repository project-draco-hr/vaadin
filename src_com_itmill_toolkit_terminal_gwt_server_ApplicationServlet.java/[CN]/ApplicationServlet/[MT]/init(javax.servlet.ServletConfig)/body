{
  super.init(servletConfig);
  String applicationClassName=servletConfig.getInitParameter("application");
  if (applicationClassName == null) {
    System.err.println("Application not specified in servlet parameters");
  }
  applicationProperties=new Properties();
  for (Enumeration e=servletConfig.getInitParameterNames(); e.hasMoreElements(); ) {
    String name=(String)e.nextElement();
    applicationProperties.setProperty(name,servletConfig.getInitParameter(name));
  }
  ServletContext context=servletConfig.getServletContext();
  for (Enumeration e=context.getInitParameterNames(); e.hasMoreElements(); ) {
    String name=(String)e.nextElement();
    applicationProperties.setProperty(name,context.getInitParameter(name));
  }
  String debug=getApplicationOrSystemProperty(PARAMETER_DEBUG,"").toLowerCase();
  if (!"".equals(debug) && !"true".equals(debug) && !"false".equals(debug)) {
    throw new ServletException("If debug parameter is given for an application, it must be 'true' or 'false'");
  }
  debugMode=debug;
  String classLoaderName=getApplicationOrSystemProperty("ClassLoader",null);
  ClassLoader classLoader;
  if (classLoaderName == null) {
    classLoader=getClass().getClassLoader();
  }
 else {
    try {
      Class classLoaderClass=getClass().getClassLoader().loadClass(classLoaderName);
      Constructor c=classLoaderClass.getConstructor(new Class[]{ClassLoader.class});
      classLoader=(ClassLoader)c.newInstance(new Object[]{getClass().getClassLoader()});
    }
 catch (    Exception e) {
      System.err.println("Could not find specified class loader: " + classLoaderName);
      throw new ServletException(e);
    }
  }
  this.classLoader=classLoader;
  try {
    applicationClass=classLoader.loadClass(applicationClassName);
  }
 catch (  ClassNotFoundException e) {
    throw new ServletException("Failed to load application class: " + applicationClassName);
  }
}
