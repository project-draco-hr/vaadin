{
  if (variables.containsKey("clickedKey")) {
    String key=(String)variables.get("clickedKey");
    Object id=itemIdMapper.get(key);
    MouseEventDetails details=MouseEventDetails.deSerialize((String)variables.get("clickEvent"));
    Item item=getItem(id);
    if (item != null) {
      fireEvent(new ItemClickEvent(this,item,id,null,details));
    }
  }
  if (!isSelectable() && variables.containsKey("selected")) {
    variables=new HashMap(variables);
    variables.remove("selected");
  }
  if (variables.containsKey("collapse")) {
    final String[] keys=(String[])variables.get("collapse");
    for (int i=0; i < keys.length; i++) {
      final Object id=itemIdMapper.get(keys[i]);
      if (id != null && isExpanded(id)) {
        expanded.remove(id);
        fireCollapseEvent(id);
      }
    }
  }
  if (variables.containsKey("expand")) {
    boolean sendChildTree=false;
    if (variables.containsKey("requestChildTree")) {
      sendChildTree=true;
    }
    final String[] keys=(String[])variables.get("expand");
    for (int i=0; i < keys.length; i++) {
      final Object id=itemIdMapper.get(keys[i]);
      if (id != null) {
        expandItem(id,sendChildTree);
      }
    }
  }
  if (variables.containsKey("selected") && isMultiSelect() && multiSelectMode == MultiSelectMode.DEFAULT) {
    handleSelectedItems(variables);
    variables=new HashMap<String,Object>(variables);
    variables.remove("selected");
  }
  super.changeVariables(source,variables);
  if (variables.containsKey("action")) {
    final StringTokenizer st=new StringTokenizer((String)variables.get("action"),",");
    if (st.countTokens() == 2) {
      final Object itemId=itemIdMapper.get(st.nextToken());
      final Action action=(Action)actionMapper.get(st.nextToken());
      if (action != null && containsId(itemId) && actionHandlers != null) {
        for (final Iterator<Action.Handler> i=actionHandlers.iterator(); i.hasNext(); ) {
          i.next().handleAction(action,this,itemId);
        }
      }
    }
  }
}
