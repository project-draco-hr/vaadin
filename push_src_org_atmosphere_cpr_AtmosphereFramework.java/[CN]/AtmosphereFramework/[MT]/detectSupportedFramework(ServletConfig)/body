{
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  String broadcasterClassNameTmp=null;
  try {
    cl.loadClass(JERSEY_CONTAINER);
    if (!isBroadcasterSpecified) {
      broadcasterClassNameTmp=lookupDefaultBroadcasterType(JERSEY_BROADCASTER);
      cl.loadClass(broadcasterClassNameTmp);
    }
    useStreamForFlushingComments=true;
  }
 catch (  Throwable t) {
    logger.trace("",t);
    return false;
  }
  logger.warn("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");
  initParams.put(WRITE_HEADERS,"false");
  ReflectorServletProcessor rsp=new ReflectorServletProcessor();
  if (broadcasterClassNameTmp != null)   broadcasterClassName=broadcasterClassNameTmp;
  rsp.setServletClassName(JERSEY_CONTAINER);
  sessionSupport(false);
  initParams.put(DISABLE_ONSTATE_EVENT,"true");
  String mapping=sc.getInitParameter(PROPERTY_SERVLET_MAPPING);
  if (mapping == null) {
    mapping="/*";
  }
  Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)cl.loadClass(broadcasterClassName);
  if (broadcasterFactory != null) {
    broadcasterFactory.destroy();
  }
  broadcasterFactory=new DefaultBroadcasterFactory(bc,broadcasterLifeCyclePolicy,config);
  BroadcasterFactory.setBroadcasterFactory(broadcasterFactory,config);
  for (  BroadcasterListener b : broadcasterListeners) {
    broadcasterFactory.addBroadcasterListener(b);
  }
  Broadcaster b;
  try {
    b=broadcasterFactory.get(bc,mapping);
  }
 catch (  IllegalStateException ex) {
    logger.warn("Two Broadcaster's named {}. Renaming the second one to {}",mapping,sc.getServletName() + mapping);
    b=broadcasterFactory.get(bc,sc.getServletName() + mapping);
  }
  addAtmosphereHandler(mapping,rsp,b);
  return true;
}
