{
  if (stream == null) {
    return;
  }
  AtmosphereConfigReader.getInstance().parse(config,stream);
  for (  AtmosphereHandlerConfig atmoHandler : config.getAtmosphereHandlerConfig()) {
    try {
      AtmosphereHandler handler;
      if (!ReflectorServletProcessor.class.getName().equals(atmoHandler.getClassName())) {
        handler=(AtmosphereHandler)c.loadClass(atmoHandler.getClassName()).newInstance();
      }
 else {
        handler=new ReflectorServletProcessor();
      }
      logger.info("Installed AtmosphereHandler {} mapped to context-path: {}",handler,atmoHandler.getContextRoot());
      for (      ApplicationConfiguration a : atmoHandler.getApplicationConfig()) {
        initParams.put(a.getParamName(),a.getParamValue());
      }
      for (      FrameworkConfiguration a : atmoHandler.getFrameworkConfig()) {
        initParams.put(a.getParamName(),a.getParamValue());
      }
      for (      AtmosphereHandlerProperty handlerProperty : atmoHandler.getProperties()) {
        if (handlerProperty.getValue() != null && handlerProperty.getValue().indexOf("jersey") != -1) {
          initParams.put(DISABLE_ONSTATE_EVENT,"true");
          useStreamForFlushingComments=true;
          broadcasterClassName=lookupDefaultBroadcasterType(JERSEY_BROADCASTER);
          broadcasterFactory=null;
          configureBroadcaster();
        }
        IntrospectionUtils.setProperty(handler,handlerProperty.getName(),handlerProperty.getValue());
        IntrospectionUtils.addProperty(handler,handlerProperty.getName(),handlerProperty.getValue());
      }
      sessionSupport(Boolean.valueOf(atmoHandler.getSupportSession()));
      String broadcasterClass=atmoHandler.getBroadcaster();
      Broadcaster b;
      if (broadcasterClass != null) {
        broadcasterClassName=broadcasterClass;
        ClassLoader cl=Thread.currentThread().getContextClassLoader();
        Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)cl.loadClass(broadcasterClassName);
        broadcasterFactory=new DefaultBroadcasterFactory(bc,broadcasterLifeCyclePolicy,config);
        BroadcasterFactory.setBroadcasterFactory(broadcasterFactory,config);
      }
      b=broadcasterFactory.lookup(atmoHandler.getContextRoot(),true);
      AtmosphereHandlerWrapper wrapper=new AtmosphereHandlerWrapper(handler,b);
      addMapping(atmoHandler.getContextRoot(),wrapper);
      String bc=atmoHandler.getBroadcasterCache();
      if (bc != null) {
        broadcasterCacheClassName=bc;
      }
      if (atmoHandler.getCometSupport() != null) {
        asyncSupport=(AsyncSupport)c.loadClass(atmoHandler.getCometSupport()).getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(new Object[]{config});
      }
      if (atmoHandler.getBroadcastFilterClasses() != null) {
        broadcasterFilters.addAll(atmoHandler.getBroadcastFilterClasses());
      }
      List<AtmosphereInterceptor> l=new ArrayList<AtmosphereInterceptor>();
      if (atmoHandler.getAtmosphereInterceptorClasses() != null) {
        for (        String a : atmoHandler.getAtmosphereInterceptorClasses()) {
          try {
            AtmosphereInterceptor ai=(AtmosphereInterceptor)c.loadClass(a).newInstance();
            ai.configure(config);
            l.add(ai);
          }
 catch (          Throwable e) {
            logger.warn("",e);
          }
        }
      }
      wrapper.interceptors=l;
      if (l.size() > 0) {
        logger.info("Installed AtmosphereInterceptor {} mapped to AtmosphereHandler {}",l,atmoHandler.getClassName());
      }
    }
 catch (    Throwable t) {
      logger.warn("Unable to load AtmosphereHandler class: " + atmoHandler.getClassName(),t);
      throw new ServletException(t);
    }
  }
}
