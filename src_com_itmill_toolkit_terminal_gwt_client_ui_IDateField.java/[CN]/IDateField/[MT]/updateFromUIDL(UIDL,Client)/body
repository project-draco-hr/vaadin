{
  if (client.updateComponent(this,uidl,true))   return;
  this.client=client;
  id=uidl.getId();
  immediate=uidl.getBooleanAttribute("immediate");
  if (uidl.hasAttribute("locale")) {
    String locale=uidl.getStringAttribute("locale");
    try {
      dts.setLocale(locale);
      currentLocale=locale;
    }
 catch (    LocaleNotLoadedException e) {
      dts=new DateTimeService();
      currentLocale=dts.getLocale();
      System.out.println("Tried to use an unloaded locale \"" + locale + "\". Using default locale ("+ currentLocale+ ").");
    }
  }
  int newResolution=RESOLUTION_YEAR;
  if (uidl.hasAttribute("month"))   newResolution=RESOLUTION_MONTH;
  if (uidl.hasAttribute("day"))   newResolution=RESOLUTION_DAY;
  if (uidl.hasAttribute("hour"))   newResolution=RESOLUTION_HOUR;
  if (uidl.hasAttribute("min"))   newResolution=RESOLUTION_MIN;
  if (uidl.hasAttribute("sec"))   newResolution=RESOLUTION_SEC;
  if (uidl.hasAttribute("msec"))   newResolution=RESOLUTION_MSEC;
  if (currentResolution > newResolution)   container.clear();
  currentResolution=newResolution;
  int year=uidl.getIntAttribute("year");
  int month=uidl.getIntAttribute("month");
  int day=uidl.getIntAttribute("day");
  int hour=uidl.getIntAttribute("hour");
  int min=uidl.getIntAttribute("min");
  int sec=uidl.getIntAttribute("sec");
  int msec=uidl.getIntAttribute("msec");
  date=new Date((long)buildDate(year,month,day,hour,min,sec,msec));
}
