{
  this.client=client;
  cachedUpdate=client.updateComponent(this,uidl,true);
  if (cachedUpdate) {
    return;
  }
  id=uidl.getId();
  disabled=uidl.hasAttribute("disabled");
  final UIDL tabs=uidl.getChildUIDL(0);
  ArrayList oldPaintables=new ArrayList();
  for (Iterator iterator=getPaintableIterator(); iterator.hasNext(); ) {
    oldPaintables.add(iterator.next());
  }
  tabKeys.clear();
  disabledTabKeys.clear();
  int index=0;
  for (final Iterator it=tabs.getChildIterator(); it.hasNext(); ) {
    final UIDL tab=(UIDL)it.next();
    final String key=tab.getStringAttribute("key");
    final boolean selected=tab.getBooleanAttribute("selected");
    final boolean hidden=tab.getBooleanAttribute("hidden");
    if (tab.getBooleanAttribute("disabled")) {
      disabledTabKeys.add(key);
    }
    tabKeys.add(key);
    if (selected) {
      activeTabIndex=index;
    }
    if (tab.getChildCount() > 0) {
      Paintable p=client.getPaintable(tab.getChildUIDL(0));
      oldPaintables.remove(p);
    }
    renderTab(tab,index,selected,hidden);
    index++;
  }
  for (Iterator iterator=oldPaintables.iterator(); iterator.hasNext(); ) {
    Object oldPaintable=iterator.next();
    if (oldPaintable instanceof Paintable) {
      Widget w=(Widget)oldPaintable;
      if (w.isAttached()) {
        w.removeFromParent();
      }
      client.unregisterPaintable((Paintable)oldPaintable);
    }
  }
}
