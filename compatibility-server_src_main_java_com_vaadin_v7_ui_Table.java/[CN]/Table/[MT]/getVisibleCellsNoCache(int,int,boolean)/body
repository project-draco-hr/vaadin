{
  if (getLogger().isLoggable(Level.FINEST)) {
    getLogger().log(Level.FINEST,"Render visible cells for rows {0}-{1}",new Object[]{firstIndex,(firstIndex + rows - 1)});
  }
  final Object[] colids=getVisibleColumns();
  final int cols=colids.length;
  HashSet<Property<?>> oldListenedProperties=listenedProperties;
  HashSet<Component> oldVisibleComponents=visibleComponents;
  if (replaceListeners) {
    listenedProperties=new HashSet<>();
    visibleComponents=new HashSet<>();
  }
  Object[][] cells=new Object[cols + CELL_FIRSTCOL][rows];
  if (rows == 0) {
    unregisterPropertiesAndComponents(oldListenedProperties,oldVisibleComponents);
    return cells;
  }
  final RowHeaderMode headmode=getRowHeaderMode();
  final boolean[] iscomponent=new boolean[cols];
  for (int i=0; i < cols; i++) {
    iscomponent[i]=columnGenerators.containsKey(colids[i]) || Component.class.isAssignableFrom(getType(colids[i]));
  }
  int firstIndexNotInCache;
  if (pageBuffer != null && pageBuffer[CELL_ITEMID].length > 0) {
    firstIndexNotInCache=pageBufferFirstIndex + pageBuffer[CELL_ITEMID].length;
  }
 else {
    firstIndexNotInCache=-1;
  }
  int filledRows=0;
  if (items instanceof Container.Indexed) {
    List<?> itemIds=getItemIds(firstIndex,rows);
    for (int i=0; i < rows && i < itemIds.size(); i++) {
      Object id=itemIds.get(i);
      if (id == null) {
        throw new IllegalStateException("Null itemId returned from container");
      }
      parseItemIdToCells(cells,id,i,firstIndex,headmode,cols,colids,firstIndexNotInCache,iscomponent,oldListenedProperties);
      filledRows++;
    }
  }
 else {
    Object id=firstItemId();
    for (int i=0; i < firstIndex; i++) {
      id=nextItemId(id);
    }
    for (int i=0; i < rows && id != null; i++) {
      parseItemIdToCells(cells,id,i,firstIndex,headmode,cols,colids,firstIndexNotInCache,iscomponent,oldListenedProperties);
      id=nextItemId(id);
      filledRows++;
    }
  }
  if (filledRows != cells[0].length) {
    final Object[][] temp=new Object[cells.length][filledRows];
    for (int i=0; i < cells.length; i++) {
      for (int j=0; j < filledRows; j++) {
        temp[i][j]=cells[i][j];
      }
    }
    cells=temp;
  }
  unregisterPropertiesAndComponents(oldListenedProperties,oldVisibleComponents);
  return cells;
}
