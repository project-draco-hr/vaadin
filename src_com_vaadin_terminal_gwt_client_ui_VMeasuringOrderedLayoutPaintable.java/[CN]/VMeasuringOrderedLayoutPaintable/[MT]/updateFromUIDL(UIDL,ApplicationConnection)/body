{
  super.updateFromUIDL(uidl,client);
  if (!isRealUpdate(uidl)) {
    return;
  }
  HashSet<VPaintableWidget> previousChildren=new HashSet<VPaintableWidget>(getChildren());
  for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL childUIDL=(UIDL)it.next();
    final VPaintableWidget child=client.getPaintable(childUIDL);
    Widget widget=child.getWidgetForPaintable();
    if (widget.getParent() != getWidgetForPaintable()) {
      getWidgetForPaintable().addChildWidget(widget);
    }
    if (!childUIDL.getBooleanAttribute("cached")) {
      child.updateFromUIDL(childUIDL,client);
      child.getMeasuredSize().setDirty(true);
    }
    previousChildren.remove(child);
  }
  for (  VPaintableWidget child : previousChildren) {
    Widget widget=child.getWidgetForPaintable();
    Element wrapper=VMeasuringOrderedLayout.getWrapper(widget);
    VCaption caption=getWidgetForPaintable().captions.remove(widget);
    if (caption != null) {
      getWidgetForPaintable().remove(caption);
    }
    getWidgetForPaintable().remove(widget);
    getWidgetForPaintable().getElement().removeChild(wrapper);
    VPaintableMap vPaintableMap=VPaintableMap.get(client);
    vPaintableMap.unregisterPaintable(child);
  }
  int bitMask=uidl.getIntAttribute("margins");
  getWidgetForPaintable().updateMarginStyleNames(new VMarginInfo(bitMask));
  getWidgetForPaintable().updateSpacingStyleName(uidl.getBooleanAttribute("spacing"));
  getWidgetForPaintable().expandRatios=uidl.getMapAttribute("expandRatios");
  getWidgetForPaintable().alignments=uidl.getMapAttribute("alignments");
  getMeasuredSize().setDirty(true);
}
