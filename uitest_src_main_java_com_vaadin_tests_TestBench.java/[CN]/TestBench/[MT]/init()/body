{
  for (int p=0; p < testablePackages.length; p++) {
    testables.addItem(testablePackages[p]);
    try {
      final List<Class<?>> testableClasses=getTestableClassesForPackage(testablePackages[p]);
      for (final Iterator<Class<?>> it=testableClasses.iterator(); it.hasNext(); ) {
        final Class<?> t=it.next();
        if (t.equals(TestBench.class)) {
          continue;
        }
        try {
          testables.addItem(t);
          itemCaptions.put(t,t.getName());
          testables.setParent(t,testablePackages[p]);
          testables.setChildrenAllowed(t,false);
          continue;
        }
 catch (        final Exception e) {
          try {
            testables.addItem(t);
            itemCaptions.put(t,t.getName());
            testables.setParent(t,testablePackages[p]);
            testables.setChildrenAllowed(t,false);
            continue;
          }
 catch (          final Exception e1) {
            e1.printStackTrace();
          }
        }
      }
    }
 catch (    final Exception e) {
      e.printStackTrace();
    }
  }
  menu=new Tree("Testables",testables);
  for (final Iterator<Class<?>> i=itemCaptions.keySet().iterator(); i.hasNext(); ) {
    final Class<?> testable=i.next();
    final String name=testable.getName().substring(testable.getName().lastIndexOf('.') + 1);
    menu.setItemCaption(testable,name);
  }
  for (final Iterator<?> i=menu.rootItemIds().iterator(); i.hasNext(); ) {
    menu.expandItemsRecursively(i.next());
  }
  menu.addListener(this);
  menu.setImmediate(true);
  menu.setNullSelectionAllowed(false);
  VerticalLayout lo=new VerticalLayout();
  lo.addComponent(menu);
  mainWindow.getPage().addListener(new Page.UriFragmentChangedListener(){
    @Override public void uriFragmentChanged(    UriFragmentChangedEvent source){
      String fragment=source.getUriFragment();
      if (fragment != null && !"".equals(fragment)) {
        Iterator<?> iterator=menu.getItemIds().iterator();
        while (iterator.hasNext()) {
          Object next=iterator.next();
          if (next instanceof Class) {
            Class<?> c=(Class<?>)next;
            String string=c.getName();
            if (string.equals(fragment)) {
              menu.setValue(c);
              mainLayout.setSplitPosition(0);
              return;
            }
          }
        }
        iterator=menu.getItemIds().iterator();
        while (iterator.hasNext()) {
          Object next=iterator.next();
          if (next instanceof Class) {
            Class<?> c=(Class<?>)next;
            String string=c.getSimpleName();
            if (string.equals(fragment)) {
              menu.setValue(c);
              mainLayout.setSplitPosition(0);
              return;
            }
          }
        }
        iterator=menu.getItemIds().iterator();
        while (iterator.hasNext()) {
          Object next=iterator.next();
          if (next instanceof Class) {
            Class<?> c=(Class<?>)next;
            String string=c.getSimpleName();
            if (string.startsWith("Ticket" + fragment)) {
              menu.setValue(c);
              mainLayout.setSplitPosition(0);
              return;
            }
          }
        }
        iterator=menu.getItemIds().iterator();
        while (iterator.hasNext()) {
          Object next=iterator.next();
          if (next instanceof Class) {
            Class<?> c=(Class<?>)next;
            String string=c.getSimpleName();
            if (string.toLowerCase().contains(fragment.toLowerCase())) {
              menu.setValue(c);
              mainLayout.setSplitPosition(0);
              return;
            }
          }
        }
        getMainWindow().showNotification("No potential matc for #" + fragment);
      }
    }
  }
);
  mainLayout.addComponent(lo);
  Panel bodyPanel=new Panel(bodyLayout);
  bodyPanel.addStyleName("light");
  bodyPanel.setSizeFull();
  mainLayout.addComponent(bodyPanel);
  mainLayout.setSplitPosition(30);
  mainWindow.setContent(mainLayout);
  setMainWindow(mainWindow);
}
