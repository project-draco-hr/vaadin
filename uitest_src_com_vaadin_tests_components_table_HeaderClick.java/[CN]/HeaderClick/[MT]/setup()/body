{
  final Table table=new Table();
  table.setColumnReorderingAllowed(true);
  table.setContainerDataSource(createContainer());
  table.setWidth("400px");
  table.setHeight("400px");
  table.setImmediate(true);
  final TextField columnField=new TextField("ProperyId of clicked column");
  table.addListener(new Table.HeaderClickListener(){
    @Override public void headerClick(    HeaderClickEvent event){
      columnField.setValue(String.valueOf(event.getPropertyId()));
    }
  }
);
  CheckBox immediateCheckbox=new CheckBox("Immediate");
  immediateCheckbox.setImmediate(true);
  immediateCheckbox.setValue(table.isImmediate());
  immediateCheckbox.addListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setImmediate((Boolean)event.getProperty().getValue());
    }
  }
);
  CheckBox sortEnabledCheckbox=new CheckBox("Sortable");
  sortEnabledCheckbox.setImmediate(true);
  sortEnabledCheckbox.setValue(table.isSortEnabled());
  sortEnabledCheckbox.addListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setSortDisabled(!(Boolean)event.getProperty().getValue());
    }
  }
);
  CheckBox columnReorderingCheckbox=new CheckBox("Column reordering allowed");
  columnReorderingCheckbox.setImmediate(true);
  columnReorderingCheckbox.setValue(table.isColumnReorderingAllowed());
  columnReorderingCheckbox.addListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      table.setColumnReorderingAllowed((Boolean)event.getProperty().getValue());
    }
  }
);
  addComponent(immediateCheckbox);
  addComponent(sortEnabledCheckbox);
  addComponent(columnReorderingCheckbox);
  addComponent(table);
  addComponent(columnField);
}
