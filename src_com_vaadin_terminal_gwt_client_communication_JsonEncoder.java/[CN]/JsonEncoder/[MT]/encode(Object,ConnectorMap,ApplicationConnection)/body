{
  if (null == value) {
    return combineTypeAndValue(VTYPE_NULL,JSONNull.getInstance());
  }
 else   if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.set(i,new JSONString(array[i]));
    }
    return combineTypeAndValue(VTYPE_STRINGARRAY,jsonArray);
  }
 else   if (value instanceof String) {
    return combineTypeAndValue(VTYPE_STRING,new JSONString((String)value));
  }
 else   if (value instanceof Boolean) {
    return combineTypeAndValue(VTYPE_BOOLEAN,JSONBoolean.getInstance((Boolean)value));
  }
 else   if (value instanceof Object[]) {
    return encodeObjectArray((Object[])value,connectorMap,connection);
  }
 else   if (value instanceof Map) {
    Map<Object,Object> map=(Map<Object,Object>)value;
    JSONObject jsonMap=new JSONObject();
    String type=VTYPE_MAP;
    for (    Object mapKey : map.keySet()) {
      Object mapValue=map.get(mapKey);
      if (mapKey instanceof Connector) {
        mapKey=((Connector)mapKey).getConnectorId();
        type=VTYPE_MAP_CONNECTOR;
      }
      if (!(mapKey instanceof String)) {
        throw new RuntimeException("Only Map<String,?> and Map<Connector,?> is currently supported." + " Failed map used " + mapKey.getClass().getName() + " as keys");
      }
      jsonMap.put((String)mapKey,encode(mapValue,connectorMap,connection));
    }
    return combineTypeAndValue(type,jsonMap);
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    return combineTypeAndValue(VTYPE_CONNECTOR,new JSONString(connector.getConnectorId()));
  }
 else   if (value instanceof Collection) {
    return encodeCollection((Collection)value,connectorMap,connection);
  }
 else {
    String transportType=getTransportType(value);
    if (transportType != null) {
      return combineTypeAndValue(transportType,new JSONString(String.valueOf(value)));
    }
 else {
      transportType=value.getClass().getName();
      JSONSerializer serializer=connection.getSerializerMap().getSerializer(transportType);
      return combineTypeAndValue(transportType,serializer.serialize(value,connectorMap,connection));
    }
  }
}
