{
  int summedWidgetWidth=0;
  int summedWidgetHeight=0;
  int maxWidgetWidth=0;
  int maxWidgetHeight=0;
  for (  ChildComponentContainer childComponentContainer : widgetToComponentContainer.values()) {
    int widgetHeight=0;
    int widgetWidth=0;
    if (childComponentContainer.isComponentRelativeSized(orientation)) {
      if (orientation == ORIENTATION_HORIZONTAL) {
        widgetHeight=getWidgetHeight(childComponentContainer);
      }
 else {
        widgetWidth=getWidgetWidth(childComponentContainer);
      }
    }
 else {
      widgetWidth=getWidgetWidth(childComponentContainer);
      widgetHeight=getWidgetHeight(childComponentContainer);
    }
    summedWidgetWidth+=widgetWidth;
    summedWidgetHeight+=widgetHeight;
    maxWidgetHeight=Math.max(maxWidgetHeight,widgetHeight);
    maxWidgetWidth=Math.max(maxWidgetWidth,widgetWidth);
  }
  if (isHorizontal()) {
    summedWidgetWidth+=activeSpacing.hSpacing * (widgetToComponentContainer.size() - 1);
  }
 else {
    summedWidgetHeight+=activeSpacing.vSpacing * (widgetToComponentContainer.size() - 1);
  }
  Size layoutSize=updateLayoutDimensions(summedWidgetWidth,summedWidgetHeight,maxWidgetWidth,maxWidgetHeight);
  int remainingSpace;
  if (isHorizontal()) {
    remainingSpace=layoutSize.getWidth() - summedWidgetWidth;
  }
 else {
    remainingSpace=layoutSize.getHeight() - summedWidgetHeight;
  }
  if (remainingSpace < 0) {
    remainingSpace=0;
  }
  ApplicationConnection.getConsole().log("Layout size: " + activeLayoutSize);
  return remainingSpace;
}
