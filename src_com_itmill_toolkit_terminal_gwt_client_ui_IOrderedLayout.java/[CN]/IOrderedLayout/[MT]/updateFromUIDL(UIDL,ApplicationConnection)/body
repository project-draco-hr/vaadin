{
  this.client=client;
  if (client.updateComponent(this,uidl,false)) {
    return;
  }
  handleMargins(uidl);
  hasComponentSpacing=uidl.getBooleanAttribute("spacing");
  final ArrayList uidlWidgets=new ArrayList();
  for (final Iterator it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL uidlForChild=(UIDL)it.next();
    final Paintable child=client.getPaintable(uidlForChild);
    uidlWidgets.add(child);
  }
  final ArrayList oldWidgets=getPaintables();
  final Iterator oldIt=oldWidgets.iterator();
  final Iterator newIt=uidlWidgets.iterator();
  final Iterator newUidl=uidl.getChildIterator();
  final ArrayList paintedWidgets=new ArrayList();
  Widget oldChild=null;
  while (newIt.hasNext()) {
    final Widget child=(Widget)newIt.next();
    final UIDL childUidl=(UIDL)newUidl.next();
    if (oldChild == null && oldIt.hasNext()) {
      while (oldIt.hasNext()) {
        oldChild=(Widget)oldIt.next();
        if (paintedWidgets.contains(oldChild)) {
          continue;
        }
 else         if (uidlWidgets.contains(oldChild)) {
          break;
        }
 else {
          removePaintable((Paintable)oldChild);
          oldChild=null;
        }
      }
    }
    if (oldChild == null) {
      add(child);
    }
 else     if (child == oldChild) {
      oldChild=null;
    }
 else     if (hasChildComponent(child)) {
      removeCaption(child);
      int index=getWidgetIndex(oldChild);
      if (componentToCaption.containsKey(oldChild)) {
        index--;
      }
      remove(child);
      this.insert(child,index);
    }
 else {
      final int index=getWidgetIndex(oldChild);
      insert(child,index);
    }
    ((Paintable)child).updateFromUIDL(childUidl,client);
    paintedWidgets.add(child);
  }
  while (oldIt.hasNext()) {
    oldChild=(Widget)oldIt.next();
    final Paintable p=(Paintable)oldChild;
    if (!uidlWidgets.contains(p)) {
      removePaintable(p);
    }
  }
  handleAlignments(uidl);
}
