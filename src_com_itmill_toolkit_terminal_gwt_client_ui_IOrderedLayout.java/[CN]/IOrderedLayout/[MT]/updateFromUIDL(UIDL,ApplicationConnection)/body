{
  this.client=client;
  if (client.updateComponent(this,uidl,false)) {
    return;
  }
  if (margins.getBitMask() != uidl.getIntAttribute("margins")) {
    handleMargins(uidl);
  }
  hasComponentSpacing=uidl.getBooleanAttribute("spacing");
  final Vector newWidgets=new Vector();
  for (final Iterator it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL uidlForChild=(UIDL)it.next();
    final Paintable child=client.getPaintable(uidlForChild);
    newWidgets.add(child);
  }
  final Iterator oldWidgetsIterator=(new Vector(childWidgets)).iterator();
  final Iterator newWidgetsIterator=newWidgets.iterator();
  final Iterator newUIDLIterator=uidl.getChildIterator();
  final Vector paintedWidgets=new Vector();
  Widget oldChild=null;
  while (newWidgetsIterator.hasNext()) {
    final Widget newChild=(Widget)newWidgetsIterator.next();
    final UIDL newChildUIDL=(UIDL)newUIDLIterator.next();
    if (oldChild == null && oldWidgetsIterator.hasNext()) {
      while (oldWidgetsIterator.hasNext()) {
        oldChild=(Widget)oldWidgetsIterator.next();
        if (paintedWidgets.contains(oldChild)) {
          continue;
        }
 else         if (newWidgets.contains(oldChild)) {
          break;
        }
 else {
          remove(oldChild);
          oldChild=null;
        }
      }
    }
    if (oldChild == null) {
      add(newChild);
    }
 else     if (newChild == oldChild) {
      oldChild=null;
    }
 else     if (hasChildComponent(newChild)) {
      add(newChild,childWidgets.indexOf(oldChild));
    }
 else {
      add(newChild,childWidgets.indexOf(oldChild));
    }
    ((Paintable)newChild).updateFromUIDL(newChildUIDL,client);
    paintedWidgets.add(newChild);
  }
  while (oldWidgetsIterator.hasNext()) {
    oldChild=(Widget)oldWidgetsIterator.next();
    if (!newWidgets.contains(oldChild)) {
      remove(oldChild);
    }
  }
  handleAlignments(uidl);
}
