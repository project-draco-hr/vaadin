{
  final Tree tree=new Tree("Inventory");
  CheckBox checkBox=new CheckBox("Enabled");
  checkBox.setImmediate(true);
  checkBox.setValue(true);
  checkBox.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      tree.setEnabled(!tree.isEnabled());
    }
  }
);
  addComponent(checkBox);
  checkBox=new CheckBox("Drag start");
  checkBox.setImmediate(true);
  checkBox.setValue(true);
  checkBox.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      if (((CheckBox)event.getProperty()).booleanValue()) {
        tree.setDragMode(TreeDragMode.NODE);
      }
 else {
        tree.setDragMode(TreeDragMode.NONE);
      }
    }
  }
);
  addComponent(checkBox);
  tree.setContainerDataSource(createTreeContent());
  tree.setItemCaptionMode(Tree.ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID);
  for (  Object item : tree.getItemIds().toArray()) {
    tree.setItemCaption(item,(String)((BeanItem<?>)item).getItemProperty("name").getValue());
  }
  getLayout().addComponent(tree);
  for (Iterator<?> it=tree.rootItemIds().iterator(); it.hasNext(); ) {
    tree.expandItemsRecursively(it.next());
  }
  tree.setDragMode(TreeDragMode.NODE);
  tree.setDropHandler(new DropHandler(){
    public AcceptCriterion getAcceptCriterion(){
      return new Or(Tree.TargetItemAllowsChildren.get(),new Not(VerticalLocationIs.MIDDLE));
    }
    public void drop(    DragAndDropEvent event){
      DataBoundTransferable t=(DataBoundTransferable)event.getTransferable();
      TreeTargetDetails target=(TreeTargetDetails)event.getTargetDetails();
      Object sourceItemId=t.getData("itemId");
      Object targetItemId=target.getItemIdOver();
      VerticalDropLocation location=target.getDropLocation();
      HierarchicalContainer container=(HierarchicalContainer)tree.getContainerDataSource();
      BeanItem<?> beanItem=null;
      if (sourceItemId instanceof BeanItem<?>) {
        beanItem=(BeanItem<?>)sourceItemId;
      }
 else       if (sourceItemId instanceof InventoryObject) {
        beanItem=new BeanItem<InventoryObject>((InventoryObject)sourceItemId);
      }
      Container sourceContainer=t.getSourceContainer();
      sourceContainer.removeItem(sourceItemId);
      tree.addItem(beanItem);
      InventoryObject bean=(InventoryObject)beanItem.getBean();
      tree.setChildrenAllowed(beanItem,bean.isContainer());
      if (location == VerticalDropLocation.MIDDLE) {
        tree.setParent(beanItem,targetItemId);
      }
 else       if (location == VerticalDropLocation.TOP) {
        Object parentId=container.getParent(targetItemId);
        tree.setParent(beanItem,parentId);
        container.moveAfterSibling(beanItem,targetItemId);
        container.moveAfterSibling(targetItemId,beanItem);
      }
 else       if (location == VerticalDropLocation.BOTTOM) {
        Object parentId=container.getParent(targetItemId);
        tree.setParent(beanItem,parentId);
        container.moveAfterSibling(beanItem,targetItemId);
      }
      tree.setItemCaption(beanItem,bean.getName());
    }
  }
);
  final Table table=new Table("Inventory List");
  table.setDragMode(TableDragMode.ROW);
  ArrayList<InventoryObject> collection=new ArrayList<InventoryObject>();
  collection.add(new InventoryObject("Dummy Item",0.0,false));
  final BeanItemContainer<InventoryObject> tableContainer=new BeanItemContainer<InventoryObject>(collection);
  table.setContainerDataSource(tableContainer);
  table.setVisibleColumns(new String[]{"name","weight"});
  table.removeAllItems();
  table.setDropHandler(new DropHandler(){
    public AcceptCriterion getAcceptCriterion(){
      return new Not(VerticalLocationIs.MIDDLE);
    }
    public void drop(    DragAndDropEvent event){
      DataBoundTransferable t=(DataBoundTransferable)event.getTransferable();
      if (t.getSourceComponent() != tree && t.getSourceComponent() != table) {
        return;
      }
      AbstractSelectTargetDetails target=(AbstractSelectTargetDetails)event.getTargetDetails();
      Object sourceItemId=t.getData("itemId");
      Object targetItemId=target.getItemIdOver();
      if (sourceItemId.equals(targetItemId)) {
        return;
      }
      InventoryObject bean=null;
      if (sourceItemId instanceof BeanItem<?>) {
        bean=(InventoryObject)((BeanItem<?>)sourceItemId).getBean();
      }
 else       if (sourceItemId instanceof InventoryObject) {
        bean=(InventoryObject)sourceItemId;
      }
      t.getSourceContainer().removeItem(sourceItemId);
      VerticalDropLocation location=target.getDropLocation();
      if (targetItemId == null) {
        tableContainer.addItem(bean);
      }
 else       if (location == VerticalDropLocation.TOP) {
        tableContainer.addItemAt(tableContainer.indexOfId(targetItemId),bean);
      }
 else       if (location == VerticalDropLocation.BOTTOM) {
        tableContainer.addItemAfter(targetItemId,bean);
      }
    }
  }
);
  getLayout().addComponent(table);
}
