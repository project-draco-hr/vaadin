{
  Object emptyKey[]=new Object[delegate.getPrimaryKeyColumns().size()];
  RowId itemId=new TemporaryRowId(emptyKey);
  List<ColumnProperty> itemProperties=new ArrayList<ColumnProperty>();
  for (  String propertyId : propertyIds) {
    itemProperties.add(new ColumnProperty(propertyId,propertyReadOnly.get(propertyId),!propertyReadOnly.get(propertyId),propertyNullable.get(propertyId),null,getType(propertyId)));
  }
  RowItem newRowItem=new RowItem(this,itemId,itemProperties);
  if (autoCommit) {
    try {
      if (delegate instanceof TableQuery) {
        itemId=((TableQuery)delegate).storeRowImmediately(newRowItem);
      }
 else {
        delegate.beginTransaction();
        delegate.storeRow(newRowItem);
        delegate.commit();
      }
      refresh();
      if (notificationsEnabled) {
        CacheFlushNotifier.notifyOfCacheFlush(this);
      }
      logger.log(Level.INFO,"Row added to DB...");
      return itemId;
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,"Failed to add row to DB. Rolling back.",e);
      try {
        delegate.rollback();
      }
 catch (      SQLException ee) {
        logger.log(Level.SEVERE,"Failed to roll back row addition",e);
      }
      return null;
    }
  }
 else {
    addedItems.add(newRowItem);
    fireContentsChange();
    return itemId;
  }
}
