{
  final Table table=new Table();
  List<TestObject> data=createData(1000);
  final BeanItemContainer<TestObject> container=new BeanItemContainer<TestObject>(TestObject.class,data){
    @Override public int size(){
      if (reduceData) {
        return 100;
      }
 else {
        return super.size();
      }
    }
  }
;
  table.setContainerDataSource(container);
  addComponent(table);
  final Label label=new Label();
  addComponent(label);
  Button button=new Button("Click");
  button.addListener(new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      try {
        reduceData=!reduceData;
        table.refreshRowCache();
        label.setValue("Index: " + table.getCurrentPageFirstItemIndex());
      }
 catch (      Exception e) {
        label.setValue("Exception: " + e.getClass().getSimpleName());
      }
    }
  }
);
  addComponent(button);
  Button button2=new Button("Filter");
  button2.addListener(new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      try {
        if (filter != null) {
          container.removeAllContainerFilters();
          filter=null;
        }
 else {
          filter=new DecimateFilter();
          container.addContainerFilter(filter);
        }
        table.refreshRowCache();
        label.setValue("Index: " + table.getCurrentPageFirstItemIndex());
      }
 catch (      Exception e) {
        label.setValue("Exception: " + e.getClass().getSimpleName());
      }
    }
  }
);
  addComponent(button2);
}
