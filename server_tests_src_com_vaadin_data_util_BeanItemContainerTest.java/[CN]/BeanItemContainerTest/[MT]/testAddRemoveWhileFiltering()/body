{
  BeanItemContainer<Person> container=new BeanItemContainer<Person>(Person.class);
  Person john=new Person("John");
  Person jane=new Person("Jane");
  Person matthew=new Person("Matthew");
  Person jack=new Person("Jack");
  Person michael=new Person("Michael");
  Person william=new Person("William");
  Person julia=new Person("Julia");
  Person george=new Person("George");
  Person mark=new Person("Mark");
  container.addBean(john);
  container.addBean(jane);
  container.addBean(matthew);
  assertEquals(3,container.size());
  container.addContainerFilter("name","j",true,true);
  assertEquals(2,container.size());
  container.addBean(jack);
  assertEquals(3,container.size());
  assertEquals(jack,container.lastItemId());
  container.addBean(michael);
  container.addItemAfter(null,william);
  container.addItemAfter(john,george);
  assertEquals(3,container.size());
  assertEquals(john,container.firstItemId());
  container.addItemAfter(william,julia);
  assertEquals(3,container.size());
  assertEquals(john,container.firstItemId());
  container.addItemAt(1,julia);
  container.addItemAt(2,mark);
  container.removeItem(matthew);
  assertEquals(4,container.size());
  assertEquals(jack,container.lastItemId());
  container.removeContainerFilters("name");
  assertEquals(8,container.size());
  assertEquals(william,container.firstItemId());
  assertEquals(john,container.nextItemId(william));
  assertEquals(julia,container.nextItemId(john));
  assertEquals(mark,container.nextItemId(julia));
  assertEquals(george,container.nextItemId(mark));
  assertEquals(jane,container.nextItemId(george));
  assertEquals(jack,container.nextItemId(jane));
  assertEquals(michael,container.lastItemId());
}
