{
  this.client=client;
  id=uidl.getId();
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  if (uidl.getBooleanAttribute("readonly")) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  inputPrompt=uidl.getStringAttribute(ATTR_INPUTPROMPT);
  setMaxLength(uidl.hasAttribute("maxLength") ? uidl.getIntAttribute("maxLength") : -1);
  immediate=uidl.getBooleanAttribute("immediate");
  if (uidl.hasAttribute("cols")) {
    setColumns(new Integer(uidl.getStringAttribute("cols")).intValue());
  }
  final String text=uidl.hasVariable("text") ? uidl.getStringVariable("text") : null;
  setPrompting(inputPrompt != null && focusedTextField != this && (text == null || text.equals("")));
  if (BrowserInfo.get().isGecko()) {
    DeferredCommand.addCommand(new Command(){
      public void execute(){
        String fieldValue;
        if (prompting) {
          fieldValue=isReadOnly() ? "" : inputPrompt;
          addStyleDependentName(CLASSNAME_PROMPT);
        }
 else {
          fieldValue=text;
          removeStyleDependentName(CLASSNAME_PROMPT);
        }
        setText(fieldValue);
      }
    }
);
  }
 else {
    String fieldValue;
    if (prompting) {
      fieldValue=isReadOnly() ? "" : inputPrompt;
      addStyleDependentName(CLASSNAME_PROMPT);
    }
 else {
      fieldValue=text;
      removeStyleDependentName(CLASSNAME_PROMPT);
    }
    setText(fieldValue);
  }
  valueBeforeEdit=uidl.getStringVariable("text");
  if (uidl.hasAttribute("selpos")) {
    final int pos=uidl.getIntAttribute("selpos");
    final int length=uidl.getIntAttribute("sellen");
    DeferredCommand.addCommand(new Command(){
      public void execute(){
        setSelectionRange(pos,length);
      }
    }
);
  }
}
