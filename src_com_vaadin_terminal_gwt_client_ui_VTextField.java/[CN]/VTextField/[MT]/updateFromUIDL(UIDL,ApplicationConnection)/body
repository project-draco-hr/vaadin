{
  this.client=client;
  id=uidl.getId();
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  if (uidl.getBooleanAttribute("readonly")) {
    setReadOnly(true);
  }
 else {
    setReadOnly(false);
  }
  inputPrompt=uidl.getStringAttribute(ATTR_INPUTPROMPT);
  setMaxLength(uidl.hasAttribute("maxLength") ? uidl.getIntAttribute("maxLength") : -1);
  immediate=uidl.getBooleanAttribute("immediate");
  listenTextChangeEvents=client.hasEventListeners(this,"ie");
  if (listenTextChangeEvents) {
    textChangeEventMode=uidl.getStringAttribute(ATTR_TEXTCHANGE_EVENTMODE);
    if (textChangeEventMode.equals(TEXTCHANGE_MODE_EAGER)) {
      textChangeEventTimeout=1;
    }
 else {
      textChangeEventTimeout=uidl.getIntAttribute(ATTR_TEXTCHANGE_TIMEOUT);
      if (textChangeEventTimeout < 1) {
        textChangeEventTimeout=1;
      }
    }
    sinkEvents(TEXTCHANGE_EVENTS);
    attachCutEventListener(getElement());
  }
  if (uidl.hasAttribute("cols")) {
    setColumns(new Integer(uidl.getStringAttribute("cols")).intValue());
  }
  final String text=uidl.getStringVariable("text");
  if (!(uidl.getBooleanAttribute(ATTR_NO_VALUE_CHANGE_BETWEEN_PAINTS) && valueBeforeEdit != null && text.equals(valueBeforeEdit))) {
    updateFieldContent(text);
  }
  if (uidl.hasAttribute("selpos")) {
    final int pos=uidl.getIntAttribute("selpos");
    final int length=uidl.getIntAttribute("sellen");
    Scheduler.get().scheduleDeferred(new Command(){
      public void execute(){
        setSelectionRange(pos,length);
      }
    }
);
  }
  if (uidl.hasAttribute("wordwrap") && uidl.getBooleanAttribute("wordwrap") == false) {
    setWordwrap(false);
  }
 else {
    setWordwrap(true);
  }
}
