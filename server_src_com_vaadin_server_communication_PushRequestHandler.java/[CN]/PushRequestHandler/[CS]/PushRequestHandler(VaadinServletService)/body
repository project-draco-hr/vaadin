{
  final ServletConfig config=service.getServlet().getServletConfig();
  atmosphere=new AtmosphereFramework(){
    @Override protected void analytics(){
    }
    @Override public AtmosphereFramework addInitParameter(    String name,    String value){
      if (config.getInitParameter(name) == null) {
        super.addInitParameter(name,value);
      }
      return this;
    }
  }
;
  service.addServiceDestroyListener(new ServiceDestroyListener(){
    @Override public void serviceDestroy(    ServiceDestroyEvent event){
      destroy();
    }
  }
);
  pushHandler=new PushHandler(service);
  atmosphere.addAtmosphereHandler("/*",pushHandler);
  atmosphere.addInitParameter(ApplicationConfig.PROPERTY_SESSION_SUPPORT,"true");
  atmosphere.addInitParameter(ApplicationConfig.MESSAGE_DELIMITER,String.valueOf(PushConstants.MESSAGE_DELIMITER));
  final String bufferSize=String.valueOf(PushConstants.WEBSOCKET_BUFFER_SIZE);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_BUFFER_SIZE,bufferSize);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_MAXTEXTSIZE,bufferSize);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_MAXBINARYSIZE,bufferSize);
  atmosphere.addInitParameter("org.atmosphere.cpr.showSupportMessage","false");
  try {
    atmosphere.init(config);
    AtmosphereInterceptor trackMessageSize=new TrackMessageSizeInterceptor();
    trackMessageSize.configure(atmosphere.getAtmosphereConfig());
    atmosphere.interceptor(trackMessageSize);
  }
 catch (  ServletException e) {
    throw new ServiceException("Could not read atmosphere settings",e);
  }
}
