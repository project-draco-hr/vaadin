{
  AtmosphereFramework atmosphere=new AtmosphereFramework(false,false){
    @Override protected void analytics(){
    }
    @Override public AtmosphereFramework addInitParameter(    String name,    String value){
      if (vaadinServletConfig.getInitParameter(name) == null) {
        super.addInitParameter(name,value);
      }
      return this;
    }
  }
;
  atmosphere.addAtmosphereHandler("/*",new PushAtmosphereHandler());
  atmosphere.addInitParameter(ApplicationConfig.BROADCASTER_CACHE,UUIDBroadcasterCache.class.getName());
  atmosphere.addInitParameter(ApplicationConfig.ANNOTATION_PROCESSOR,VoidAnnotationProcessor.class.getName());
  atmosphere.addInitParameter(ApplicationConfig.PROPERTY_SESSION_SUPPORT,"true");
  atmosphere.addInitParameter(ApplicationConfig.MESSAGE_DELIMITER,String.valueOf(PushConstants.MESSAGE_DELIMITER));
  atmosphere.addInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER,"false");
  atmosphere.addInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTORS,HeartbeatInterceptor.class.getName());
  final String bufferSize=String.valueOf(PushConstants.WEBSOCKET_BUFFER_SIZE);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_BUFFER_SIZE,bufferSize);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_MAXTEXTSIZE,bufferSize);
  atmosphere.addInitParameter(ApplicationConfig.WEBSOCKET_MAXBINARYSIZE,bufferSize);
  atmosphere.addInitParameter(ApplicationConfig.PROPERTY_ALLOW_SESSION_TIMEOUT_REMOVAL,"false");
  atmosphere.addInitParameter("org.atmosphere.cpr.showSupportMessage","false");
  try {
    atmosphere.init(vaadinServletConfig);
    AtmosphereInterceptor trackMessageSize=new TrackMessageSizeInterceptor();
    trackMessageSize.configure(atmosphere.getAtmosphereConfig());
    atmosphere.interceptor(trackMessageSize);
  }
 catch (  ServletException e) {
    throw new RuntimeException("Atmosphere init failed",e);
  }
  return atmosphere;
}
