{
  if (stream.getParameter("Location") != null) {
    response.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);
    response.setHeader("Location",stream.getParameter("Location"));
    return;
  }
  final InputStream data=stream.getStream();
  if (data != null) {
    OutputStream out=null;
    try {
      response.setContentType(stream.getContentType());
      final long cacheTime=stream.getCacheTime();
      if (cacheTime <= 0) {
        response.setHeader("Cache-Control","no-cache");
        response.setHeader("Pragma","no-cache");
        response.setHeader("Expires",HTTP_DATE_FORMAT.format(new Date(0)));
      }
 else {
        response.setHeader("Cache-Control","max-age=" + cacheTime / 1000);
        response.setHeader("Expires",HTTP_DATE_FORMAT.format(new Date(System.currentTimeMillis() + cacheTime)));
        response.setHeader("Pragma","cache");
      }
      final Iterator<String> i=stream.getParameterNames();
      if (i != null) {
        while (i.hasNext()) {
          final String param=i.next();
          response.setHeader(param,stream.getParameter(param));
        }
      }
      String contentDispositionValue=stream.getParameter("Content-Disposition");
      if (contentDispositionValue == null) {
        contentDispositionValue="filename=\"" + stream.getFileName() + "\"";
        response.setHeader("Content-Disposition",contentDispositionValue);
      }
      int bufferSize=stream.getBufferSize();
      if (bufferSize <= 0 || bufferSize > Constants.MAX_BUFFER_SIZE) {
        bufferSize=Constants.DEFAULT_BUFFER_SIZE;
      }
      final byte[] buffer=new byte[bufferSize];
      int bytesRead=0;
      out=response.getOutputStream();
      long totalWritten=0;
      while ((bytesRead=data.read(buffer)) > 0) {
        out.write(buffer,0,bytesRead);
        totalWritten+=bytesRead;
        if (totalWritten >= buffer.length) {
          out.flush();
        }
      }
    }
  finally {
      AbstractCommunicationManager.tryToCloseStream(out);
      AbstractCommunicationManager.tryToCloseStream(data);
    }
  }
}
