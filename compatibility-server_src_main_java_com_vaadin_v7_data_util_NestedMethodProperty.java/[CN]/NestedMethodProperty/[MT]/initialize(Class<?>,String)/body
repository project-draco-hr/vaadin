{
  List<Method> getMethods=new ArrayList<>();
  String lastSimplePropertyName=propertyName;
  Class<?> lastClass=beanClass;
  Class<?> propertyClass=beanClass;
  String[] simplePropertyNames=propertyName.split("\\.");
  if (propertyName.endsWith(".") || 0 == simplePropertyNames.length) {
    throw new IllegalArgumentException("Invalid property name '" + propertyName + "'");
  }
  for (int i=0; i < simplePropertyNames.length; i++) {
    String simplePropertyName=simplePropertyNames[i].trim();
    if (simplePropertyName.length() > 0) {
      lastSimplePropertyName=simplePropertyName;
      lastClass=propertyClass;
      try {
        Method getter=MethodProperty.initGetterMethod(simplePropertyName,propertyClass);
        propertyClass=getter.getReturnType();
        getMethods.add(getter);
      }
 catch (      final java.lang.NoSuchMethodException e) {
        throw new IllegalArgumentException("Bean property '" + simplePropertyName + "' not found",e);
      }
    }
 else {
      throw new IllegalArgumentException("Empty or invalid bean property identifier in '" + propertyName + "'");
    }
  }
  Method lastGetMethod=getMethods.get(getMethods.size() - 1);
  Class<?> type=lastGetMethod.getReturnType();
  Method setMethod=null;
  try {
    lastSimplePropertyName=SharedUtil.capitalize(lastSimplePropertyName);
    setMethod=lastClass.getMethod("set" + lastSimplePropertyName,new Class[]{type});
  }
 catch (  final NoSuchMethodException skipped) {
  }
  this.type=(Class<? extends T>)convertPrimitiveType(type);
  this.propertyName=propertyName;
  this.getMethods=getMethods;
  this.setMethod=setMethod;
}
