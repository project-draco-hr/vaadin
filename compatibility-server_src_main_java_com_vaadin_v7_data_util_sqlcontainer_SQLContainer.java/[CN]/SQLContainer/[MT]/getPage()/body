{
  updateCount();
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  cachedItems.clear();
  itemIndexes.clear();
  try {
    try {
      queryDelegate.setOrderBy(sorters);
    }
 catch (    UnsupportedOperationException e) {
      getLogger().log(Level.FINE,"The query delegate doesn't support sorting",e);
    }
    queryDelegate.beginTransaction();
    int fetchedRows=pageLength * CACHE_RATIO + cacheOverlap;
    rs=queryDelegate.getResults(currentOffset,fetchedRows);
    rsmd=rs.getMetaData();
    List<String> pKeys=queryDelegate.getPrimaryKeyColumns();
    ColumnProperty cp=null;
    int rowCount=currentOffset;
    if (!queryDelegate.implementationRespectsPagingLimits()) {
      rowCount=currentOffset=0;
      setPageLengthInternal(size);
    }
    while (rs.next()) {
      List<ColumnProperty> itemProperties=new ArrayList<>();
      Object[] itemId=new Object[pKeys.size()];
      for (int i=0; i < pKeys.size(); i++) {
        itemId[i]=rs.getObject(pKeys.get(i));
      }
      RowId id=null;
      if (pKeys.isEmpty()) {
        id=new ReadOnlyRowId(rs.getRow());
      }
 else {
        id=new RowId(itemId);
      }
      List<String> propertiesToAdd=new ArrayList<>(propertyIds);
      if (!removedItems.containsKey(id)) {
        for (int i=1; i <= rsmd.getColumnCount(); i++) {
          if (!isColumnIdentifierValid(rsmd.getColumnLabel(i))) {
            continue;
          }
          String colName=rsmd.getColumnLabel(i);
          Object value=rs.getObject(i);
          Class<?> type=value != null ? value.getClass() : Object.class;
          if (value == null) {
            for (            String propName : propertyTypes.keySet()) {
              if (propName.equals(rsmd.getColumnLabel(i))) {
                type=propertyTypes.get(propName);
                break;
              }
            }
          }
          if (propertiesToAdd.contains(colName)) {
            cp=new ColumnProperty(colName,propertyReadOnly.get(colName),propertyPersistable.get(colName),propertyNullable.get(colName),propertyPrimaryKey.get(colName),value,type);
            itemProperties.add(cp);
            propertiesToAdd.remove(colName);
          }
        }
        itemIndexes.put(rowCount,id);
        int modifiedIndex=indexInModifiedCache(id);
        if (modifiedIndex != -1) {
          cachedItems.put(id,modifiedItems.get(modifiedIndex));
        }
 else {
          cachedItems.put(id,new RowItem(this,id,itemProperties));
        }
        rowCount++;
      }
    }
    rs.getStatement().close();
    rs.close();
    queryDelegate.commit();
    getLogger().log(Level.FINER,"Fetched {0} rows starting from {1}",new Object[]{fetchedRows,currentOffset});
  }
 catch (  SQLException e) {
    getLogger().log(Level.WARNING,"Failed to fetch rows, rolling back",e);
    try {
      queryDelegate.rollback();
    }
 catch (    SQLException e1) {
      getLogger().log(Level.SEVERE,"Failed to roll back",e1);
    }
    try {
      if (rs != null) {
        if (rs.getStatement() != null) {
          rs.getStatement().close();
          rs.close();
        }
      }
    }
 catch (    SQLException e1) {
      getLogger().log(Level.WARNING,"Failed to close session",e1);
    }
    throw new RuntimeException("Failed to fetch page.",e);
  }
}
