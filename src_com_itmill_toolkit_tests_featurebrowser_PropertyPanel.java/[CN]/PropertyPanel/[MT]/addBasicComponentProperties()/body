{
  Form set=createBeanPropertySet(new String[]{"caption","icon","componentError","description","enabled","visible","style","readOnly","immediate"});
  set.replaceWithSelect("icon",new Object[]{null,new ThemeResource("icon/files/file.gif")},new Object[]{"No icon","Sample icon"});
  Throwable sampleException;
  try {
    throw new NullPointerException("sample exception");
  }
 catch (  NullPointerException e) {
    sampleException=e;
  }
  set.replaceWithSelect("componentError",new Object[]{null,new UserError("Sample text error message."),new UserError("<h3>Error message formatting</h3><p>Error messages can " + "contain any UIDL formatting, like: <ul><li><b>Bold" + "</b></li><li><i>Italic</i></li></ul></p>",UserError.CONTENT_UIDL,ErrorMessage.INFORMATION),new SystemError("This is an example of exception error reposting",sampleException)},new Object[]{"No error","Sample text error","Sample Formatted error","Sample System Error"});
  String currentStyle=((Component)objectToConfigure).getStyle();
  if (currentStyle == null)   set.replaceWithSelect("style",new Object[]{null},new Object[]{"Default"}).setNewItemsAllowed(true);
 else   set.replaceWithSelect("style",new Object[]{null,currentStyle},new Object[]{"Default",currentStyle}).setNewItemsAllowed(true);
  set.getField("caption").setDescription("Component caption is the title of the component. Usage of the caption is optional and the " + "exact behavior of the propery is defined by the component. Setting caption null " + "or empty disables the caption.");
  set.getField("enabled").setDescription("Enabled property controls the usage of the component. If the component is disabled (enabled=false)," + " it can not receive any events from the terminal. In most cases it makes the usage" + " of the component easier, if the component visually looks disbled (for example is grayed), "+ "when it can not be used.");
  set.getField("icon").setDescription("Icon of the component selects the main icon of the component. The usage of the icon is identical " + "to caption and in most components caption and icon are kept together. Icons can be " + "loaded from any resources (see Terminal/Resources for more information). Some components "+ "contain more than just the captions icon. Those icons are controlled through their "+ "own properties.");
  set.getField("visible").setDescription("Visibility property says if the component is renreded or not. Invisible components are implicitly " + "disabled, as there is no visible user interface to send event.");
  set.getField("description").setDescription("Description is designed to allow easy addition of short tooltips, like this. Like the caption," + " setting description null or empty disables the description.");
  set.getField("readOnly").setDescription("Those components that have internal state that can be written are settable to readOnly-mode," + " where the object can only be read, not written.");
  set.getField("componentError").setDescription("IT Mill Toolkit supports extensive error reporting. One part of the error reporting are component" + " errors that can be controlled by the programmer. This example only contains couple of " + "sample errors; to get the full picture, read browse ErrorMessage-interface implementors "+ "API documentation.");
  set.getField("immediate").setDescription("Not all terminals can send the events immediately to server from all action. Web is the most " + "typical environment where many events (like textfield changed) are not sent to server, " + "before they are explicitly submitted. Setting immediate property true (by default this "+ "is false for most components), the programmer can assure that the application is"+ " notified as soon as possible about the value change in this component.");
  set.getField("style").setDescription("Themes specify the overall looks of the user interface. In addition component can have a set of " + "styles, that can be visually very different (like datefield calendar- and text-styles), " + "but contain the same logical functionality. As a rule of thumb, theme specifies if a "+ "component is blue or yellow and style determines how the component is used.");
  addProperties("Component Basics",set);
  if (objectToConfigure instanceof Window) {
    disableField(set.getField("enabled"),new Boolean(true));
    disableField(set.getField("visible"),new Boolean(true));
    disableField(set.getField("componentError"));
    disableField(set.getField("icon"));
  }
}
