{
  requestThemeName=request.getParameter("theme");
  maxInactiveInterval=request.getSessionMaxInactiveInterval();
  boolean repaintAll;
  final OutputStream out;
  repaintAll=(request.getParameter(GET_PARAM_REPAINT_ALL) != null);
  out=response.getOutputStream();
  boolean analyzeLayouts=false;
  if (repaintAll) {
    analyzeLayouts=(request.getParameter(GET_PARAM_ANALYZE_LAYOUTS) != null);
    if (request.getParameter(GET_PARAM_HIGHLIGHT_COMPONENT) != null) {
      String pid=request.getParameter(GET_PARAM_HIGHLIGHT_COMPONENT);
      highLightedPaintable=idPaintableMap.get(pid);
      highlightPaintable(highLightedPaintable);
    }
  }
  final PrintWriter outWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out,"UTF-8")));
synchronized (application) {
    if (application.isRunning()) {
      if (root == null) {
        logger.warning("Could not get window for application with request ID " + request.getRequestID());
        return;
      }
    }
 else {
      endApplication(request,response,application);
      return;
    }
    if (!handleVariables(request,response,callback,application,root)) {
      SystemMessages ci=null;
      try {
        Method m=application.getClass().getMethod("getSystemMessages",(Class[])null);
        ci=(Application.SystemMessages)m.invoke(null,(Object[])null);
      }
 catch (      Exception e2) {
        logger.log(Level.WARNING,"getSystemMessages() failed - continuing",e2);
      }
      if (ci != null) {
        String msg=ci.getOutOfSyncMessage();
        String cap=ci.getOutOfSyncCaption();
        if (msg != null || cap != null) {
          callback.criticalNotification(request,response,cap,msg,null,ci.getOutOfSyncURL());
          return;
        }
      }
      repaintAll=true;
    }
    paintAfterVariableChanges(request,response,callback,repaintAll,outWriter,root,analyzeLayouts);
    if (closingWindowName != null) {
      currentlyOpenWindowsInClient.remove(closingWindowName);
      closingWindowName=null;
    }
  }
  outWriter.close();
  requestThemeName=null;
}
