{
  if (repaintAll) {
    for (final Iterator<String> it=idPaintableMap.keySet().iterator(); it.hasNext(); ) {
      final Component c=(Component)idPaintableMap.get(it.next());
      if (isChildOf(window,c)) {
        it.remove();
        paintableIdMap.remove(c);
      }
    }
    OpenWindowCache openWindowCache=currentlyOpenWindowsInClient.get(window.getName());
    if (openWindowCache != null) {
      openWindowCache.clear();
    }
  }
  if (!application.isRunning()) {
    endApplication(request,response,application);
    return;
  }
  response.setContentType("application/json; charset=UTF-8");
  outWriter.print("for(;;);[{");
  Object writeSecurityTokenFlag=request.getAttribute(WRITE_SECURITY_TOKEN_FLAG);
  if (writeSecurityTokenFlag != null) {
    String seckey=(String)request.getSession().getAttribute(ApplicationConnection.UIDL_SECURITY_TOKEN_ID);
    if (seckey == null) {
      seckey="" + (int)(Math.random() * 1000000);
      request.getSession().setAttribute(ApplicationConnection.UIDL_SECURITY_TOKEN_ID,seckey);
    }
    outWriter.print("\"" + ApplicationConnection.UIDL_SECURITY_TOKEN_ID + "\":\"");
    outWriter.print(seckey);
    outWriter.print("\",");
  }
  outWriter.print("\"changes\":[");
  ArrayList<Paintable> paintables=null;
  if (!window.getName().equals(closingWindowName)) {
    List<InvalidLayout> invalidComponentRelativeSizes=null;
    Window newWindow=doGetApplicationWindow(request,callback,application,window);
    if (newWindow != window) {
      window=newWindow;
      repaintAll=true;
    }
    JsonPaintTarget paintTarget=new JsonPaintTarget(this,outWriter,!repaintAll);
    OpenWindowCache windowCache=currentlyOpenWindowsInClient.get(window.getName());
    if (windowCache == null) {
      windowCache=new OpenWindowCache();
      currentlyOpenWindowsInClient.put(window.getName(),windowCache);
    }
    if (repaintAll) {
      paintables=new ArrayList<Paintable>();
      paintables.add(window);
      locales=null;
      requireLocale(application.getLocale().toString());
    }
 else {
      for (Iterator<Paintable> it=paintableIdMap.keySet().iterator(); it.hasNext(); ) {
        Component p=(Component)it.next();
        if (p.getApplication() == null) {
          idPaintableMap.remove(paintableIdMap.get(p));
          it.remove();
          dirtyPaintabletSet.remove(p);
          p.removeListener(this);
        }
      }
      paintables=getDirtyVisibleComponents(window);
    }
    if (paintables != null) {
      Collections.sort(paintables,new Comparator<Paintable>(){
        public int compare(        Paintable o1,        Paintable o2){
          Component c1=(Component)o1;
          Component c2=(Component)o2;
          int d1=0;
          while (c1.getParent() != null) {
            d1++;
            c1=c1.getParent();
          }
          int d2=0;
          while (c2.getParent() != null) {
            d2++;
            c2=c2.getParent();
          }
          if (d1 < d2) {
            return -1;
          }
          if (d1 > d2) {
            return 1;
          }
          return 0;
        }
      }
);
      for (final Iterator i=paintables.iterator(); i.hasNext(); ) {
        final Paintable p=(Paintable)i.next();
        if (p instanceof Window) {
          final Window w=(Window)p;
          if (w.getTerminal() == null) {
            w.setTerminal(application.getMainWindow().getTerminal());
          }
        }
        if (paintTarget.needsToBePainted(p)) {
          paintTarget.startTag("change");
          paintTarget.addAttribute("format","uidl");
          final String pid=getPaintableId(p);
          paintTarget.addAttribute("pid",pid);
          p.paint(paintTarget);
          paintTarget.endTag("change");
        }
        paintablePainted(p);
        if (analyzeLayouts) {
          Window w=(Window)p;
          invalidComponentRelativeSizes=ComponentSizeValidator.validateComponentRelativeSizes(w.getContent(),null,null);
          if (w.getChildWindows() != null) {
            for (            Window subWindow : w.getChildWindows()) {
              invalidComponentRelativeSizes=ComponentSizeValidator.validateComponentRelativeSizes(subWindow.getContent(),invalidComponentRelativeSizes,null);
            }
          }
        }
      }
    }
    paintTarget.close();
    outWriter.print("]");
    outWriter.print(", \"meta\" : {");
    boolean metaOpen=false;
    if (repaintAll) {
      metaOpen=true;
      outWriter.write("\"repaintAll\":true");
      if (analyzeLayouts) {
        outWriter.write(", \"invalidLayouts\":");
        outWriter.write("[");
        if (invalidComponentRelativeSizes != null) {
          boolean first=true;
          for (          InvalidLayout invalidLayout : invalidComponentRelativeSizes) {
            if (!first) {
              outWriter.write(",");
            }
 else {
              first=false;
            }
            invalidLayout.reportErrors(outWriter,this,System.err);
          }
        }
        outWriter.write("]");
      }
    }
    SystemMessages ci=null;
    try {
      Method m=application.getClass().getMethod("getSystemMessages",(Class[])null);
      ci=(Application.SystemMessages)m.invoke(null,(Object[])null);
    }
 catch (    NoSuchMethodException e1) {
      e1.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
    if (ci != null && ci.getSessionExpiredMessage() == null && ci.getSessionExpiredCaption() == null && ci.isSessionExpiredNotificationEnabled()) {
      int newTimeoutInterval=request.getSession().getMaxInactiveInterval();
      if (repaintAll || (timeoutInterval != newTimeoutInterval)) {
        String escapedURL=ci.getSessionExpiredURL() == null ? "" : ci.getSessionExpiredURL().replace("/","\\/");
        if (metaOpen) {
          outWriter.write(",");
        }
        outWriter.write("\"timedRedirect\":{\"interval\":" + (newTimeoutInterval + 15) + ",\"url\":\""+ escapedURL+ "\"}");
        metaOpen=true;
      }
      timeoutInterval=newTimeoutInterval;
    }
    outWriter.print("}, \"resources\" : {");
    String themeName=window.getTheme();
    String requestThemeName=request.getParameter("theme");
    if (requestThemeName != null) {
      themeName=requestThemeName;
    }
    if (themeName == null) {
      themeName=AbstractApplicationServlet.getDefaultTheme();
    }
    int resourceIndex=0;
    for (final Iterator i=paintTarget.getUsedResources().iterator(); i.hasNext(); ) {
      final String resource=(String)i.next();
      InputStream is=null;
      try {
        is=callback.getThemeResourceAsStream(themeName,resource);
      }
 catch (      final Exception e) {
        e.printStackTrace();
      }
      if (is != null) {
        outWriter.print((resourceIndex++ > 0 ? ", " : "") + "\"" + resource+ "\" : ");
        final StringBuffer layout=new StringBuffer();
        try {
          final InputStreamReader r=new InputStreamReader(is,"UTF-8");
          final char[] buffer=new char[20000];
          int charsRead=0;
          while ((charsRead=r.read(buffer)) > 0) {
            layout.append(buffer,0,charsRead);
          }
          r.close();
        }
 catch (        final java.io.IOException e) {
          System.err.println("Resource transfer failed:  " + request.getRequestID() + ". ("+ e.getMessage()+ ")");
        }
        outWriter.print("\"" + JsonPaintTarget.escapeJSON(layout.toString()) + "\"");
      }
 else {
        System.err.println("CustomLayout not found");
      }
    }
    outWriter.print("}");
    Collection<Class<? extends Paintable>> usedPaintableTypes=paintTarget.getUsedPaintableTypes();
    boolean typeMappingsOpen=false;
    for (    Class<? extends Paintable> class1 : usedPaintableTypes) {
      if (windowCache.cache(class1)) {
        if (!typeMappingsOpen) {
          typeMappingsOpen=true;
          outWriter.print(", \"typeMappings\" : { ");
        }
 else {
          outWriter.print(" , ");
        }
        String canonicalName=class1.getCanonicalName();
        outWriter.print("\"");
        outWriter.print(canonicalName);
        outWriter.print("\" : ");
        outWriter.print(getTagForType(class1));
      }
    }
    if (typeMappingsOpen) {
      outWriter.print(" }");
    }
    printLocaleDeclarations(outWriter);
    outWriter.print("}]");
  }
  outWriter.flush();
  outWriter.close();
}
