{
  final FileUpload upload=createFileUpload();
  final UploadProgressListener pl=new UploadProgressListener();
  upload.setProgressListener(pl);
  FileItemIterator iter;
  try {
    iter=getUploadItemIterator(upload,request);
    while (iter.hasNext()) {
      final FileItemStream item=iter.next();
      final String name=item.getFieldName();
      final String filename=removePath(item.getName());
      final String mimeType=item.getContentType();
      final InputStream stream=item.openStream();
      if (item.isFormField()) {
      }
 else {
        final UploadStream upstream=new UploadStream(){
          public String getContentName(){
            return filename;
          }
          public String getContentType(){
            return mimeType;
          }
          public InputStream getStream(){
            return stream;
          }
          public String getStreamName(){
            return "stream";
          }
        }
;
        if (name.startsWith("XHRFILE")) {
          String[] split=item.getFieldName().substring(7).split("\\.");
          DragAndDropWrapper ddw=(DragAndDropWrapper)idPaintableMap.get(split[0]);
          ddw.receiveFile(upstream,split[1]);
          String debugId=ddw.getDebugId();
        }
 else {
          int separatorPos=name.lastIndexOf("_");
          final String pid=name.substring(0,separatorPos);
          final Upload uploadComponent=(Upload)idPaintableMap.get(pid);
          if (uploadComponent == null) {
            throw new FileUploadException("Upload component not found");
          }
          if (uploadComponent.isReadOnly()) {
            throw new FileUploadException("Warning: ignored file upload because upload component is set as read-only");
          }
synchronized (application) {
            uploadComponent.startUpload();
          }
          pl.setUpload(uploadComponent);
          try {
            uploadComponent.receiveUpload(upstream);
          }
 catch (          UploadException e) {
synchronized (application) {
              handleChangeVariablesError(application,uploadComponent,e,new HashMap<String,Object>());
            }
          }
        }
      }
    }
  }
 catch (  final FileUploadException e) {
    throw e;
  }
  sendUploadResponse(request,response);
}
