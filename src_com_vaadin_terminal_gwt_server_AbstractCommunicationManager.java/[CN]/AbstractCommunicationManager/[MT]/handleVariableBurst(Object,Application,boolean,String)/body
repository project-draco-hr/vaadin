{
  final String[] tmp=burst.split(String.valueOf(VAR_RECORD_SEPARATOR));
  final String[][] variableRecords=new String[tmp.length][4];
  for (int i=0; i < tmp.length; i++) {
    variableRecords[i]=tmp[i].split(String.valueOf(VAR_FIELD_SEPARATOR));
  }
  for (int i=0; i < variableRecords.length; i++) {
    String[] variable=variableRecords[i];
    String[] nextVariable=null;
    if (i + 1 < variableRecords.length) {
      nextVariable=variableRecords[i + 1];
    }
    final VariableOwner owner=getVariableOwner(variable[VAR_PID]);
    if (owner != null && owner.isEnabled()) {
      Map<String,Object> m;
      if (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
        m=new HashMap<String,Object>();
        m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
      }
 else {
        m=Collections.singletonMap(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
      }
      while (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
        i++;
        variable=nextVariable;
        if (i + 1 < variableRecords.length) {
          nextVariable=variableRecords[i + 1];
        }
 else {
          nextVariable=null;
        }
        m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
      }
      try {
        changeVariables(source,owner,m);
        if (owner instanceof Root) {
          final Boolean close=(Boolean)m.get("close");
          if (close != null && close.booleanValue()) {
            throw new RuntimeException("Ensure currentlyOpenWindowsInClient is cleaned up here!");
          }
        }
      }
 catch (      Exception e) {
        if (owner instanceof Component) {
          handleChangeVariablesError(app,(Component)owner,e,m);
        }
 else {
          throw new RuntimeException(e);
        }
      }
    }
 else {
      if ("close".equals(variable[VAR_NAME]) && "true".equals(variable[VAR_VALUE])) {
        continue;
      }
      String msg="Warning: Ignoring variable change for ";
      if (owner != null) {
        msg+="disabled component " + owner.getClass();
        String caption=((Component)owner).getCaption();
        if (caption != null) {
          msg+=", caption=" + caption;
        }
      }
 else {
        msg+="non-existent component, VAR_PID=" + variable[VAR_PID];
        success=false;
      }
      logger.warning(msg);
      continue;
    }
  }
  return success;
}
