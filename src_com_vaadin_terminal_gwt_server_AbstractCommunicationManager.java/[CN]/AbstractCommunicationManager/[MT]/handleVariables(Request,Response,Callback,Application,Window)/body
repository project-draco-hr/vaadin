{
  boolean success=true;
  int contentLength=request.getContentLength();
  if (contentLength > 0) {
    String changes=readRequest(request);
    final String[] bursts=changes.split(VAR_BURST_SEPARATOR);
    if (!"true".equals(application2.getProperty(AbstractApplicationServlet.SERVLET_PARAMETER_DISABLE_XSRF_PROTECTION))) {
      if (bursts.length == 1 && "init".equals(bursts[0])) {
        request.setAttribute(WRITE_SECURITY_TOKEN_FLAG,true);
        return true;
      }
 else {
        String sessId=(String)request.getSession().getAttribute(ApplicationConnection.UIDL_SECURITY_TOKEN_ID);
        if (sessId == null || !sessId.equals(bursts[0])) {
          throw new InvalidUIDLSecurityKeyException("Security key mismatch");
        }
      }
    }
    for (int bi=1; bi < bursts.length; bi++) {
      final String[] tmp=bursts[bi].split(VAR_RECORD_SEPARATOR);
      final String[][] variableRecords=new String[tmp.length][4];
      for (int i=0; i < tmp.length; i++) {
        variableRecords[i]=tmp[i].split(VAR_FIELD_SEPARATOR);
      }
      for (int i=0; i < variableRecords.length; i++) {
        String[] variable=variableRecords[i];
        String[] nextVariable=null;
        if (i + 1 < variableRecords.length) {
          nextVariable=variableRecords[i + 1];
        }
        final VariableOwner owner=(VariableOwner)idPaintableMap.get(variable[VAR_PID]);
        if (owner != null && owner.isEnabled()) {
          Map<Object,Object> m;
          if (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
            m=new HashMap<Object,Object>();
            m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
 else {
            m=Collections.singletonMap((Object)variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
          while (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
            i++;
            variable=nextVariable;
            if (i + 1 < variableRecords.length) {
              nextVariable=variableRecords[i + 1];
            }
 else {
              nextVariable=null;
            }
            m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
          try {
            owner.changeVariables(request,m);
            if (owner instanceof Window && ((Window)owner).getParent() == null) {
              final Boolean close=(Boolean)m.get("close");
              if (close != null && close.booleanValue()) {
                closingWindowName=((Window)owner).getName();
              }
            }
          }
 catch (          Exception e) {
            handleChangeVariablesError(application2,(Component)owner,e,m);
          }
        }
 else {
          if ("close".equals(variable[VAR_NAME]) && "true".equals(variable[VAR_VALUE])) {
            continue;
          }
          String msg="Warning: Ignoring variable change for ";
          if (owner != null) {
            msg+="disabled component " + owner.getClass();
            String caption=((Component)owner).getCaption();
            if (caption != null) {
              msg+=", caption=" + caption;
            }
          }
 else {
            msg+="non-existent component, VAR_PID=" + variable[VAR_PID];
            success=false;
          }
          System.err.println(msg);
          continue;
        }
      }
      if (bi < bursts.length - 1) {
        final PrintWriter outWriter=new PrintWriter(new CharArrayWriter());
        paintAfterVariableChanges(request,response,callback,true,outWriter,window,false);
      }
    }
  }
  return success;
}
