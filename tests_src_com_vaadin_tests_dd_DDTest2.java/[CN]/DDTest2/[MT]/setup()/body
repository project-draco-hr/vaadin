{
  Window w=getLayout().getWindow();
  w.setTheme("runo");
  hl.addComponent(tree1);
  hl.addComponent(table);
  hl.addComponent(tree2);
  hl.setWidth("100%");
  hl.setSpacing(true);
  hl.setExpandRatio(table,1);
  popuplateTrees();
  table.setWidth("100%");
  table.setPageLength(10);
  populateTable();
  addComponent(hl);
  table.setDragMode(Table.DragModes.ROWS);
  AbstractDropHandler dropHandler=new AbstractDropHandler(){
    @Override public void receive(    Transferable transferable){
      DataBindedTransferrable tr=(DataBindedTransferrable)transferable;
      Object itemId=tr.getItemId();
      Table fromTable=(Table)tr.getSourceComponent();
      String name=fromTable.getItem(itemId).getItemProperty("Name").toString();
      tree1.addItem(name);
      tree1.setChildrenAllowed(name,false);
      Object idOver=tr.getData("itemIdOver");
      tree1.setParent(name,idOver);
      table.removeItem(itemId);
    }
  }
;
  AcceptCriterion onNode=new AbstractDropHandler.OverTreeNode();
  AcceptCriterion fromTree=new AbstractDropHandler.ComponentFilter(table);
  And and=new AbstractDropHandler.And(fromTree,onNode);
  dropHandler.setAcceptCriterion(and);
  tree1.setDropHandler(dropHandler);
  dropHandler=new AbstractDropHandler(){
    @Override public void receive(    Transferable transferable){
      if (transferable instanceof DataBindedTransferrable) {
        DataBindedTransferrable tr=(DataBindedTransferrable)transferable;
        Object itemId=tree2.addItem();
        tree2.setParent(itemId,tr.getData("itemIdOver"));
        if (tr.getSourceComponent() == tree1) {
          tree2.setItemCaption(itemId,(String)tr.getItemId());
          copySubTree(tr.getItemId(),itemId);
        }
 else         if (tr.getSourceComponent() == table) {
          String name=(String)table.getItem(tr.getItemId()).getItemProperty("Name").getValue();
          tree2.setItemCaption(itemId,name);
        }
 else         if (tr.getSourceComponent() == tree2) {
          tree2.setItemCaption(itemId,tree2.getItemCaption(tr.getItemId()));
        }
      }
    }
    private void copySubTree(    Object itemId,    Object itemIdTo){
      Collection children=tree1.getChildren(itemId);
      if (children != null) {
        for (        Object childId : children) {
          Object newItemId=tree2.addItem();
          tree2.setItemCaption(newItemId,(String)childId);
          tree2.setParent(newItemId,itemIdTo);
          copySubTree(childId,newItemId);
        }
      }
    }
  }
;
  dropHandler.setAcceptCriterion(AbstractDropHandler.CRITERION_HAS_ITEM_ID);
  tree2.setDropHandler(dropHandler);
  Window acceptAnyThing=new AcceptAnythingWindow();
  Window acceptFromTree1viaServerCheck=new AcceptFromComponent(tree1);
  w.addWindow(acceptAnyThing);
  acceptAnyThing.setPositionY(450);
  acceptAnyThing.setPositionX(0);
  w.addWindow(acceptFromTree1viaServerCheck);
  acceptFromTree1viaServerCheck.setPositionY(450);
  acceptFromTree1viaServerCheck.setPositionX(300);
}
