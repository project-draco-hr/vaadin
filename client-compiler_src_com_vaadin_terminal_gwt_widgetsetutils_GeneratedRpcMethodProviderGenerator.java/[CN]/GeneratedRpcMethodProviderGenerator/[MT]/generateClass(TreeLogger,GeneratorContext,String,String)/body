{
  PrintWriter printWriter=null;
  printWriter=context.tryCreate(logger,packageName,className);
  if (printWriter == null) {
    return;
  }
  logger.log(Type.INFO,"Detecting server to client RPC interface types...");
  Date date=new Date();
  TypeOracle typeOracle=context.getTypeOracle();
  JClassType serverToClientRpcType=typeOracle.findType(ClientRpc.class.getName());
  JClassType[] rpcInterfaceSubtypes=serverToClientRpcType.getSubtypes();
  ClassSourceFileComposerFactory composer=null;
  composer=new ClassSourceFileComposerFactory(packageName,className);
  composer.addImport("com.google.gwt.core.client.GWT");
  composer.addImport(RpcMethod.class.getName());
  composer.addImport(ClientRpc.class.getName());
  composer.addImport(com.vaadin.terminal.gwt.client.metadata.Type.class.getName());
  composer.addImplementedInterface(GeneratedRpcMethodProvider.class.getName());
  SourceWriter sourceWriter=composer.createSourceWriter(context,printWriter);
  sourceWriter.indent();
  List<JMethod> rpcMethods=new ArrayList<JMethod>();
  sourceWriter.println("public java.util.Collection<RpcMethod> getGeneratedRpcMethods() {");
  sourceWriter.indent();
  sourceWriter.println("java.util.ArrayList<RpcMethod> list = new java.util.ArrayList<RpcMethod>();");
  for (  JClassType type : rpcInterfaceSubtypes) {
    if (null == type.isInterface()) {
      continue;
    }
    for (    JClassType currentType : type.getFlattenedSupertypeHierarchy()) {
      for (      JMethod method : currentType.getMethods()) {
        sourceWriter.print("list.add(new RpcMethod(\"" + type.getQualifiedSourceName() + "\", \""+ method.getName()+ "\"");
        JType[] parameterTypes=method.getParameterTypes();
        for (        JType parameter : parameterTypes) {
          sourceWriter.print(", ");
          writeTypeCreator(sourceWriter,parameter);
        }
        sourceWriter.println(") {");
        sourceWriter.indent();
        sourceWriter.println("public void applyInvocation(ClientRpc target, Object... parameters) {");
        sourceWriter.indent();
        sourceWriter.print("((" + type.getQualifiedSourceName() + ")target)."+ method.getName()+ "(");
        for (int i=0; i < parameterTypes.length; i++) {
          JType parameterType=parameterTypes[i];
          if (i != 0) {
            sourceWriter.print(", ");
          }
          String parameterTypeName=getBoxedTypeName(parameterType);
          sourceWriter.print("(" + parameterTypeName + ") parameters["+ i+ "]");
        }
        sourceWriter.println(");");
        sourceWriter.outdent();
        sourceWriter.println("}");
        sourceWriter.outdent();
        sourceWriter.println("});");
      }
    }
  }
  sourceWriter.println("return list;");
  sourceWriter.outdent();
  sourceWriter.println("}");
  sourceWriter.println();
  sourceWriter.outdent();
  sourceWriter.println("}");
  context.commit(logger,printWriter);
  logger.log(Type.INFO,"Done. (" + (new Date().getTime() - date.getTime()) / 1000 + "seconds)");
}
