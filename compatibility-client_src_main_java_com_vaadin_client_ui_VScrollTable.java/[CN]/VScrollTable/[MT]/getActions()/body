{
  Object[] cols;
  if (columnReordering && columnOrder != null) {
    cols=columnOrder;
  }
 else {
    cols=visibleColOrder;
    cols=new Object[visibleColOrder.length + collapsedColumns.size()];
    int i;
    for (i=0; i < visibleColOrder.length; i++) {
      cols[i]=visibleColOrder[i];
    }
    for (final Iterator<String> it=collapsedColumns.iterator(); it.hasNext(); ) {
      cols[i++]=it.next();
    }
  }
  List<Action> actions=new ArrayList<Action>(cols.length);
  for (int i=0; i < cols.length; i++) {
    final String cid=(String)cols[i];
    boolean noncollapsible=noncollapsibleColumns.contains(cid);
    if (noncollapsible && collapsibleMenuContent == CollapseMenuContent.COLLAPSIBLE_COLUMNS) {
      continue;
    }
    final HeaderCell c=getHeaderCell(cid);
    final VisibleColumnAction a=new VisibleColumnAction(c.getColKey());
    a.setCaption(c.getCaption());
    if (!c.isEnabled()) {
      a.setCollapsed(true);
    }
    if (noncollapsible) {
      a.setNoncollapsible(true);
    }
    actions.add(a);
  }
  return actions.toArray(new Action[actions.size()]);
}
