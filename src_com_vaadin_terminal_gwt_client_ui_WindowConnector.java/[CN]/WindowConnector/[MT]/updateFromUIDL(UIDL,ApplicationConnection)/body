{
  getWidget().id=getConnectorId();
  getWidget().client=client;
  DOM.setElementProperty(getWidget().closeBox,"id",getConnectorId() + "_window_close");
  if (isRealUpdate(uidl)) {
    if (getState().isModal() != getWidget().vaadinModality) {
      getWidget().setVaadinModality(!getWidget().vaadinModality);
    }
    if (!getWidget().isAttached()) {
      getWidget().setVisible(false);
      getWidget().show();
    }
    if (getState().isResizable() != getWidget().resizable) {
      getWidget().setResizable(getState().isResizable());
    }
    getWidget().resizeLazy=getState().isResizeLazy();
    getWidget().setDraggable(getState().isDraggable());
    String iconURL=null;
    if (getState().getIcon() != null) {
      iconURL=getState().getIcon().getURL();
    }
    getWidget().setCaption(getState().getCaption(),iconURL);
  }
  getWidget().visibilityChangesDisabled=true;
  if (!isRealUpdate(uidl)) {
    return;
  }
  getWidget().visibilityChangesDisabled=false;
  clickEventHandler.handleEventHandlerRegistration();
  getWidget().immediate=getState().isImmediate();
  getWidget().setClosable(!isReadOnly());
  int positionx=getState().getPositionX();
  int positiony=getState().getPositionY();
  if (positionx >= 0 || positiony >= 0) {
    if (positionx < 0) {
      positionx=0;
    }
    if (positiony < 0) {
      positiony=0;
    }
    getWidget().setPopupPosition(positionx,positiony);
  }
  boolean showingUrl=false;
  int childIndex=0;
  UIDL childUidl=uidl.getChildUIDL(childIndex++);
  final ComponentConnector lo=client.getPaintable(childUidl);
  if (getWidget().layout != null) {
    if (getWidget().layout != lo) {
      getWidget().contentPanel.remove(getWidget().layout.getWidget());
      if (!showingUrl) {
        getWidget().contentPanel.setWidget(lo.getWidget());
      }
      getWidget().layout=lo;
    }
  }
 else   if (!showingUrl) {
    getWidget().contentPanel.setWidget(lo.getWidget());
    getWidget().layout=lo;
  }
  if (uidl.getChildCount() > 1) {
    final int cnt=uidl.getChildCount();
    for (int i=1; i < cnt; i++) {
      childUidl=uidl.getChildUIDL(i);
      if (childUidl.getTag().equals("actions")) {
        if (getWidget().shortcutHandler == null) {
          getWidget().shortcutHandler=new ShortcutActionHandler(getConnectorId(),client);
        }
        getWidget().shortcutHandler.updateActionMap(childUidl);
      }
    }
  }
  getWidget().contentPanel.setScrollPosition(getState().getScrollTop());
  getWidget().contentPanel.setHorizontalScrollPosition(getState().getScrollLeft());
  getWidget().centered=getState().isCentered();
  getWidget().setVisible(true);
  if (getWidget().getOffsetWidth() > Window.getClientWidth()) {
    getWidget().setWidth(Window.getClientWidth() + "px");
  }
  if (getWidget().getOffsetHeight() > Window.getClientHeight()) {
    getWidget().setHeight(Window.getClientHeight() + "px");
  }
  client.getView().getWidget().scrollIntoView(uidl);
  if (uidl.hasAttribute("bringToFront")) {
    getWidget().contentPanel.focus();
    getWidget().bringToFrontSequence=uidl.getIntAttribute("bringToFront");
    VWindow.deferOrdering();
  }
}
