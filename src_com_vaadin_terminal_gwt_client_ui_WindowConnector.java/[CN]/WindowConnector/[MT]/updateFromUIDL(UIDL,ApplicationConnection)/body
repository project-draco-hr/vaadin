{
  getWidget().id=uidl.getId();
  getWidget().client=client;
  DOM.setElementProperty(getWidget().closeBox,"id",getWidget().id + "_window_close");
  if (uidl.hasAttribute("invisible")) {
    getWidget().hide();
    return;
  }
  if (isRealUpdate(uidl)) {
    if (uidl.getBooleanAttribute("modal") != getWidget().vaadinModality) {
      getWidget().setVaadinModality(!getWidget().vaadinModality);
    }
    if (!getWidget().isAttached()) {
      getWidget().setVisible(false);
      getWidget().show();
    }
    if (uidl.getBooleanAttribute("resizable") != getWidget().resizable) {
      getWidget().setResizable(!getWidget().resizable);
    }
    getWidget().resizeLazy=uidl.hasAttribute(VView.RESIZE_LAZY);
    getWidget().setDraggable(!uidl.hasAttribute("fixedposition"));
    getWidget().setCaption(getState().getCaption(),uidl.getStringAttribute(AbstractComponentConnector.ATTRIBUTE_ICON));
  }
  getWidget().visibilityChangesDisabled=true;
  super.updateFromUIDL(uidl,client);
  if (!isRealUpdate(uidl)) {
    return;
  }
  getWidget().visibilityChangesDisabled=false;
  clickEventHandler.handleEventHandlerRegistration(client);
  getWidget().immediate=getState().isImmediate();
  getWidget().setClosable(!getState().isReadOnly());
  int positionx=uidl.getIntVariable("positionx");
  int positiony=uidl.getIntVariable("positiony");
  if (positionx >= 0 || positiony >= 0) {
    if (positionx < 0) {
      positionx=0;
    }
    if (positiony < 0) {
      positiony=0;
    }
    getWidget().setPopupPosition(positionx,positiony);
  }
  boolean showingUrl=false;
  int childIndex=0;
  UIDL childUidl=uidl.getChildUIDL(childIndex++);
  while ("open".equals(childUidl.getTag())) {
    final String parsedUri=client.translateVaadinUri(childUidl.getStringAttribute("src"));
    if (!childUidl.hasAttribute("name")) {
      final Frame frame=new Frame();
      DOM.setStyleAttribute(frame.getElement(),"width","100%");
      DOM.setStyleAttribute(frame.getElement(),"height","100%");
      DOM.setStyleAttribute(frame.getElement(),"border","0px");
      frame.setUrl(parsedUri);
      getWidget().contentPanel.setWidget(frame);
      showingUrl=true;
    }
 else {
      final String target=childUidl.getStringAttribute("name");
      Window.open(parsedUri,target,"");
    }
    childUidl=uidl.getChildUIDL(childIndex++);
  }
  final ComponentConnector lo=client.getPaintable(childUidl);
  if (getWidget().layout != null) {
    if (getWidget().layout != lo) {
      client.unregisterPaintable(getWidget().layout);
      getWidget().contentPanel.remove(getWidget().layout.getWidget());
      if (!showingUrl) {
        getWidget().contentPanel.setWidget(lo.getWidget());
      }
      getWidget().layout=lo;
    }
  }
 else   if (!showingUrl) {
    getWidget().contentPanel.setWidget(lo.getWidget());
    getWidget().layout=lo;
  }
  getWidget().dynamicWidth=getState().isUndefinedWidth();
  getWidget().dynamicHeight=getState().isUndefinedHeight();
  getWidget().layoutRelativeWidth=uidl.hasAttribute("layoutRelativeWidth");
  getWidget().layoutRelativeHeight=uidl.hasAttribute("layoutRelativeHeight");
  if (getWidget().dynamicWidth && getWidget().layoutRelativeWidth) {
    getWidget().setNaturalWidth();
  }
  getWidget().layout.updateFromUIDL(childUidl,client);
  if (!getWidget().dynamicHeight && getWidget().layoutRelativeWidth) {
    client.runDescendentsLayout(getWidget());
  }
  if (getWidget().dynamicWidth && !getWidget().layoutRelativeWidth) {
    getWidget().setNaturalWidth();
  }
  if (getWidget().dynamicHeight && getWidget().layoutRelativeHeight) {
    getWidget().resizable=false;
  }
  if (uidl.getChildCount() > 1) {
    final int cnt=uidl.getChildCount();
    for (int i=1; i < cnt; i++) {
      childUidl=uidl.getChildUIDL(i);
      if (childUidl.getTag().equals("actions")) {
        if (getWidget().shortcutHandler == null) {
          getWidget().shortcutHandler=new ShortcutActionHandler(getId(),client);
        }
        getWidget().shortcutHandler.updateActionMap(childUidl);
      }
    }
  }
  getWidget().contentPanel.setScrollPosition(uidl.getIntVariable("scrollTop"));
  getWidget().contentPanel.setHorizontalScrollPosition(uidl.getIntVariable("scrollLeft"));
  if (uidl.getBooleanAttribute("center")) {
    getWidget().centered=true;
    getWidget().center();
  }
 else {
    getWidget().centered=false;
  }
  getWidget().updateShadowSizeAndPosition();
  getWidget().setVisible(true);
  boolean sizeReduced=false;
  if (getWidget().getOffsetWidth() > Window.getClientWidth()) {
    getWidget().setWidth(Window.getClientWidth() + "px");
    sizeReduced=true;
  }
  if (getWidget().getOffsetHeight() > Window.getClientHeight()) {
    getWidget().setHeight(Window.getClientHeight() + "px");
    sizeReduced=true;
  }
  if (getWidget().dynamicHeight && getWidget().layoutRelativeHeight) {
    int h=getWidget().contents.getOffsetHeight() + getWidget().getExtraHeight();
    int w=getWidget().getElement().getOffsetWidth();
    client.updateVariable(getId(),"height",h,false);
    client.updateVariable(getId(),"width",w,true);
  }
  if (sizeReduced) {
    client.runDescendentsLayout(getWidget());
  }
  Util.runWebkitOverflowAutoFix(getWidget().contentPanel.getElement());
  client.getView().getWidget().scrollIntoView(uidl);
  if (uidl.hasAttribute("bringToFront")) {
    getWidget().contentPanel.focus();
    getWidget().bringToFrontSequence=uidl.getIntAttribute("bringToFront");
    VWindow.deferOrdering();
  }
}
