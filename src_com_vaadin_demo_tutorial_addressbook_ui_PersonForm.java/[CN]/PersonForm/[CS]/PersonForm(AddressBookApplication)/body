{
  this.app=app;
  setWriteThrough(false);
  HorizontalLayout footer=new HorizontalLayout();
  footer.setSpacing(true);
  footer.addComponent(save);
  footer.addComponent(cancel);
  footer.addComponent(edit);
  footer.setVisible(false);
  setFooter(footer);
  cities.setNewItemsAllowed(true);
  cities.setNullSelectionAllowed(false);
  cities.addItem("");
  PersonContainer ds=app.getDataSource();
  for (Iterator<Person> it=ds.getItemIds().iterator(); it.hasNext(); ) {
    String city=(it.next()).getCity();
    cities.addItem(city);
  }
  setFieldFactory(new BaseFieldFactory(){
    @Override public Field createField(    Item item,    Object propertyId,    Component uiContext){
      if (propertyId.equals("city")) {
        cities.setWidth("200px");
        return cities;
      }
      Field field=super.createField(item,propertyId,uiContext);
      if (propertyId.equals("postalCode")) {
        TextField tf=(TextField)field;
        tf.setNullRepresentation("");
        tf.addValidator(new PostalCodeValidator());
        tf.setRequired(true);
      }
 else       if (propertyId.equals("email")) {
        field.addValidator(new EmailValidator());
        field.setRequired(true);
      }
      field.setWidth("200px");
      return field;
    }
  }
);
}
