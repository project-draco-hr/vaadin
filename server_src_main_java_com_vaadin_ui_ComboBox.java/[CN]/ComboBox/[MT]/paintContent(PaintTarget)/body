{
  isPainting=true;
  try {
    getCaptionChangeListener().clear();
    if (isModified()) {
      target.addAttribute("modified",true);
    }
    if (isNewItemsAllowed()) {
      target.addAttribute("allownewitem",true);
    }
    boolean needNullSelectOption=false;
    if (isNullSelectionAllowed()) {
      target.addAttribute("nullselect",true);
      needNullSelectOption=(getNullSelectionItemId() == null);
      if (!needNullSelectOption) {
        target.addAttribute("nullselectitem",true);
      }
    }
    String[] selectedKeys=new String[(getValue() == null && getNullSelectionItemId() == null ? 0 : 1)];
    if (suggestionPopupWidth != null) {
      target.addAttribute("suggestionPopupWidth",suggestionPopupWidth);
    }
    int keyIndex=0;
    target.startTag("options");
    if (currentPage < 0) {
      optionRequest=false;
      currentPage=0;
      filterstring="";
    }
    boolean nullFilteredOut=isFilteringNeeded();
    boolean nullOptionVisible=needNullSelectOption && !nullFilteredOut;
    List<?> options=getOptionsWithFilter(nullOptionVisible);
    if (null == options) {
      options=getFilteredOptions();
      filteredSize=options.size();
      options=sanitetizeList(options,nullOptionVisible);
    }
    final boolean paintNullSelection=needNullSelectOption && currentPage == 0 && !nullFilteredOut;
    if (paintNullSelection) {
      target.startTag("so");
      target.addAttribute("caption","");
      target.addAttribute("key","");
      paintItemStyle(target,null);
      target.endTag("so");
    }
    final Iterator<?> i=options.iterator();
    while (i.hasNext()) {
      final Object id=i.next();
      if (!isNullSelectionAllowed() && id != null && id.equals(getNullSelectionItemId()) && !isSelected(id)) {
        continue;
      }
      final String key=itemIdMapper.key(id);
      final String caption=getItemCaption(id);
      final Resource icon=getItemIcon(id);
      getCaptionChangeListener().addNotifierForItem(id);
      target.startTag("so");
      if (icon != null) {
        target.addAttribute("icon",icon);
      }
      target.addAttribute("caption",caption);
      if (id != null && id.equals(getNullSelectionItemId())) {
        target.addAttribute("nullselection",true);
      }
      target.addAttribute("key",key);
      if (keyIndex < selectedKeys.length && isSelected(id)) {
        selectedKeys[keyIndex++]=key;
      }
      paintItemStyle(target,id);
      target.endTag("so");
    }
    target.endTag("options");
    target.addAttribute("totalitems",size() + (needNullSelectOption ? 1 : 0));
    if (filteredSize > 0 || nullOptionVisible) {
      target.addAttribute("totalMatches",filteredSize + (nullOptionVisible ? 1 : 0));
    }
    target.addVariable(this,"selected",selectedKeys);
    if (getValue() != null && selectedKeys[0] == null) {
      target.addAttribute("selectedCaption",getItemCaption(getValue()));
    }
    if (isNewItemsAllowed()) {
      target.addVariable(this,"newitem","");
    }
    target.addVariable(this,"filter",filterstring);
    target.addVariable(this,"page",currentPage);
    currentPage=-1;
    optionRequest=true;
  }
  finally {
    isPainting=false;
  }
}
