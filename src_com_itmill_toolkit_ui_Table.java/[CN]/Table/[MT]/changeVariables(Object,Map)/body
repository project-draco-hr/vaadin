{
  boolean clientNeedsContentRefresh=false;
  disableContentRefreshing();
  if (!isSelectable() && variables.containsKey("selected")) {
    variables=new HashMap(variables);
    variables.remove("selected");
  }
  super.changeVariables(source,variables);
  if (variables.containsKey("firstvisible")) {
    final Integer value=(Integer)variables.get("firstvisible");
    if (value != null) {
      setCurrentPageFirstItemIndex(value.intValue());
    }
  }
  if (variables.containsKey("reqfirstrow") || variables.containsKey("reqrows")) {
    try {
      firstToBeRenderedInClient=((Integer)variables.get("firstToBeRendered")).intValue();
      lastToBeRenderedInClient=((Integer)variables.get("lastToBeRendered")).intValue();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    Integer value=(Integer)variables.get("reqfirstrow");
    if (value != null) {
      reqFirstRowToPaint=value.intValue();
    }
    value=(Integer)variables.get("reqrows");
    if (value != null) {
      reqRowsToPaint=value.intValue();
      if (reqFirstRowToPaint + reqRowsToPaint > size()) {
        reqRowsToPaint=size() - reqFirstRowToPaint;
      }
    }
    clientNeedsContentRefresh=true;
  }
  if (variables.containsKey("action")) {
    final StringTokenizer st=new StringTokenizer((String)variables.get("action"),",");
    if (st.countTokens() == 2) {
      final Object itemId=itemIdMapper.get(st.nextToken());
      final Action action=(Action)actionMapper.get(st.nextToken());
      if (action != null && containsId(itemId) && actionHandlers != null) {
        for (final Iterator i=actionHandlers.iterator(); i.hasNext(); ) {
          ((Action.Handler)i.next()).handleAction(action,this,itemId);
        }
      }
    }
  }
  if (!sortDisabled) {
    boolean doSort=false;
    if (variables.containsKey("sortcolumn")) {
      final String colId=(String)variables.get("sortcolumn");
      if (colId != null && !"".equals(colId) && !"null".equals(colId)) {
        final Object id=columnIdMap.get(colId);
        setSortContainerPropertyId(id,false);
        doSort=true;
      }
    }
    if (variables.containsKey("sortascending")) {
      final boolean state=((Boolean)variables.get("sortascending")).booleanValue();
      if (state != sortAscending) {
        setSortAscending(state,false);
        doSort=true;
      }
    }
    if (doSort) {
      this.sort();
      clientNeedsContentRefresh=true;
    }
  }
  if (isColumnCollapsingAllowed()) {
    if (variables.containsKey("collapsedcolumns")) {
      try {
        final Object[] ids=(Object[])variables.get("collapsedcolumns");
        for (final Iterator it=visibleColumns.iterator(); it.hasNext(); ) {
          setColumnCollapsed(it.next(),false);
        }
        for (int i=0; i < ids.length; i++) {
          setColumnCollapsed(columnIdMap.get(ids[i].toString()),true);
        }
      }
 catch (      final Exception ignored) {
      }
      clientNeedsContentRefresh=true;
    }
  }
  if (isColumnReorderingAllowed()) {
    if (variables.containsKey("columnorder")) {
      try {
        final Object[] ids=(Object[])variables.get("columnorder");
        for (int i=0; i < ids.length; i++) {
          ids[i]=columnIdMap.get(ids[i].toString());
        }
        setColumnOrder(ids);
      }
 catch (      final Exception ignored) {
      }
      clientNeedsContentRefresh=true;
    }
  }
  enableContentRefreshing(clientNeedsContentRefresh);
}
