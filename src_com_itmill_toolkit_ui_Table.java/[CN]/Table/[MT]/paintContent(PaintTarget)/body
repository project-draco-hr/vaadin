{
  if (getFocusableId() > 0) {
    target.addAttribute("focusid",getFocusableId());
  }
  if (getTabIndex() > 0) {
    target.addAttribute("tabindex",getTabIndex());
  }
  if (getHeight() >= 0) {
    target.addAttribute("height","" + getHeight() + Sizeable.UNIT_SYMBOLS[getHeightUnits()]);
  }
  if (getWidth() >= 0) {
    target.addAttribute("width","" + getWidth() + Sizeable.UNIT_SYMBOLS[getWidthUnits()]);
  }
  Object[] colids=getVisibleColumns();
  int cols=colids.length;
  int first=getCurrentPageFirstItemIndex();
  int total=size();
  int pagelen=getPageLength();
  int colHeadMode=getColumnHeaderMode();
  boolean colheads=colHeadMode != COLUMN_HEADER_MODE_HIDDEN;
  boolean rowheads=getRowHeaderMode() != ROW_HEADER_MODE_HIDDEN;
  Object[][] cells=getVisibleCells();
  boolean iseditable=isEditable();
  int rows=cells[0].length;
  if (!isNullSelectionAllowed() && getNullSelectionItemId() != null && containsId(getNullSelectionItemId())) {
    total--;
    rows--;
  }
  String[] selectedKeys;
  if (isMultiSelect()) {
    selectedKeys=new String[((Set)getValue()).size()];
  }
 else {
    selectedKeys=new String[(getValue() == null && getNullSelectionItemId() == null ? 0 : 1)];
  }
  int keyIndex=0;
  if (isSelectable()) {
    target.addAttribute("selectmode",(isMultiSelect() ? "multi" : "single"));
  }
 else {
    target.addAttribute("selectmode","none");
  }
  target.addAttribute("cols",cols);
  target.addAttribute("rows",rows);
  target.addAttribute("firstrow",(reqFirstRowToPaint >= 0 ? reqFirstRowToPaint : first));
  target.addAttribute("totalrows",total);
  if (pagelen != 0) {
    target.addAttribute("pagelength",pagelen);
  }
  if (colheads) {
    target.addAttribute("colheaders",true);
  }
  if (rowheads) {
    target.addAttribute("rowheaders",true);
  }
  Collection sortables=getSortableContainerPropertyIds();
  ArrayList visibleColOrder=new ArrayList();
  for (Iterator it=visibleColumns.iterator(); it.hasNext(); ) {
    Object columnId=it.next();
    if (!isColumnCollapsed(columnId)) {
      visibleColOrder.add(columnIdMap.key(columnId));
    }
  }
  target.addAttribute("vcolorder",visibleColOrder.toArray());
  Set actionSet=new LinkedHashSet();
  boolean selectable=isSelectable();
  boolean[] iscomponent=new boolean[visibleColumns.size()];
  int iscomponentIndex=0;
  for (Iterator it=visibleColumns.iterator(); it.hasNext() && iscomponentIndex < iscomponent.length; ) {
    Object columnId=it.next();
    Class colType=getType(columnId);
    iscomponent[iscomponentIndex++]=colType != null && Component.class.isAssignableFrom(colType);
  }
  target.startTag("rows");
  for (int i=0; i < cells[0].length; i++) {
    Object itemId=cells[CELL_ITEMID][i];
    if (!isNullSelectionAllowed() && getNullSelectionItemId() != null && itemId == getNullSelectionItemId()) {
      continue;
    }
    target.startTag("tr");
    if (rowheads) {
      if (cells[CELL_ICON][i] != null) {
        target.addAttribute("icon",(Resource)cells[CELL_ICON][i]);
      }
      if (cells[CELL_HEADER][i] != null) {
        target.addAttribute("caption",(String)cells[CELL_HEADER][i]);
      }
    }
    target.addAttribute("key",Integer.parseInt(cells[CELL_KEY][i].toString()));
    if (actionHandlers != null || isSelectable()) {
      if (isSelected(itemId) && keyIndex < selectedKeys.length) {
        target.addAttribute("selected",true);
        selectedKeys[keyIndex++]=(String)cells[CELL_KEY][i];
      }
    }
    if (actionHandlers != null) {
      ArrayList keys=new ArrayList();
      for (Iterator ahi=actionHandlers.iterator(); ahi.hasNext(); ) {
        Action[] aa=((Action.Handler)ahi.next()).getActions(itemId,this);
        if (aa != null) {
          for (int ai=0; ai < aa.length; ai++) {
            String key=actionMapper.key(aa[ai]);
            actionSet.add(aa[ai]);
            keys.add(key);
          }
        }
      }
      target.addAttribute("al",keys.toArray());
    }
    int currentColumn=0;
    for (Iterator it=visibleColumns.iterator(); it.hasNext(); currentColumn++) {
      Object columnId=it.next();
      if (columnId == null || isColumnCollapsed(columnId)) {
        continue;
      }
      if ((iscomponent[currentColumn] || iseditable) && Component.class.isInstance(cells[CELL_FIRSTCOL + currentColumn][i])) {
        Component c=(Component)cells[CELL_FIRSTCOL + currentColumn][i];
        if (c == null) {
          target.addText("");
        }
 else {
          c.paint(target);
        }
      }
 else {
        target.addText((String)cells[CELL_FIRSTCOL + currentColumn][i]);
      }
    }
    target.endTag("tr");
  }
  target.endTag("rows");
  if (selectable) {
    target.addVariable(this,"selected",selectedKeys);
  }
  if (first != 0 || getPageLength() > 0) {
    target.addVariable(this,"firstvisible",first);
  }
  if (getContainerDataSource() instanceof Container.Sortable) {
    target.addVariable(this,"sortcolumn",columnIdMap.key(sortContainerPropertyId));
    target.addVariable(this,"sortascending",sortAscending);
  }
  reqFirstRowToPaint=-1;
  reqRowsToPaint=-1;
  pageBuffer=null;
  target.addVariable(this,"reqrows",reqRowsToPaint);
  target.addVariable(this,"reqfirstrow",reqFirstRowToPaint);
  if (!actionSet.isEmpty()) {
    target.addVariable(this,"action","");
    target.startTag("actions");
    for (Iterator it=actionSet.iterator(); it.hasNext(); ) {
      Action a=(Action)it.next();
      target.startTag("action");
      if (a.getCaption() != null) {
        target.addAttribute("caption",a.getCaption());
      }
      if (a.getIcon() != null) {
        target.addAttribute("icon",a.getIcon());
      }
      target.addAttribute("key",actionMapper.key(a));
      target.endTag("action");
    }
    target.endTag("actions");
  }
  if (columnReorderingAllowed) {
    String[] colorder=new String[visibleColumns.size()];
    int i=0;
    for (Iterator it=visibleColumns.iterator(); it.hasNext() && i < colorder.length; ) {
      colorder[i++]=columnIdMap.key(it.next());
    }
    target.addVariable(this,"columnorder",colorder);
  }
  if (columnCollapsingAllowed) {
    HashSet ccs=new HashSet();
    for (Iterator i=visibleColumns.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (isColumnCollapsed(o)) {
        ccs.add(o);
      }
    }
    String[] collapsedkeys=new String[ccs.size()];
    int nextColumn=0;
    for (Iterator it=visibleColumns.iterator(); it.hasNext() && nextColumn < collapsedkeys.length; ) {
      Object columnId=it.next();
      if (isColumnCollapsed(columnId)) {
        collapsedkeys[nextColumn++]=columnIdMap.key(columnId);
      }
    }
    target.addVariable(this,"collapsedcolumns",collapsedkeys);
  }
  target.startTag("visiblecolumns");
  int i=0;
  for (Iterator it=visibleColumns.iterator(); it.hasNext(); i++) {
    Object columnId=it.next();
    if (columnId != null) {
      target.startTag("column");
      target.addAttribute("cid",columnIdMap.key(columnId));
      String head=getColumnHeader(columnId);
      target.addAttribute("caption",(head != null ? head : ""));
      if (isColumnCollapsed(columnId)) {
        target.addAttribute("collapsed",true);
      }
      if (colheads) {
        if (getColumnIcon(columnId) != null) {
          target.addAttribute("icon",getColumnIcon(columnId));
        }
        if (sortables.contains(columnId)) {
          target.addAttribute("sortable",true);
        }
      }
      if (!ALIGN_LEFT.equals(getColumnAlignment(columnId))) {
        target.addAttribute("align",getColumnAlignment(columnId));
      }
      if (getColumnWidth(columnId) > -1) {
        target.addAttribute("width",String.valueOf(getColumnWidth(columnId)));
      }
      target.endTag("column");
    }
  }
  target.endTag("visiblecolumns");
}
