{
  if (this.getFocusableId() > 0) {
    target.addAttribute("focusid",this.getFocusableId());
  }
  if (this.getTabIndex() > 0)   target.addAttribute("tabindex",this.getTabIndex());
  if (getHeight() >= 0)   target.addAttribute("height","" + getHeight() + Sizeable.UNIT_SYMBOLS[getHeightUnits()]);
  if (getWidth() >= 0)   target.addAttribute("width","" + getWidth() + Sizeable.UNIT_SYMBOLS[getWidthUnits()]);
  Object[] colids=getVisibleColumns();
  int cols=colids.length;
  int first=getCurrentPageFirstItemIndex();
  int total=size();
  int pagelen=getPageLength();
  int colHeadMode=getColumnHeaderMode();
  boolean colheads=colHeadMode != COLUMN_HEADER_MODE_HIDDEN;
  boolean rowheads=getRowHeaderMode() != ROW_HEADER_MODE_HIDDEN;
  Object[][] cells=getVisibleCells();
  boolean iseditable=this.isEditable();
  String[] selectedKeys;
  if (isMultiSelect())   selectedKeys=new String[((Set)getValue()).size()];
 else   selectedKeys=new String[(getValue() == null && getNullSelectionItemId() == null ? 0 : 1)];
  int keyIndex=0;
  if (isSelectable())   target.addAttribute("selectmode",(isMultiSelect() ? "multi" : "single"));
 else   target.addAttribute("selectmode","none");
  target.addAttribute("cols",cols);
  target.addAttribute("rows",cells[0].length);
  target.addAttribute("firstrow",(reqFirstRowToPaint >= 0 ? reqFirstRowToPaint : first) + 1);
  target.addAttribute("totalrows",total);
  if (pagelen != 0)   target.addAttribute("pagelength",pagelen);
  if (colheads)   target.addAttribute("colheaders",true);
  if (rowheads)   target.addAttribute("rowheaders",true);
  target.startTag("cols");
  Collection sortables=getSortableContainerPropertyIds();
  for (Iterator it=this.visibleColumns.iterator(); it.hasNext(); ) {
    Object columnId=it.next();
    if (!isColumnCollapsed(columnId)) {
      target.startTag("ch");
      if (colheads) {
        if (this.getColumnIcon(columnId) != null)         target.addAttribute("icon",this.getColumnIcon(columnId));
        if (sortables.contains(columnId))         target.addAttribute("sortable",true);
        String header=(String)this.getColumnHeader(columnId);
        target.addAttribute("caption",(header != null ? header : ""));
      }
      target.addAttribute("cid",this.columnIdMap.key(columnId));
      if (!ALIGN_LEFT.equals(this.getColumnAlignment(columnId)))       target.addAttribute("align",this.getColumnAlignment(columnId));
      if (getColumnWidth(columnId) > -1)       target.addAttribute("width",String.valueOf(getColumnWidth(columnId)));
      target.endTag("ch");
    }
  }
  target.endTag("cols");
  Set actionSet=new LinkedHashSet();
  boolean selectable=isSelectable();
  boolean[] iscomponent=new boolean[this.visibleColumns.size()];
  int iscomponentIndex=0;
  for (Iterator it=this.visibleColumns.iterator(); it.hasNext() && iscomponentIndex < iscomponent.length; ) {
    Object columnId=it.next();
    Class colType=getType(columnId);
    iscomponent[iscomponentIndex++]=colType != null && Component.class.isAssignableFrom(colType);
  }
  target.startTag("rows");
  for (int i=0; i < cells[0].length; i++) {
    target.startTag("tr");
    Object itemId=cells[CELL_ITEMID][i];
    if (rowheads) {
      if (cells[CELL_ICON][i] != null)       target.addAttribute("icon",(Resource)cells[CELL_ICON][i]);
      if (cells[CELL_HEADER][i] != null)       target.addAttribute("caption",(String)cells[CELL_HEADER][i]);
    }
    if (actionHandlers != null || isSelectable()) {
      target.addAttribute("key",(String)cells[CELL_KEY][i]);
      if (isSelected(itemId) && keyIndex < selectedKeys.length) {
        target.addAttribute("selected",true);
        selectedKeys[keyIndex++]=(String)cells[CELL_KEY][i];
      }
    }
    if (actionHandlers != null) {
      target.startTag("al");
      for (Iterator ahi=actionHandlers.iterator(); ahi.hasNext(); ) {
        Action[] aa=((Action.Handler)ahi.next()).getActions(itemId,this);
        if (aa != null)         for (int ai=0; ai < aa.length; ai++) {
          String key=actionMapper.key(aa[ai]);
          actionSet.add(aa[ai]);
          target.addSection("ak",key);
        }
      }
      target.endTag("al");
    }
    int currentColumn=0;
    for (Iterator it=this.visibleColumns.iterator(); it.hasNext(); currentColumn++) {
      Object columnId=it.next();
      if (columnId == null || this.isColumnCollapsed(columnId))       continue;
      if ((iscomponent[currentColumn] || iseditable) && Component.class.isInstance(cells[CELL_FIRSTCOL + currentColumn][i])) {
        Component c=(Component)cells[CELL_FIRSTCOL + currentColumn][i];
        if (c == null)         target.addSection("label","");
 else         c.paint(target);
      }
 else       target.addSection("label",(String)cells[CELL_FIRSTCOL + currentColumn][i]);
    }
    target.endTag("tr");
  }
  target.endTag("rows");
  if (selectable)   target.addVariable(this,"selected",selectedKeys);
  if (first != 0 || getPageLength() > 0)   target.addVariable(this,"firstvisible",first + 1);
  if (getContainerDataSource() instanceof Container.Sortable) {
    target.addVariable(this,"sortcolumn",this.columnIdMap.key(this.sortContainerPropertyId));
    target.addVariable(this,"sortascending",this.sortAscending);
  }
  reqFirstRowToPaint=-1;
  reqRowsToPaint=-1;
  pageBuffer=null;
  target.addVariable(this,"reqrows",reqRowsToPaint);
  target.addVariable(this,"reqfirstrow",reqFirstRowToPaint);
  if (!actionSet.isEmpty()) {
    target.startTag("actions");
    target.addVariable(this,"action","");
    for (Iterator it=actionSet.iterator(); it.hasNext(); ) {
      Action a=(Action)it.next();
      target.startTag("action");
      if (a.getCaption() != null)       target.addAttribute("caption",a.getCaption());
      if (a.getIcon() != null)       target.addAttribute("icon",a.getIcon());
      target.addAttribute("key",actionMapper.key(a));
      target.endTag("action");
    }
    target.endTag("actions");
  }
  if (this.columnReorderingAllowed) {
    String[] colorder=new String[this.visibleColumns.size()];
    int i=0;
    for (Iterator it=this.visibleColumns.iterator(); it.hasNext() && i < colorder.length; ) {
      colorder[i++]=this.columnIdMap.key(it.next());
    }
    target.addVariable(this,"columnorder",colorder);
  }
  if (this.columnCollapsingAllowed) {
    HashSet ccs=new HashSet();
    for (Iterator i=visibleColumns.iterator(); i.hasNext(); ) {
      Object o=i.next();
      if (isColumnCollapsed(o))       ccs.add(o);
    }
    String[] collapsedkeys=new String[ccs.size()];
    int nextColumn=0;
    for (Iterator it=this.visibleColumns.iterator(); it.hasNext() && nextColumn < collapsedkeys.length; ) {
      Object columnId=it.next();
      if (this.isColumnCollapsed(columnId)) {
        collapsedkeys[nextColumn++]=this.columnIdMap.key(columnId);
      }
    }
    target.addVariable(this,"collapsedcolumns",collapsedkeys);
    target.startTag("visiblecolumns");
    int i=0;
    for (Iterator it=this.visibleColumns.iterator(); it.hasNext(); i++) {
      Object columnId=it.next();
      if (columnId != null) {
        target.startTag("column");
        target.addAttribute("cid",this.columnIdMap.key(columnId));
        String head=getColumnHeader(columnId);
        target.addAttribute("caption",(head != null ? head : ""));
        if (this.isColumnCollapsed(columnId)) {
          target.addAttribute("collapsed",true);
        }
        target.endTag("column");
      }
    }
    target.endTag("visiblecolumns");
  }
}
