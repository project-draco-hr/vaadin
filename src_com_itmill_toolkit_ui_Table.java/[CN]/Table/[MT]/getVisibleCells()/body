{
  if (this.pageBuffer != null && isPageBufferingEnabled()) {
    return this.pageBuffer;
  }
  if (this.listenedProperties == null) {
    this.listenedProperties=new LinkedList();
  }
 else {
    for (Iterator i=this.listenedProperties.iterator(); i.hasNext(); ) {
      ((Property.ValueChangeNotifier)i.next()).removeListener(this);
    }
  }
  if (this.visibleComponents == null) {
    this.visibleComponents=new LinkedList();
  }
 else {
    for (Iterator i=this.visibleComponents.iterator(); i.hasNext(); ) {
      ((Component)i.next()).setParent(null);
    }
    this.visibleComponents.clear();
  }
  Object[] colids=getVisibleColumns();
  int cols=colids.length;
  int pagelen=getPageLength();
  int firstIndex=getCurrentPageFirstItemIndex();
  int rows=size();
  if (rows > 0 && firstIndex >= 0) {
    rows-=firstIndex;
  }
  if (pagelen > 0 && pagelen < rows) {
    rows=pagelen;
  }
  if (this.reqRowsToPaint >= 0) {
    rows=this.reqRowsToPaint;
  }
  Object id;
  if (this.reqFirstRowToPaint >= 0 && this.reqFirstRowToPaint < size()) {
    firstIndex=this.reqFirstRowToPaint;
  }
  if (size() > 0) {
    if (rows + firstIndex > size()) {
      rows=size() - firstIndex;
    }
  }
 else {
    rows=0;
  }
  Object[][] cells=new Object[cols + CELL_FIRSTCOL][rows];
  if (rows == 0) {
    return cells;
  }
  if (this.items instanceof Container.Indexed) {
    id=((Container.Indexed)this.items).getIdByIndex(firstIndex);
  }
 else {
    id=((Container.Ordered)this.items).firstItemId();
    for (int i=0; i < firstIndex; i++) {
      id=((Container.Ordered)this.items).nextItemId(id);
    }
  }
  int headmode=getRowHeaderMode();
  boolean[] iscomponent=new boolean[cols];
  for (int i=0; i < cols; i++) {
    iscomponent[i]=Component.class.isAssignableFrom(getType(colids[i]));
  }
  int filledRows=0;
  for (int i=0; i < rows && id != null; i++) {
    cells[CELL_ITEMID][i]=id;
    cells[CELL_KEY][i]=this.itemIdMapper.key(id);
    if (headmode != ROW_HEADER_MODE_HIDDEN) {
switch (headmode) {
case ROW_HEADER_MODE_INDEX:
        cells[CELL_HEADER][i]=String.valueOf(i + firstIndex + 1);
      break;
default :
    cells[CELL_HEADER][i]=getItemCaption(id);
}
cells[CELL_ICON][i]=getItemIcon(id);
}
if (cols > 0) {
for (int j=0; j < cols; j++) {
  Object value=null;
  Property p=getContainerProperty(id,colids[j]);
  if (p != null) {
    if (p instanceof Property.ValueChangeNotifier) {
      ((Property.ValueChangeNotifier)p).addListener(this);
      this.listenedProperties.add(p);
    }
    if (iscomponent[j]) {
      value=p.getValue();
    }
 else     if (p != null) {
      value=getPropertyValue(id,colids[j],p);
    }
 else {
      value=getPropertyValue(id,colids[j],null);
    }
  }
 else {
    value="";
  }
  if (value instanceof Component) {
    ((Component)value).setParent(this);
    this.visibleComponents.add(value);
  }
  cells[CELL_FIRSTCOL + j][i]=value;
}
}
id=((Container.Ordered)this.items).nextItemId(id);
filledRows++;
}
if (filledRows != cells[0].length) {
Object[][] temp=new Object[cells.length][filledRows];
for (int i=0; i < cells.length; i++) {
for (int j=0; j < filledRows; j++) {
  temp[i][j]=cells[i][j];
}
}
cells=temp;
}
if (isPageBufferingEnabled()) {
this.pageBuffer=cells;
}
return cells;
}
