{
  if (param != null) {
    if (param.equals("thread")) {
      final ProgressIndicator indicator=new ProgressIndicator(new Float(0.0));
      main.addComponent(indicator);
      indicator.setPollingInterval(1000);
      final Label text=new Label("-- Not running --");
      main.addComponent(text);
      final Button button=new Button("Click to start");
      main.addComponent(button);
class WorkThread extends Thread {
        @Override public void run(){
          double current=0.0;
          while (true) {
            try {
              sleep(50);
            }
 catch (            InterruptedException e) {
            }
            current+=0.01;
            if (current > 1.0) {
              indicator.setValue(new Float(1.0));
            }
 else {
              indicator.setValue(new Float(current));
            }
            if (current > 1.2) {
              indicator.setValue(new Float(0.0));
              button.setVisible(true);
              break;
            }
          }
        }
      }
      button.addListener(new Button.ClickListener(){
        public void buttonClick(        ClickEvent event){
          final WorkThread thread=new WorkThread();
          thread.start();
          button.setVisible(false);
        }
      }
);
    }
 else     if (param.equals("window")) {
      final Table table=new Table();
      table.setPageLength(5);
      table.setWidth(100,Sizeable.UNITS_PERCENTAGE);
      table.addContainerProperty("Name",String.class,"");
      main.addComponent(table);
      final Window adderWindow=new Window("Add Items");
      adderWindow.setName("win-adder");
      main.getApplication().addWindow(adderWindow);
      final NativeSelect select=new NativeSelect("Select item to add");
      select.setImmediate(true);
      adderWindow.addComponent(select);
      String items[]=new String[]{"-- Select --","Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};
      for (int i=0; i < items.length; i++) {
        select.addItem(items[i]);
      }
      select.setNullSelectionItemId(items[0]);
      select.addListener(new ValueChangeListener(){
        public void valueChange(        ValueChangeEvent event){
          if (select.getValue() != null) {
            table.addItem(new Object[]{select.getValue()},new Integer(table.size()));
          }
        }
      }
);
      Link link=new Link("Click to open second window",new ExternalResource(adderWindow.getURL()),"_new",50,200,Link.TARGET_BORDER_DEFAULT);
      main.addComponent(link);
      ProgressIndicator poller=new ProgressIndicator();
      poller.addStyleName("invisible");
      main.addComponent(poller);
    }
 else     if (param.equals("centered")) {
    }
  }
 else {
    ProgressIndicator poller=new ProgressIndicator(new Float(0.0));
    poller.setPollingInterval(1000000);
    poller.setIndeterminate(true);
    main.addComponent(poller);
  }
}
