{
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  enabled=!uidl.hasAttribute("disabled");
  this.client=client;
  paintableId=uidl.getStringAttribute("id");
  immediate=uidl.getBooleanAttribute("immediate");
  final int newTotalRows=uidl.getIntAttribute("totalrows");
  if (newTotalRows != totalRows) {
    totalRows=newTotalRows;
    if (tBody != null) {
      initializedAndAttached=false;
      initialContentReceived=false;
      isNewBody=true;
    }
  }
  pageLength=uidl.getIntAttribute("pagelength");
  if (pageLength == 0) {
    pageLength=totalRows;
  }
  firstvisible=uidl.hasVariable("firstvisible") ? uidl.getIntVariable("firstvisible") : 0;
  showRowHeaders=uidl.getBooleanAttribute("rowheaders");
  showColHeaders=uidl.getBooleanAttribute("colheaders");
  if (uidl.hasAttribute("width")) {
    width=uidl.getStringAttribute("width");
  }
  if (uidl.hasAttribute("height")) {
    height=uidl.getStringAttribute("height");
  }
  if (uidl.hasVariable("sortascending")) {
    sortAscending=uidl.getBooleanVariable("sortascending");
    sortColumn=uidl.getStringVariable("sortcolumn");
  }
  if (uidl.hasVariable("selected")) {
    final Set selectedKeys=uidl.getStringArrayVariableAsSet("selected");
    selectedRowKeys.clear();
    for (final Iterator it=selectedKeys.iterator(); it.hasNext(); ) {
      selectedRowKeys.add(it.next());
    }
  }
  if (uidl.hasAttribute("selectmode")) {
    if (uidl.getStringAttribute("selectmode").equals("multi")) {
      selectMode=Table.SELECT_MODE_MULTI;
    }
 else {
      selectMode=Table.SELECT_MODE_SINGLE;
    }
  }
  if (uidl.hasVariable("columnorder")) {
    columnReordering=true;
    columnOrder=uidl.getStringArrayVariable("columnorder");
  }
  if (uidl.hasVariable("collapsedcolumns")) {
    tHead.setColumnCollapsingAllowed(true);
    collapsedColumns=uidl.getStringArrayVariableAsSet("collapsedcolumns");
  }
 else {
    tHead.setColumnCollapsingAllowed(false);
  }
  UIDL rowData=null;
  for (final Iterator it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL c=(UIDL)it.next();
    if (c.getTag().equals("rows")) {
      rowData=c;
    }
 else     if (c.getTag().equals("actions")) {
      updateActionMap(c);
    }
 else     if (c.getTag().equals("visiblecolumns")) {
      tHead.updateCellsFromUIDL(c);
    }
  }
  updateHeader(uidl.getStringArrayAttribute("vcolorder"));
  if (initializedAndAttached) {
    updateBody(rowData,uidl.getIntAttribute("firstrow"),uidl.getIntAttribute("rows"));
  }
 else {
    if (tBody != null) {
      tBody.removeFromParent();
      client.unregisterChildPaintables(tBody);
    }
    tBody=new IScrollTableBody();
    tBody.renderInitialRows(rowData,uidl.getIntAttribute("firstrow"),uidl.getIntAttribute("rows"));
    bodyContainer.add(tBody);
    initialContentReceived=true;
    if (isAttached()) {
      sizeInit();
    }
  }
  hideScrollPositionAnnotation();
}
