{
  Iterator headCells=tHead.iterator();
  int i=0;
  while (headCells.hasNext()) {
    HeaderCell hCell=(HeaderCell)headCells.next();
    int w;
    if (hCell.getWidth() > 0) {
      w=hCell.getWidth();
    }
 else {
      int hw=DOM.getElementPropertyInt(hCell.getElement(),"offsetWidth");
      int cw=tBody.getColWidth(i);
      w=(hw > cw ? hw : cw) + IScrollTableBody.CELL_EXTRA_WIDTH;
    }
    setColWidth(i,w);
    i++;
  }
  if (height < 0) {
    bodyContainer.setHeight((tBody.getRowHeight() * pageLength) + "px");
  }
 else {
    bodyContainer.setHeight(height + "px");
  }
  if (width < 0) {
    bodyContainer.setWidth((tBody.getOffsetWidth()) + "px");
    tHead.setWidth(bodyContainer.getOffsetWidth());
  }
 else {
    bodyContainer.setWidth(width + "px");
    tHead.setWidth(width);
  }
  tHead.disableBrowserIntelligence();
  if (firstvisible > 0) {
    bodyContainer.setScrollPosition(firstvisible * tBody.getRowHeight());
    firstRowInViewPort=firstvisible;
  }
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      if (totalRows - 1 > tBody.getLastRendered()) {
        rowRequestHandler.setReqFirstRow(tBody.getLastRendered() + 1);
        rowRequestHandler.setReqRows((int)(pageLength * CACHE_RATE));
        rowRequestHandler.deferRowFetch();
      }
    }
  }
);
  initializedAndAttached=true;
}
