{
  RequestCallback requestCallback=new RequestCallback(){
    @Override public void onError(    Request request,    Throwable exception){
      getCommunicationProblemHandler().xhrException(payload,new CommunicationProblemEvent(request,uri,payload,exception));
    }
    @Override public void onResponseReceived(    Request request,    Response response){
      getLogger().info("Server visit took " + String.valueOf((new Date()).getTime() - requestStartTime.getTime()) + "ms");
      int statusCode=response.getStatusCode();
      if (statusCode == 200) {
        getCommunicationProblemHandler().xhrOk();
      }
 else {
        CommunicationProblemEvent problemEvent=new CommunicationProblemEvent(request,uri,payload,response);
        getCommunicationProblemHandler().xhrInvalidStatusCode(problemEvent,retry);
        return;
      }
      String contentType=response.getHeader("Content-Type");
      if (contentType == null || !contentType.startsWith("application/json")) {
        getCommunicationProblemHandler().xhrInvalidContent(new CommunicationProblemEvent(request,uri,payload,response));
        return;
      }
      String responseText=response.getText();
      if (!responseText.startsWith(JSON_COMMUNICATION_PREFIX)) {
        getCommunicationProblemHandler().xhrInvalidContent(new CommunicationProblemEvent(request,uri,payload,response));
        return;
      }
      final String jsonText=responseText.substring(JSON_COMMUNICATION_PREFIX.length(),responseText.length() - JSON_COMMUNICATION_SUFFIX.length());
      getServerMessageHandler().handleJSONText(jsonText,statusCode);
    }
  }
;
  if (push != null) {
    push.push(payload);
  }
 else {
    try {
      doAjaxRequest(uri,payload,requestCallback);
    }
 catch (    RequestException e) {
      getCommunicationProblemHandler().xhrException(payload,new CommunicationProblemEvent(null,uri,payload,e));
    }
  }
}
