{
  RequestTimer requestTimer=new RequestTimer();
  requestTimer.start();
  AbstractApplicationPortletWrapper portletWrapper=new AbstractApplicationPortletWrapper(this);
  WrappedPortletRequest wrappedRequest=createWrappedRequest(request);
  WrappedPortletResponse wrappedResponse=new WrappedPortletResponse(response,getDeploymentConfiguration());
  RequestType requestType=getRequestType(wrappedRequest);
  if (requestType == RequestType.UNKNOWN) {
    handleUnknownRequest(request,response);
  }
 else   if (requestType == RequestType.DUMMY) {
    ((ResourceResponse)response).setContentType("text/html");
    final OutputStream out=((ResourceResponse)response).getPortletOutputStream();
    final PrintWriter outWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out,"UTF-8")));
    outWriter.print("<html><body>dummy page</body></html>");
    outWriter.close();
  }
 else   if (requestType == RequestType.STATIC_FILE) {
    serveStaticResources((ResourceRequest)request,(ResourceResponse)response);
  }
 else {
    Application application=null;
    boolean transactionStarted=false;
    boolean requestStarted=false;
    try {
      application=findApplicationInstance(wrappedRequest,requestType);
      if (application == null) {
        return;
      }
      Application.setCurrent(application);
      PortletApplicationContext2 applicationContext=getApplicationContext(request.getPortletSession());
      applicationContext.setResponse(response);
      applicationContext.setPortletConfig(getPortletConfig());
      PortletCommunicationManager applicationManager=applicationContext.getApplicationManager(application);
      if (requestType == RequestType.CONNECTOR_RESOURCE) {
        applicationManager.serveConnectorResource(wrappedRequest,wrappedResponse);
        return;
      }
      applicationContext.getBrowser().updateRequestDetails(wrappedRequest);
      if (application instanceof PortletRequestListener) {
        ((PortletRequestListener)application).onRequestStart(request,response);
        requestStarted=true;
      }
      startApplication(request,application,applicationContext);
      applicationContext.startTransaction(application,request);
      transactionStarted=true;
      UI uI=null;
synchronized (application) {
        if (application.isRunning()) {
switch (requestType) {
case RENDER:
case ACTION:
            try {
              uI=application.getRootForRequest(wrappedRequest);
            }
 catch (            RootRequiresMoreInformationException e) {
            }
          break;
case BROWSER_DETAILS:
        break;
case FILE_UPLOAD:
      break;
case APPLICATION_RESOURCE:
    break;
default :
  uI=application.getRootForRequest(wrappedRequest);
}
}
}
if (request instanceof RenderRequest) {
applicationContext.firePortletRenderRequest(application,uI,(RenderRequest)request,(RenderResponse)response);
}
 else if (request instanceof ActionRequest) {
applicationContext.firePortletActionRequest(application,uI,(ActionRequest)request,(ActionResponse)response);
}
 else if (request instanceof EventRequest) {
applicationContext.firePortletEventRequest(application,uI,(EventRequest)request,(EventResponse)response);
}
 else if (request instanceof ResourceRequest) {
applicationContext.firePortletResourceRequest(application,uI,(ResourceRequest)request,(ResourceResponse)response);
}
if (requestType == RequestType.FILE_UPLOAD) {
applicationManager.handleFileUpload(application,wrappedRequest,wrappedResponse);
return;
}
 else if (requestType == RequestType.BROWSER_DETAILS) {
applicationManager.handleBrowserDetailsRequest(wrappedRequest,wrappedResponse,application);
return;
}
 else if (requestType == RequestType.UIDL) {
applicationManager.handleUidlRequest(wrappedRequest,wrappedResponse,portletWrapper,uI);
return;
}
 else {
if (!application.isRunning()) {
endApplication(request,response,application);
return;
}
handleOtherRequest(wrappedRequest,wrappedResponse,requestType,application,applicationContext,applicationManager);
}
}
 catch (final SessionExpiredException e) {
getLogger().finest("A user session has expired");
}
catch (final GeneralSecurityException e) {
getLogger().fine("General security exception, the security key was probably incorrect.");
}
catch (final Throwable e) {
handleServiceException(wrappedRequest,wrappedResponse,application,e);
}
 finally {
try {
if (transactionStarted) {
((PortletApplicationContext2)application.getContext()).endTransaction(application,request);
}
}
  finally {
try {
if (requestStarted) {
((PortletRequestListener)application).onRequestEnd(request,response);
}
}
  finally {
UI.setCurrent(null);
Application.setCurrent(null);
PortletSession session=request.getPortletSession(false);
if (session != null) {
requestTimer.stop(getApplicationContext(session));
}
}
}
}
}
}
