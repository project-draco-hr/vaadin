{
  layout.paint(target);
  if (size.getHeight() > -1) {
    target.addVariable(this,"height",size.getHeight() + Size.UNIT_SYMBOLS[size.getHeightUnits()]);
  }
  if (size.getWidth() > -1) {
    target.addVariable(this,"width",size.getWidth() + Size.UNIT_SYMBOLS[size.getWidthUnits()]);
  }
  if (isScrollable()) {
    target.addVariable(this,"scrollleft",getScrollOffsetX());
    target.addVariable(this,"scrolldown",getScrollOffsetY());
  }
  if (actionHandlers != null && !actionHandlers.isEmpty()) {
    target.addVariable(this,"action","");
    target.startTag("actions");
    for (final Iterator ahi=actionHandlers.iterator(); ahi.hasNext(); ) {
      final Action[] aa=((Action.Handler)ahi.next()).getActions(null,this);
      if (aa != null) {
        for (int ai=0; ai < aa.length; ai++) {
          final Action a=aa[ai];
          target.startTag("action");
          final String akey=actionMapper.key(aa[ai]);
          target.addAttribute("key",akey);
          if (a.getCaption() != null) {
            target.addAttribute("caption",a.getCaption());
          }
          if (a.getIcon() != null) {
            target.addAttribute("icon",a.getIcon());
          }
          if (a instanceof ShortcutAction) {
            final ShortcutAction sa=(ShortcutAction)a;
            target.addAttribute("kc",sa.getKeyCode());
            final int[] modifiers=sa.getModifiers();
            if (modifiers != null) {
              final String[] smodifiers=new String[modifiers.length];
              for (int i=0; i < modifiers.length; i++) {
                smodifiers[i]=String.valueOf(modifiers[i]);
              }
              target.addAttribute("mk",smodifiers);
            }
          }
          target.endTag("action");
        }
      }
    }
    target.endTag("actions");
  }
}
