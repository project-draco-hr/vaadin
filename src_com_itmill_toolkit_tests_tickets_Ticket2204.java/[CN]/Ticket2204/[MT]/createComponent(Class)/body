{
  RichTextArea textArea=new RichTextArea();
  textArea.setVisible(false);
  textArea.setCaption("This is the textArea");
  textArea.setWidth("200px");
  textArea.setHeight("100px");
  textAreas.add(textArea);
  Component cc=null;
  try {
    cc=(Component)c.newInstance();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  if (c == Accordion.class) {
  }
  if (c == Form.class) {
    Form f=(Form)cc;
    f.setFieldFactory(new FieldFactory(){
      public Field createField(      Class type,      Component uiContext){
        return createField();
      }
      public Field createField(      Property property,      Component uiContext){
        return createField();
      }
      public Field createField(      Item item,      Object propertyId,      Component uiContext){
        return createField();
      }
      private Field createField(){
        formTextArea=new RichTextArea();
        formTextArea.setVisible(false);
        return formTextArea;
      }
      public Field createField(      Container container,      Object itemId,      Object propertyId,      Component uiContext){
        return createField();
      }
    }
);
    f.setItemDataSource(new BeanItem(new Object(){
      private int a;
      public int getA(){
        return a;
      }
      public void setA(      int a){
        this.a=a;
      }
    }
));
    containerToComponent.put(f,formTextArea);
    return f;
  }
  containerToComponent.put(cc,textArea);
  if (cc instanceof ComponentContainer) {
    ((ComponentContainer)cc).addComponent(textArea);
  }
  if (c == SplitPanel.class) {
    SplitPanel sp=(SplitPanel)cc;
    sp.setWidth("300px");
    sp.setHeight("300px");
    sp.addComponent(new Label("Label"));
    textArea.setSizeFull();
  }
  if (c == Panel.class) {
    Layout layout=((Panel)cc).getLayout();
    containerToComponent.put(cc,layout);
    layout.setVisible(false);
    textArea.setVisible(true);
    return cc;
  }
  return cc;
}
