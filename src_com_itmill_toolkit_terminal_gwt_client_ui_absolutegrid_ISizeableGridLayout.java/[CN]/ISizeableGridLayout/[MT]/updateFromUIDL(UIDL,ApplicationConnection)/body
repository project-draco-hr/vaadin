{
  this.client=client;
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  if (uidl.hasAttribute("caption")) {
    setTitle(uidl.getStringAttribute("caption"));
  }
  int row=0, column=0;
  final ArrayList oldCells=new ArrayList();
  for (final Iterator iterator=getCellIterator(); iterator.hasNext(); ) {
    oldCells.add(iterator.next());
  }
  clear();
  setCols(uidl.getIntAttribute("w"));
  setRows(uidl.getIntAttribute("h"));
  handleMargins(uidl);
  spacing=uidl.getBooleanAttribute("spacing") ? detectSpacingSize() : 0;
  final int[] alignments=uidl.getIntArrayAttribute("alignments");
  int alignmentIndex=0;
  for (final Iterator i=uidl.getChildIterator(); i.hasNext(); ) {
    final UIDL r=(UIDL)i.next();
    if ("gr".equals(r.getTag())) {
      column=0;
      for (final Iterator j=r.getChildIterator(); j.hasNext(); ) {
        final UIDL c=(UIDL)j.next();
        if ("gc".equals(c.getTag())) {
          int colSpan;
          if (c.hasAttribute("w")) {
            colSpan=c.getIntAttribute("w");
          }
 else {
            colSpan=1;
          }
          int rowSpan;
          if (c.hasAttribute("h")) {
            rowSpan=c.getIntAttribute("h");
          }
 else {
            rowSpan=1;
          }
          final UIDL u=c.getChildUIDL(0);
          if (u != null) {
            final Paintable child=client.getPaintable(u);
            AbsoluteGridCell cell=getCell(column,row);
            paintableToCellMap.put(child,cell);
            cell.rowSpan=rowSpan;
            cell.colSpan=colSpan;
            oldCells.remove(cell);
            cell.setAlignment(alignments[alignmentIndex++]);
            cell.render();
            cell.setWidget((Widget)child);
            if (!u.getBooleanAttribute("cached")) {
              child.updateFromUIDL(u,client);
            }
            cell.vAling();
          }
          column+=colSpan;
        }
      }
      row++;
    }
  }
  for (final Iterator it=oldCells.iterator(); it.hasNext(); ) {
    final AbsoluteGridCell w=(AbsoluteGridCell)it.next();
    client.unregisterPaintable((Paintable)w.getWidget());
    w.removeFromParent();
    paintableToCellMap.remove(w.getWidget());
  }
}
