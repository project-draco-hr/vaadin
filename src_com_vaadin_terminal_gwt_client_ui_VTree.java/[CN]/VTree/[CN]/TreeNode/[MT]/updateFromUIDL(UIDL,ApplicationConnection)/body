{
  setText(uidl.getStringAttribute("caption"));
  key=uidl.getStringAttribute("key");
  keyToNode.put(key,this);
  if (uidl.hasAttribute("al")) {
    actionKeys=uidl.getStringArrayAttribute("al");
  }
  if (uidl.getTag().equals("node")) {
    if (uidl.getChildCount() == 0) {
      childNodeContainer.setVisible(false);
    }
 else {
      renderChildNodes(uidl.getChildIterator());
      childrenLoaded=true;
    }
  }
 else {
    addStyleName(CLASSNAME + "-leaf");
  }
  if (uidl.hasAttribute("style")) {
    addStyleName(CLASSNAME + "-" + uidl.getStringAttribute("style"));
    Widget.setStyleName(nodeCaptionDiv,CLASSNAME + "-caption-" + uidl.getStringAttribute("style"),true);
    childNodeContainer.addStyleName(CLASSNAME + "-children-" + uidl.getStringAttribute("style"));
  }
  String description=uidl.getStringAttribute("descr");
  if (description != null && client != null) {
    TooltipInfo info=new TooltipInfo(description);
    client.registerTooltip(VTree.this,key,info);
  }
 else {
    client.registerTooltip(VTree.this,key,null);
  }
  if (uidl.getBooleanAttribute("expanded") && !getState()) {
    setState(true,false);
  }
  if (uidl.getBooleanAttribute("selected")) {
    setSelected(true);
    selectedIds.add(key);
  }
  if (uidl.hasAttribute("icon")) {
    if (icon == null) {
      onloadHandled=false;
      icon=new Icon(client);
      DOM.insertBefore(DOM.getFirstChild(nodeCaptionDiv),icon.getElement(),nodeCaptionSpan);
    }
    icon.setUri(uidl.getStringAttribute("icon"));
  }
 else {
    if (icon != null) {
      DOM.removeChild(DOM.getFirstChild(nodeCaptionDiv),icon.getElement());
      icon=null;
    }
  }
  if (BrowserInfo.get().isIE6() && isAttached()) {
    fixWidth();
  }
}
