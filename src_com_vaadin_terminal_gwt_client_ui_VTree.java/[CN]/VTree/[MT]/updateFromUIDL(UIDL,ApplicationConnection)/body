{
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  rendering=true;
  this.client=client;
  if (uidl.hasAttribute("partialUpdate")) {
    handleUpdate(uidl);
    rendering=false;
    return;
  }
  paintableId=uidl.getId();
  immediate=uidl.hasAttribute("immediate");
  disabled=uidl.getBooleanAttribute("disabled");
  readonly=uidl.getBooleanAttribute("readonly");
  emitClickEvents=uidl.getBooleanAttribute("listenClicks");
  isNullSelectionAllowed=uidl.getBooleanAttribute("nullselect");
  clear();
  for (final Iterator i=uidl.getChildIterator(); i.hasNext(); ) {
    final UIDL childUidl=(UIDL)i.next();
    if ("actions".equals(childUidl.getTag())) {
      updateActionMap(childUidl);
      continue;
    }
    final TreeNode childTree=new TreeNode();
    if (childTree.ie6compatnode != null) {
      this.add(childTree);
    }
    childTree.updateFromUIDL(childUidl,client);
    if (childTree.ie6compatnode == null) {
      this.add(childTree);
    }
  }
  final String selectMode=uidl.getStringAttribute("selectmode");
  selectable=!"none".equals(selectMode);
  isMultiselect="multi".equals(selectMode);
  selectedIds=uidl.getStringArrayVariableAsSet("selected");
  rendering=false;
}
