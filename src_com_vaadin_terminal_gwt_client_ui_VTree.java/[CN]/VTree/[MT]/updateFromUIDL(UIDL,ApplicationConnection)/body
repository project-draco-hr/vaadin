{
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  rendering=true;
  this.client=client;
  if (uidl.hasAttribute("partialUpdate")) {
    handleUpdate(uidl);
    rendering=false;
    return;
  }
  paintableId=uidl.getId();
  immediate=uidl.hasAttribute("immediate");
  disabled=uidl.getBooleanAttribute("disabled");
  readonly=uidl.getBooleanAttribute("readonly");
  dragMode=uidl.hasAttribute("dragMode") ? uidl.getIntAttribute("dragMode") : 0;
  isNullSelectionAllowed=uidl.getBooleanAttribute("nullselect");
  if (uidl.hasAttribute("alb")) {
    bodyActionKeys=uidl.getStringArrayAttribute("alb");
  }
  body.clear();
  TreeNode childTree=null;
  UIDL childUidl=null;
  for (final Iterator<?> i=uidl.getChildIterator(); i.hasNext(); ) {
    childUidl=(UIDL)i.next();
    if ("actions".equals(childUidl.getTag())) {
      updateActionMap(childUidl);
      continue;
    }
 else     if ("-ac".equals(childUidl.getTag())) {
      updateDropHandler(childUidl);
      continue;
    }
    childTree=new TreeNode();
    if (childTree.ie6compatnode != null) {
      body.add(childTree);
    }
    childTree.updateFromUIDL(childUidl,client);
    if (childTree.ie6compatnode == null) {
      body.add(childTree);
    }
    childTree.addStyleDependentName("root");
    childTree.childNodeContainer.addStyleDependentName("root");
  }
  if (childTree != null && childUidl != null) {
    boolean leaf=!childUidl.getTag().equals("node");
    childTree.addStyleDependentName(leaf ? "leaf-last" : "last");
    childTree.childNodeContainer.addStyleDependentName("last");
  }
  final String selectMode=uidl.getStringAttribute("selectmode");
  selectable=!"none".equals(selectMode);
  isMultiselect="multi".equals(selectMode);
  if (isMultiselect) {
    multiSelectMode=uidl.getIntAttribute("multiselectmode");
  }
  selectedIds=uidl.getStringArrayVariableAsSet("selected");
  if (lastSelection == null && focusedNode == null && !selectedIds.isEmpty()) {
    setFocusedNode(keyToNode.get(selectedIds.iterator().next()));
    focusedNode.setFocused(false);
  }
  rendering=false;
}
