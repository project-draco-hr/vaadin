{
  if (dropHandler == null) {
    dropHandler=new AbstractDropHandler(){
      @Override public void dragEnter(      DragEvent drag){
        updateTreeRelatedTransferData(drag);
        super.dragEnter(drag);
      }
      @Override protected void dragAccepted(      final DragEvent drag){
      }
      @Override public void dragOver(      final DragEvent currentDrag){
        final Object oldIdOver=currentDrag.getTransferrable().getData("itemIdOver");
        final String oldDetail=(String)currentDrag.getTransferrable().getData("detail");
        DeferredCommand.addCommand(new Command(){
          public void execute(){
            final String detail=getDropDetail(currentDrag.getCurrentGwtEvent());
            boolean nodeHasChanged=(currentMouseOverKey != null && currentMouseOverKey != oldIdOver) || (oldIdOver != null);
            boolean detailHasChanded=!detail.equals(oldIdOver);
            if (nodeHasChanged || detailHasChanded) {
              ApplicationConnection.getConsole().log("Change in Transferable " + currentMouseOverKey + " "+ detail);
              updateTreeRelatedTransferData(currentDrag);
              AcceptCallback accpectedCb=new AcceptCallback(){
                public void handleResponse(                ValueMap responseData){
                  if (responseData == null || responseData.containsKey("accepted")) {
                    keyToNode.get(currentMouseOverKey).emphasis(detail);
                  }
                }
              }
;
              if (validateOnServer()) {
                DragAndDropManager.get().visitServer(DragEventType.OVER,accpectedCb);
              }
 else {
                if (validates(currentDrag.getTransferrable())) {
                  accpectedCb.handleResponse(null);
                }
 else {
                  keyToNode.get(currentMouseOverKey).emphasis(null);
                }
                if (oldIdOver != null && oldIdOver != currentMouseOverKey) {
                  keyToNode.get(oldIdOver).emphasis(null);
                }
              }
            }
          }
        }
);
      }
      @Override public void dragLeave(      DragEvent drag){
        cleanUp();
      }
      private void cleanUp(){
        if (currentMouseOverKey != null) {
          keyToNode.get(currentMouseOverKey).emphasis(null);
          currentMouseOverKey=null;
        }
      }
      @Override public boolean drop(      DragEvent drag){
        cleanUp();
        return super.drop(drag);
      }
      @Override public Paintable getPaintable(){
        return VTree.this;
      }
      public ApplicationConnection getApplicationConnection(){
        return client;
      }
    }
;
  }
  dropHandler.updateRules(childUidl);
}
