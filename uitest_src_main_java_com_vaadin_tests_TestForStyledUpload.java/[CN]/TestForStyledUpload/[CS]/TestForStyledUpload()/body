{
  main.addComponent(new Label("Clicking on button b updates information about upload components status or same with garbage collector."));
  up=new Upload(null,buffer);
  up.setButtonCaption("Select file");
  up.setImmediateMode(true);
  up.addFinishedListener(this);
  up.addFailedListener(this);
  up.addSucceededListener(this);
  up.addStartedListener(this);
  up.addProgressListener(new Upload.ProgressListener(){
    @Override public void updateProgress(    long readBytes,    long contentLenght){
      pi.setValue(new Float(readBytes / (float)contentLenght));
      refreshMemUsage();
      transferred.setValue("Transferred " + readBytes + " of "+ contentLenght);
    }
  }
);
  final Button b=new Button("Update status",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      readState();
    }
  }
);
  final Button c=new Button("Update status with gc",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      gc();
    }
  }
);
  main.addComponent(up);
  l=new Label("Idle");
  main.addComponent(l);
  pi.setVisible(false);
  pi.setPollingInterval(300);
  main.addComponent(pi);
  main.addComponent(transferred);
  memoryStatus=new Label();
  main.addComponent(memoryStatus);
  statusLayout.setMargin(true);
  status.setVisible(false);
  main.addComponent(status);
  Button cancel=new Button("Cancel current upload");
  cancel.addClickListener(new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      buffer.cancel();
    }
  }
);
  main.addComponent(cancel);
  final Button restart=new Button("Restart demo application");
  restart.addClickListener(new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      TestForStyledUpload.this.close();
    }
  }
);
  main.addComponent(restart);
  main.addComponent(b);
  main.addComponent(c);
}
