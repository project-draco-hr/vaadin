{
  if (streamVariable == null) {
    throw new IllegalStateException("StreamVariable for the post not found");
  }
  final VaadinSession session=getVaadinSession();
  OutputStream out=null;
  int totalBytes=0;
  StreamingStartEventImpl startedEvent=new StreamingStartEventImpl(filename,type,contentLength);
  try {
    boolean listenProgress;
    session.getLock().lock();
    try {
      streamVariable.streamingStarted(startedEvent);
      out=streamVariable.getOutputStream();
      listenProgress=streamVariable.listenProgress();
    }
  finally {
      session.getLock().unlock();
    }
    if (out == null) {
      throw new NoOutputStreamException();
    }
    if (null == in) {
      throw new NoInputStreamException();
    }
    final byte buffer[]=new byte[MAX_UPLOAD_BUFFER_SIZE];
    int bytesReadToBuffer=0;
    while ((bytesReadToBuffer=in.read(buffer)) > 0) {
      out.write(buffer,0,bytesReadToBuffer);
      totalBytes+=bytesReadToBuffer;
      if (listenProgress) {
        session.getLock().lock();
        try {
          StreamingProgressEventImpl progressEvent=new StreamingProgressEventImpl(filename,type,contentLength,totalBytes);
          streamVariable.onProgress(progressEvent);
        }
  finally {
          session.getLock().unlock();
        }
      }
      if (streamVariable.isInterrupted()) {
        throw new UploadInterruptedException();
      }
    }
    out.close();
    StreamingEndEvent event=new StreamingEndEventImpl(filename,type,totalBytes);
    session.getLock().lock();
    try {
      streamVariable.streamingFinished(event);
    }
  finally {
      session.getLock().unlock();
    }
  }
 catch (  UploadInterruptedException e) {
    tryToCloseStream(out);
    StreamingErrorEvent event=new StreamingErrorEventImpl(filename,type,contentLength,totalBytes,e);
    session.getLock().lock();
    try {
      streamVariable.streamingFailed(event);
    }
  finally {
      session.getLock().unlock();
    }
  }
catch (  final Exception e) {
    tryToCloseStream(out);
    session.getLock().lock();
    try {
      StreamingErrorEvent event=new StreamingErrorEventImpl(filename,type,contentLength,totalBytes,e);
      streamVariable.streamingFailed(event);
      throw new UploadException(e);
    }
  finally {
      session.getLock().unlock();
    }
  }
  return startedEvent.isDisposed();
}
