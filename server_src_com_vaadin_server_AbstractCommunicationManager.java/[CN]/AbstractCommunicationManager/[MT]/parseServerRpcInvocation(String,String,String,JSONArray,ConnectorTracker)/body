{
  ClientConnector connector=connectorTracker.getConnector(connectorId);
  ServerRpcManager<?> rpcManager=connector.getRpcManager(interfaceName);
  if (rpcManager == null) {
    getLogger().log(Level.WARNING,"Ignoring RPC call to {0}.{1} in connector {2} ({3}) as no RPC implementation is regsitered",new Object[]{interfaceName,methodName,connector.getClass().getName(),connectorId});
    return null;
  }
  Class<? extends ServerRpc> rpcInterface=rpcManager.getRpcInterface();
  ServerRpcMethodInvocation invocation=new ServerRpcMethodInvocation(connectorId,rpcInterface,methodName,parametersJson.length());
  Object[] parameters=new Object[parametersJson.length()];
  Type[] declaredRpcMethodParameterTypes=invocation.getMethod().getGenericParameterTypes();
  for (int j=0; j < parametersJson.length(); ++j) {
    Object parameterValue=parametersJson.get(j);
    Type parameterType=declaredRpcMethodParameterTypes[j];
    parameters[j]=JsonCodec.decodeInternalOrCustomType(parameterType,parameterValue,connectorTracker);
  }
  invocation.setParameters(parameters);
  return invocation;
}
