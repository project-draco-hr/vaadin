{
  boolean success=true;
  try {
    Set<Connector> enabledConnectors=new HashSet<Connector>();
    List<MethodInvocation> invocations=parseInvocations(uI.getConnectorTracker(),burst);
    for (    MethodInvocation invocation : invocations) {
      final ClientConnector connector=getConnector(uI,invocation.getConnectorId());
      if (connector != null && connector.isConnectorEnabled()) {
        enabledConnectors.add(connector);
      }
    }
    for (int i=0; i < invocations.size(); i++) {
      MethodInvocation invocation=invocations.get(i);
      final ClientConnector connector=getConnector(uI,invocation.getConnectorId());
      if (connector == null) {
        getLogger().log(Level.WARNING,"RPC call to " + invocation.getInterfaceName() + "."+ invocation.getMethodName()+ " received for connector "+ invocation.getConnectorId()+ " but no such connector could be found");
        continue;
      }
      if (!enabledConnectors.contains(connector)) {
        if (invocation instanceof LegacyChangeVariablesInvocation) {
          LegacyChangeVariablesInvocation legacyInvocation=(LegacyChangeVariablesInvocation)invocation;
          Map<String,Object> changes=legacyInvocation.getVariableChanges();
          if (changes.size() == 1 && changes.containsKey("close") && Boolean.TRUE.equals(changes.get("close"))) {
            continue;
          }
        }
        String msg="Ignoring RPC call for disabled connector " + connector.getClass().getName();
        if (connector instanceof Component) {
          String caption=((Component)connector).getCaption();
          if (caption != null) {
            msg+=", caption=" + caption;
          }
        }
        getLogger().warning(msg);
        continue;
      }
      if (invocation instanceof ServerRpcMethodInvocation) {
        try {
          ServerRpcManager.applyInvocation(connector,(ServerRpcMethodInvocation)invocation);
        }
 catch (        RpcInvocationException e) {
          Throwable realException=e.getCause();
          Component errorComponent=null;
          if (connector instanceof Component) {
            errorComponent=(Component)connector;
          }
          handleChangeVariablesError(uI.getSession(),errorComponent,realException,null);
        }
      }
 else {
        LegacyChangeVariablesInvocation legacyInvocation=(LegacyChangeVariablesInvocation)invocation;
        Map<String,Object> changes=legacyInvocation.getVariableChanges();
        try {
          if (connector instanceof VariableOwner) {
            changeVariables(source,(VariableOwner)connector,changes);
          }
 else {
            throw new IllegalStateException("Received legacy variable change for " + connector.getClass().getName() + " ("+ connector.getConnectorId()+ ") which is not a VariableOwner. The client-side connector sent these legacy varaibles: "+ changes.keySet());
          }
        }
 catch (        Exception e) {
          Component errorComponent=null;
          if (connector instanceof Component) {
            errorComponent=(Component)connector;
          }
 else           if (connector instanceof DragAndDropService) {
            Object dropHandlerOwner=changes.get("dhowner");
            if (dropHandlerOwner instanceof Component) {
              errorComponent=(Component)dropHandlerOwner;
            }
          }
          handleChangeVariablesError(uI.getSession(),errorComponent,e,changes);
        }
      }
    }
  }
 catch (  JSONException e) {
    getLogger().warning("Unable to parse RPC call from the client: " + e.getMessage());
    throw new RuntimeException(e);
  }
  return success;
}
