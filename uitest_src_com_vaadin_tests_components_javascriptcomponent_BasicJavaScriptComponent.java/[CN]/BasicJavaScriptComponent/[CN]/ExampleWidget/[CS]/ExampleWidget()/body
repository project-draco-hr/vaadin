{
  registerRpc(new TestRpc(){
    @Override public void sendRpc(    String message){
      log.log("Got RPC message: " + message);
    }
  }
);
  addFunction("messageToServer",new JavaScriptFunction(){
    @Override public void call(    JsonArray arguments){
      log.log("Got callback message: " + arguments.getString(0));
    }
  }
);
  addFunction("reportParentIds",new JavaScriptFunction(){
    @Override public void call(    JsonArray arguments){
      JsonArray parentIds=arguments.getArray(0);
      if (!parentIds.getString(0).equals(getConnectorId())) {
        log.log("Connector ids doesn't match");
      }
      HasComponents parent=getParent();
      int i=1;
      while (parent != null) {
        if (!parentIds.getString(i).equals(parent.getConnectorId())) {
          log.log("parentIds[" + i + "] doesn't match");
        }
        i++;
        parent=parent.getParent();
      }
      log.log("Parent ids checked");
    }
  }
);
  getRpcProxy(TestRpc.class).sendRpc("RPC message");
  callFunction("messageToClient","Callback message");
  getState().setMessages(Arrays.asList("First state message","Second state message"));
  Resource resource=new ConnectorResource(){
    @Override public String getMIMEType(){
      return null;
    }
    @Override public DownloadStream getStream(){
      return null;
    }
    @Override public String getFilename(){
      return null;
    }
  }
;
  getState().setUrl(new ResourceReference(resource,this,"test"));
}
