{
  String[] selectionModePath={"Component","State","Selection mode"};
  String[] primaryStyleNamePath={"Component","State","Primary Stylename"};
  String[] styleGeneratorNamePath={"Component","State","Style generator"};
  addMenuCommand("multi",new ScheduledCommand(){
    @Override public void execute(){
      grid.setSelectionMode(SelectionMode.MULTI);
    }
  }
,selectionModePath);
  addMenuCommand("single",new ScheduledCommand(){
    @Override public void execute(){
      grid.setSelectionMode(SelectionMode.SINGLE);
    }
  }
,selectionModePath);
  addMenuCommand("none",new ScheduledCommand(){
    @Override public void execute(){
      grid.setSelectionMode(SelectionMode.NONE);
    }
  }
,selectionModePath);
  addMenuCommand("v-grid",new ScheduledCommand(){
    @Override public void execute(){
      grid.setStylePrimaryName("v-grid");
    }
  }
,primaryStyleNamePath);
  addMenuCommand("v-escalator",new ScheduledCommand(){
    @Override public void execute(){
      grid.setStylePrimaryName("v-escalator");
    }
  }
,primaryStyleNamePath);
  addMenuCommand("v-custom-style",new ScheduledCommand(){
    @Override public void execute(){
      grid.setStylePrimaryName("v-custom-style");
    }
  }
,primaryStyleNamePath);
  addMenuCommand("Edit and refresh Row 0",new ScheduledCommand(){
    @Override public void execute(){
      DataSource<List<Data>> ds=grid.getDataSource();
      RowHandle<List<Data>> rowHandle=ds.getHandle(ds.getRow(0));
      rowHandle.getRow().get(0).value="Foo";
      rowHandle.updateRow();
    }
  }
,"Component","State");
  addMenuCommand("Delayed edit of Row 0",new ScheduledCommand(){
    @Override public void execute(){
      DataSource<List<Data>> ds=grid.getDataSource();
      final RowHandle<List<Data>> rowHandle=ds.getHandle(ds.getRow(0));
      new Timer(){
        @Override public void run(){
          rowHandle.getRow().get(0).value="Bar";
          rowHandle.updateRow();
        }
      }
.schedule(1500);
    }
  }
,"Component","State");
  addMenuCommand("None",new ScheduledCommand(){
    @Override public void execute(){
      grid.setCellStyleGenerator(null);
    }
  }
,styleGeneratorNamePath);
  addMenuCommand("Row only",new ScheduledCommand(){
    @Override public void execute(){
      grid.setCellStyleGenerator(new CellStyleGenerator<List<Data>>(){
        @Override public String getStyle(        Grid<List<Data>> grid,        List<Data> row,        int rowIndex,        GridColumn<?,List<Data>> column,        int columnIndex){
          if (column == null) {
            if (rowIndex % 3 == 0) {
              return "third";
            }
 else {
              Integer value=(Integer)row.get(COLUMNS - MANUALLY_FORMATTED_COLUMNS).value;
              return value.toString();
            }
          }
 else {
            return null;
          }
        }
      }
);
    }
  }
,styleGeneratorNamePath);
  addMenuCommand("Cell only",new ScheduledCommand(){
    @Override public void execute(){
      grid.setCellStyleGenerator(new CellStyleGenerator<List<Data>>(){
        @Override public String getStyle(        Grid<List<Data>> grid,        List<Data> row,        int rowIndex,        GridColumn<?,List<Data>> column,        int columnIndex){
          if (column == null) {
            return null;
          }
 else {
            if (column == grid.getColumn(2)) {
              return "two";
            }
 else             if (column == grid.getColumn(COLUMNS - MANUALLY_FORMATTED_COLUMNS)) {
              Integer value=(Integer)column.getValue(row);
              return value.toString();
            }
 else {
              return null;
            }
          }
        }
      }
);
    }
  }
,styleGeneratorNamePath);
  addMenuCommand("Combined",new ScheduledCommand(){
    @Override public void execute(){
      grid.setCellStyleGenerator(new CellStyleGenerator<List<Data>>(){
        @Override public String getStyle(        Grid<List<Data>> grid,        List<Data> row,        int rowIndex,        GridColumn<?,List<Data>> column,        int columnIndex){
          if (column == null) {
            return Integer.toString(rowIndex);
          }
 else {
            return rowIndex + "_" + grid.getColumns().indexOf(column);
          }
        }
      }
);
    }
  }
,styleGeneratorNamePath);
  for (int i=-1; i <= COLUMNS; i++) {
    final int index=i;
    addMenuCommand(Integer.toString(index) + " columns",new ScheduledCommand(){
      @Override public void execute(){
        grid.setFrozenColumnCount(index);
      }
    }
,"Component","State","Frozen column count");
  }
}
