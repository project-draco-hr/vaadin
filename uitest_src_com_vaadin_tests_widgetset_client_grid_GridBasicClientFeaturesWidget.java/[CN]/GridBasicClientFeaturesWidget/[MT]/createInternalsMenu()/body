{
  String[] listenersPath={"Component","Internals","Listeners"};
  final Label label=new Label();
  addSouth(label,20);
  addMenuCommand("Add scroll listener",new ScheduledCommand(){
    private HandlerRegistration scrollHandler=null;
    @Override public void execute(){
      if (scrollHandler != null) {
        return;
      }
      scrollHandler=grid.addScrollHandler(new ScrollHandler(){
        @Override public void onScroll(        ScrollEvent event){
          @SuppressWarnings("hiding") final Grid<?> grid=(Grid<?>)event.getSource();
          label.setText("scrollTop: " + grid.getScrollTop() + ", scrollLeft: "+ grid.getScrollLeft());
        }
      }
);
    }
  }
,listenersPath);
  addMenuCommand("Add ColumnReorder listener",new ScheduledCommand(){
    private HandlerRegistration columnReorderHandler=null;
    @Override public void execute(){
      if (columnReorderHandler != null) {
        return;
      }
      final Label columnOrderLabel=new Label();
      columnOrderLabel.getElement().setId("columnreorder");
      addLineEnd(columnOrderLabel,300);
      columnReorderHandler=grid.addColumnReorderHandler(new ColumnReorderHandler<List<Data>>(){
        private int eventIndex=0;
        @Override public void onColumnReorder(        ColumnReorderEvent<List<Data>> event){
          columnOrderLabel.getElement().setAttribute("columns","" + (++eventIndex));
        }
      }
);
    }
  }
,listenersPath);
}
