{
  String[] listenersPath={"Component","Internals","Listeners"};
  final Label label=new Label();
  addSouth(label,20);
  addMenuCommand("Add scroll listener",new ScheduledCommand(){
    private HandlerRegistration scrollHandler=null;
    @Override public void execute(){
      if (scrollHandler != null) {
        return;
      }
      scrollHandler=grid.addScrollHandler(new ScrollHandler(){
        @Override public void onScroll(        ScrollEvent event){
          @SuppressWarnings("hiding") final Grid<?> grid=(Grid<?>)event.getSource();
          label.setText("scrollTop: " + grid.getScrollTop() + ", scrollLeft: "+ grid.getScrollLeft());
        }
      }
);
    }
  }
,listenersPath);
  addMenuCommand("Add ColumnReorder listener",new ScheduledCommand(){
    private HandlerRegistration columnReorderHandler=null;
    @Override public void execute(){
      if (columnReorderHandler != null) {
        return;
      }
      final Label columnOrderLabel=new Label();
      columnOrderLabel.getElement().setId("columnreorder");
      addLineEnd(columnOrderLabel,300);
      columnReorderHandler=grid.addColumnReorderHandler(new ColumnReorderHandler<List<Data>>(){
        private int eventIndex=0;
        @Override public void onColumnReorder(        ColumnReorderEvent<List<Data>> event){
          columnOrderLabel.getElement().setAttribute("columns","" + (++eventIndex));
        }
      }
);
    }
  }
,listenersPath);
  addMenuCommand("Add Column Visibility Change listener",new ScheduledCommand(){
    private HandlerRegistration columnVisibilityHandler=null;
    @Override public void execute(){
      if (columnVisibilityHandler != null) {
        return;
      }
      final Label columnOrderLabel=new Label();
      columnOrderLabel.getElement().setId("columnvisibility");
      addLineEnd(columnOrderLabel,250);
      ColumnVisibilityChangeHandler handler=new ColumnVisibilityChangeHandler<List<Data>>(){
        private int eventIndex=0;
        @Override public void onVisibilityChange(        ColumnVisibilityChangeEvent<List<Data>> event){
          columnOrderLabel.getElement().setAttribute("counter","" + (++eventIndex));
          columnOrderLabel.getElement().setAttribute("useroriginated",(Boolean.toString(event.isUserOriginated())));
          columnOrderLabel.getElement().setAttribute("ishidden",(Boolean.toString(event.isHidden())));
          columnOrderLabel.getElement().setAttribute("columnindex","" + grid.getColumns().indexOf(event.getColumn()));
        }
      }
;
      columnVisibilityHandler=grid.addColumnVisibilityChangeHandler(handler);
    }
  }
,listenersPath);
  addMenuCommand("Add context menu listener",new ScheduledCommand(){
    HandlerRegistration handler=null;
    ContextMenuHandler contextMenuHandler=new ContextMenuHandler(){
      @Override public void onContextMenu(      ContextMenuEvent event){
        event.preventDefault();
        final String location;
        EventCellReference<?> cellRef=grid.getEventCell();
        if (cellRef.isHeader()) {
          location="header";
        }
 else         if (cellRef.isBody()) {
          location="body";
        }
 else         if (cellRef.isFooter()) {
          location="footer";
        }
 else {
          location="somewhere";
        }
        getLogger().info("Prevented opening a context menu in grid " + location);
      }
    }
;
    @Override public void execute(){
      if (handler != null) {
        grid.unsinkEvents(Event.ONCONTEXTMENU);
        handler.removeHandler();
      }
 else {
        grid.sinkEvents(Event.ONCONTEXTMENU);
        handler=grid.addDomHandler(contextMenuHandler,ContextMenuEvent.getType());
      }
    }
  }
,listenersPath);
}
