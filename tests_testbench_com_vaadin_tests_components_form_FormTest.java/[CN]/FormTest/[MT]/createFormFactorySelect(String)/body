{
  LinkedHashMap<String,FormFieldFactory> options=new LinkedHashMap<String,FormFieldFactory>();
  options.put("Default",DefaultFieldFactory.get());
  options.put("Custom FieldFactory",new FormFieldFactory(){
    @Override public Field<?> createField(    Item item,    Object propertyId,    Component uiContext){
      Class<?> type=item.getItemProperty(propertyId).getType();
      Field<?> c=null;
      if (Number.class.isAssignableFrom(type)) {
        TextField tf=new TextField();
        tf.setCaption(DefaultFieldFactory.createCaptionByPropertyId(propertyId));
        tf.setWidth("3em");
        c=tf;
      }
 else       if ("city".equals(propertyId)) {
        ComboBox cb=new ComboBox();
        cb.setNullSelectionAllowed(false);
        cb.addItem("Turku");
        cb.addItem("New York");
        cb.addItem("Moscow");
        cb.setCaption(DefaultFieldFactory.createCaptionByPropertyId(propertyId));
        c=cb;
        c.setWidth("200px");
      }
      if (c == null) {
        c=DefaultFieldFactory.get().createField(item,propertyId,uiContext);
        c.setWidth("200px");
      }
      return c;
    }
    @Override public String toString(){
      return "Custom FieldFactory";
    }
  }
);
  Command<Form,FormFieldFactory> formFactoryCommand=new Command<Form,FormFieldFactory>(){
    @Override public void execute(    Form c,    FormFieldFactory value,    Object data){
      c.setFormFieldFactory(value);
      c.setItemDataSource(c.getItemDataSource());
    }
  }
;
  createSelectAction("FormFieldFactory",category,options,"Default",formFactoryCommand);
}
