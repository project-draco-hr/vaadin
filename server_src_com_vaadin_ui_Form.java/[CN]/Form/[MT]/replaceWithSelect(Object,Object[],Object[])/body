{
  if (propertyId == null || values == null || descriptions == null) {
    throw new NullPointerException("All parameters must be non-null");
  }
  if (values.length != descriptions.length) {
    throw new IllegalArgumentException("Value and description list are of different size");
  }
  final Field<?> oldField=fields.get(propertyId);
  if (oldField == null) {
    throw new IllegalArgumentException("Field with given propertyid '" + propertyId.toString() + "' can not be found.");
  }
  final Object value=oldField.getPropertyDataSource() == null ? oldField.getValue() : oldField.getPropertyDataSource().getValue();
  boolean found=false;
  boolean isMultiselect=false;
  for (int i=0; i < values.length && !found; i++) {
    if (values[i] == value || (value != null && value.equals(values[i]))) {
      found=true;
    }
  }
  if (value != null && !found) {
    if (value instanceof Collection) {
      for (final Iterator<?> it=((Collection<?>)value).iterator(); it.hasNext(); ) {
        final Object val=it.next();
        found=false;
        for (int i=0; i < values.length && !found; i++) {
          if (values[i] == val || (val != null && val.equals(values[i]))) {
            found=true;
          }
        }
        if (!found) {
          throw new IllegalArgumentException("Currently selected value '" + val + "' of property '"+ propertyId.toString()+ "' was not found");
        }
      }
      isMultiselect=true;
    }
 else {
      throw new IllegalArgumentException("Current value '" + value + "' of property '"+ propertyId.toString()+ "' was not found");
    }
  }
  final AbstractSelect newField=isMultiselect ? new ListSelect() : new Select();
  newField.setCaption(oldField.getCaption());
  newField.setReadOnly(oldField.isReadOnly());
  newField.setReadThrough(oldField.isReadThrough());
  newField.setWriteThrough(oldField.isWriteThrough());
  newField.addContainerProperty("desc",String.class,"");
  newField.setItemCaptionPropertyId("desc");
  for (int i=0; i < values.length; i++) {
    Object id=values[i];
    final Item item;
    if (id == null) {
      id=newField.addItem();
      item=newField.getItem(id);
      newField.setNullSelectionItemId(id);
    }
 else {
      item=newField.addItem(id);
    }
    if (item != null) {
      item.getItemProperty("desc").setValue(descriptions[i].toString());
    }
  }
  final Property<?> property=oldField.getPropertyDataSource();
  oldField.setPropertyDataSource(null);
  newField.setPropertyDataSource(property);
  getLayout().replaceComponent(oldField,newField);
  fields.put(propertyId,newField);
  newField.addListener(fieldValueChangeListener);
  oldField.removeListener(fieldValueChangeListener);
  return newField;
}
