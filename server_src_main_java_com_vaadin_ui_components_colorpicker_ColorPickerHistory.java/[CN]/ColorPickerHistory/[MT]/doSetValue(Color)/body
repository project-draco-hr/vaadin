{
  ArrayBlockingQueue<Color> colorHistory=getColorHistory();
  boolean exists=false;
  Iterator<Color> iter=colorHistory.iterator();
  while (iter.hasNext()) {
    if (color.equals(iter.next())) {
      exists=true;
      break;
    }
  }
  if (!exists) {
    if (!colorHistory.offer(color)) {
      colorHistory.poll();
      colorHistory.offer(color);
    }
  }
  List<Color> colorList=new ArrayList<>(colorHistory);
  Collections.reverse(colorList);
  Collections.swap(colorList,colorList.indexOf(color),0);
  Color[][] colors=new Color[ROWS][COLUMNS];
  iter=colorList.iterator();
  for (int row=0; row < ROWS; row++) {
    for (int col=0; col < COLUMNS; col++) {
      if (iter.hasNext()) {
        colors[row][col]=iter.next();
      }
 else {
        colors[row][col]=Color.WHITE;
      }
    }
  }
  getContent().setColorGrid(colors);
  getContent().markAsDirty();
}
