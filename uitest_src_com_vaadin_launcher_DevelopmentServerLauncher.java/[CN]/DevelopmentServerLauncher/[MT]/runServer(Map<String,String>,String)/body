{
  assignDefault(serverArgs,"webroot","WebContent");
  assignDefault(serverArgs,"httpPort","" + serverPort);
  assignDefault(serverArgs,"context","");
  int port=serverPort;
  try {
    port=Integer.parseInt(serverArgs.get("httpPort"));
  }
 catch (  NumberFormatException e) {
  }
  System.out.println("-------------------------------------------------\n" + "Starting Vaadin in " + mode + ".\n"+ "Running in http://localhost:"+ port+ "\n-------------------------------------------------\n");
  final Server server=new Server();
  final Connector connector=new SelectChannelConnector();
  connector.setPort(port);
  if (serverArgs.containsKey("withssl")) {
    final SslSocketConnector sslConnector=new SslSocketConnector();
    sslConnector.setPort(8444);
    sslConnector.setTruststore(KEYSTORE);
    sslConnector.setTrustPassword("password");
    sslConnector.setKeystore(KEYSTORE);
    sslConnector.setKeyPassword("password");
    sslConnector.setPassword("password");
    server.setConnectors(new Connector[]{connector,sslConnector});
  }
 else {
    server.setConnectors(new Connector[]{connector});
  }
  final WebAppContext webappcontext=new WebAppContext();
  String path=DevelopmentServerLauncher.class.getPackage().getName().replace(".",File.separator);
  webappcontext.setContextPath(serverArgs.get("context"));
  webappcontext.setWar(serverArgs.get("webroot"));
  server.setHandler(webappcontext);
  if (serverArgs.containsKey("slowdown")) {
    String[] paths=serverArgs.get("slowdown").split(",");
    for (    String p : paths) {
      System.out.println("Slowing down: " + p);
      webappcontext.addFilter(SlowFilter.class,p,1);
    }
  }
  if (serverArgs.containsKey("cache")) {
    String[] paths=serverArgs.get("cache").split(",");
    for (    String p : paths) {
      System.out.println("Enabling cache for: " + p);
      webappcontext.addFilter(CacheFilter.class,p,1);
    }
  }
  try {
    server.start();
    if (serverArgs.containsKey("shutdownPort")) {
      int shutdownPort=Integer.parseInt(serverArgs.get("shutdownPort"));
      final ServerSocket serverSocket=new ServerSocket(shutdownPort,1,InetAddress.getByName("127.0.0.1"));
      new Thread(){
        @Override public void run(){
          try {
            System.out.println("Waiting for shutdown signal on port " + serverSocket.getLocalPort());
            Socket accept=serverSocket.accept();
            serverSocket.close();
            final Thread stopThread=Thread.currentThread();
            Thread interruptThread=new Thread(){
              @Override public void run(){
                try {
                  Thread.sleep(5000);
                  if (!server.isStopped()) {
                    System.out.println("Jetty still running. Closing JVM.");
                    dumpThreadStacks();
                    System.exit(-1);
                  }
                }
 catch (                InterruptedException e) {
                }
              }
            }
;
            interruptThread.setDaemon(true);
            interruptThread.start();
            server.stop();
            interruptThread.interrupt();
            OutputStream outputStream=accept.getOutputStream();
            outputStream.write(0);
            outputStream.flush();
            accept.close();
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
.start();
    }
  }
 catch (  Exception e) {
    server.stop();
    throw e;
  }
  return "http://localhost:" + port + serverArgs.get("context");
}
