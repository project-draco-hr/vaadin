{
  if (eventType.isAssignableFrom(event.getClass())) {
    try {
      if (eventArgumentIndex >= 0) {
        if (eventArgumentIndex == 0 && arguments.length == 1) {
          method.invoke(object,new Object[]{event});
        }
 else {
          final Object[] arg=new Object[arguments.length];
          for (int i=0; i < arg.length; i++) {
            arg[i]=arguments[i];
          }
          arg[eventArgumentIndex]=event;
          method.invoke(object,arg);
        }
      }
 else {
        method.invoke(object,arguments);
      }
    }
 catch (    final java.lang.IllegalAccessException e) {
      throw new java.lang.RuntimeException("Internal error - please report",e);
    }
catch (    final java.lang.reflect.InvocationTargetException e) {
      throw new MethodException("Invocation of method " + method + " failed.",e.getTargetException());
    }
  }
}
