{
  addComponent(new Button("Access from UI thread",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      markAsDirty();
      checkFromBeforeClientResponse=access(new Runnable(){
        @Override public void run(){
          log("Access from UI thread is run");
        }
      }
);
      log("Access from UI thread future is done? " + checkFromBeforeClientResponse.isDone());
    }
  }
));
  addComponent(new Button("Access from background thread",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      final CountDownLatch latch=new CountDownLatch(1);
      new Thread(){
        @Override public void run(){
          final boolean threadHasCurrentResponse=VaadinService.getCurrentResponse() != null;
          final Future<Void> initialFuture=access(new Runnable(){
            @Override public void run(){
              log("Initial background message");
              log("Thread has current response? " + threadHasCurrentResponse);
            }
          }
);
          latch.countDown();
          while (!getSession().getLockInstance().tryLock()) {
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
          try {
            log("Thread got lock, inital future done? " + initialFuture.isDone());
            setPollInterval(-1);
          }
  finally {
            getSession().unlock();
          }
        }
      }
.start();
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      setPollInterval(3000);
    }
  }
));
  addComponent(new Button("Access throwing exception",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      final Future<Void> firstFuture=access(new Runnable(){
        @Override public void run(){
          log("Throwing exception in access");
          throw new RuntimeException("Catch me if you can");
        }
      }
);
      access(new Runnable(){
        @Override public void run(){
          log("firstFuture is done? " + firstFuture.isDone());
          try {
            firstFuture.get();
            log("Should not get here");
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
catch (          ExecutionException e) {
            log("Got exception from firstFuture: " + e.getMessage());
          }
        }
      }
);
    }
  }
));
  addComponent(new Button("Cancel future before started",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      Future<Void> future=access(new Runnable(){
        @Override public void run(){
          log("Should not get here");
        }
      }
);
      future.cancel(false);
      log("future was cancelled, should not start");
    }
  }
));
  addComponent(new Button("Cancel running future",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      final ReentrantLock interruptLock=new ReentrantLock();
      final Future<Void> future=access(new Runnable(){
        @Override public void run(){
          log("Waiting for thread to start");
          while (!interruptLock.isLocked()) {
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
              log("Premature interruption");
              throw new RuntimeException(e);
            }
          }
          log("Thread started, waiting for interruption");
          try {
            interruptLock.lockInterruptibly();
          }
 catch (          InterruptedException e) {
            log("I was interrupted");
          }
        }
      }
);
      new Thread(){
        @Override public void run(){
          interruptLock.lock();
          while (!interruptLock.hasQueuedThreads()) {
            try {
              Thread.sleep(100);
            }
 catch (            InterruptedException e) {
              throw new RuntimeException(e);
            }
          }
          future.cancel(true);
        }
      }
.start();
    }
  }
));
  addComponent(new Button("CurrentInstance accessSynchronously values",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      CurrentInstance.set(CurrentInstanceTestType.class,new CurrentInstanceTestType("Set before accessSynchronosly"));
      accessSynchronously(new Runnable(){
        @Override public void run(){
          log.log("accessSynchronously has request? " + (VaadinService.getCurrentRequest() != null));
          log.log("Test value in accessSynchronously: " + CurrentInstance.get(CurrentInstanceTestType.class));
          CurrentInstance.set(CurrentInstanceTestType.class,new CurrentInstanceTestType("Set in accessSynchronosly"));
        }
      }
);
      log.log("has request after accessSynchronously? " + (VaadinService.getCurrentRequest() != null));
      log("Test value after accessSynchornously: " + CurrentInstance.get(CurrentInstanceTestType.class));
    }
  }
));
  addComponent(new Button("CurrentInstance access values",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      CurrentInstance.setInheritable(CurrentInstanceTestType.class,new CurrentInstanceTestType("Set before access"));
      access(new Runnable(){
        @Override public void run(){
          log.log("access has request? " + (VaadinService.getCurrentRequest() != null));
          log.log("Test value in access: " + CurrentInstance.get(CurrentInstanceTestType.class));
          CurrentInstance.setInheritable(CurrentInstanceTestType.class,new CurrentInstanceTestType("Set in access"));
        }
      }
);
      CurrentInstance.setInheritable(CurrentInstanceTestType.class,new CurrentInstanceTestType("Set before run pending"));
      getSession().getService().runPendingAccessTasks(getSession());
      log.log("has request after access? " + (VaadinService.getCurrentRequest() != null));
      log("Test value after access: " + CurrentInstance.get(CurrentInstanceTestType.class));
    }
  }
));
  addComponent(new Button("CurrentInstance when pushing",new Button.ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      log.clear();
      if (getPushConfiguration().getPushMode() != PushMode.AUTOMATIC) {
        log("Can only test with automatic push enabled");
        return;
      }
      final VaadinSession session=getSession();
      new Thread(){
        @Override public void run(){
          CurrentInstance.clearAll();
          session.lock();
          try {
            access(new Runnable(){
              @Override public void run(){
                checkCurrentInstancesBeforeResponse=true;
                markAsDirty();
              }
            }
);
          }
  finally {
            session.unlock();
          }
        }
      }
.start();
    }
  }
));
}
