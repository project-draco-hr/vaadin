{
  Token n;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
    n=jj_consume_token(COMMA);
  label_163:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[239]=jj_gen;
break label_163;
}
jj_consume_token(S);
}
{
if (true) return LexicalUnitImpl.createComma(n.beginLine,n.beginColumn,prev);
}
break;
case DIV:
n=jj_consume_token(DIV);
label_164: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[240]=jj_gen;
break label_164;
}
jj_consume_token(S);
}
{
if (true) return LexicalUnitImpl.createSlash(n.beginLine,n.beginColumn,prev);
}
break;
case ANY:
n=jj_consume_token(ANY);
label_165: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[241]=jj_gen;
break label_165;
}
jj_consume_token(S);
}
{
if (true) return LexicalUnitImpl.createMultiply(n.beginLine,n.beginColumn,prev);
}
break;
case MOD:
n=jj_consume_token(MOD);
label_166: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[242]=jj_gen;
break label_166;
}
jj_consume_token(S);
}
{
if (true) return LexicalUnitImpl.createModulo(n.beginLine,n.beginColumn,prev);
}
break;
case PLUS:
n=jj_consume_token(PLUS);
label_167: while (true) {
jj_consume_token(S);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[243]=jj_gen;
break label_167;
}
}
{
if (true) return LexicalUnitImpl.createAdd(n.beginLine,n.beginColumn,prev);
}
break;
case MINUS:
n=jj_consume_token(MINUS);
label_168: while (true) {
jj_consume_token(S);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[244]=jj_gen;
break label_168;
}
}
{
if (true) return LexicalUnitImpl.createMinus(n.beginLine,n.beginColumn,prev);
}
break;
default :
jj_la1[245]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
