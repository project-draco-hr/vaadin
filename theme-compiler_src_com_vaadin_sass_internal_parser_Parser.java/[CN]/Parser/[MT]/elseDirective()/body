{
  String evaluator="";
  Token n=null;
  String s=null;
  jj_consume_token(ELSE_SYM);
  label_74:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[113]=jj_gen;
break label_74;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IF:
jj_consume_token(IF);
label_75: while (true) {
s=booleanExpressionToken();
evaluator+=s;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
case EQ:
case PLUS:
case MINUS:
case PRECEDES:
case SUCCEEDS:
case DIV:
case ANY:
case LPARAN:
case RPARAN:
case COMPARE:
case OR:
case AND:
case NOT_EQ:
case IDENT:
case NUMBER:
case VARIABLE:
case CONTAINS:
;
break;
default :
jj_la1[114]=jj_gen;
break label_75;
}
}
break;
default :
jj_la1[115]=jj_gen;
;
}
jj_consume_token(LBRACE);
label_76: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[116]=jj_gen;
break label_76;
}
jj_consume_token(S);
}
if (!evaluator.trim().equals("")) {
documentHandler.ifDirective(evaluator);
}
 else {
documentHandler.elseDirective();
}
label_77: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case DEBUG_SYM:
case WARN_SYM:
case EXTEND_SYM:
case CONTENT_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
case KEY_FRAME_SYM:
;
break;
default :
jj_la1[117]=jj_gen;
break label_77;
}
ifContentStatement();
}
jj_consume_token(RBRACE);
label_78: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[118]=jj_gen;
break label_78;
}
jj_consume_token(S);
}
}
