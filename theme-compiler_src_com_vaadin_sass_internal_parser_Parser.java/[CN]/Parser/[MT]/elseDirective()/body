{
  String evaluator="";
  Token n=null;
  jj_consume_token(ELSE_SYM);
  label_69:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[104]=jj_gen;
break label_69;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IF:
jj_consume_token(IF);
label_70: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
case EQ:
case PLUS:
case MINUS:
case PRECEDES:
case SUCCEEDS:
case DIV:
case ANY:
case LPARAN:
case RPARAN:
case COMPARE:
case OR:
case AND:
case NOT_EQ:
case IDENT:
case NUMBER:
case VARIABLE:
;
break;
default :
jj_la1[105]=jj_gen;
break label_70;
}
n=booleanExpressionToken();
if (n != null) evaluator+=n.image;
}
break;
default :
jj_la1[106]=jj_gen;
;
}
jj_consume_token(LBRACE);
label_71: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[107]=jj_gen;
break label_71;
}
jj_consume_token(S);
}
if (!evaluator.trim().equals("")) {
documentHandler.ifDirective(evaluator);
}
 else {
documentHandler.elseDirective();
}
label_72: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case EXTEND_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
;
break;
default :
jj_la1[108]=jj_gen;
break label_72;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case INCLUDE_SYM:
includeDirective();
break;
case MEDIA_SYM:
media();
break;
case EXTEND_SYM:
extendDirective();
break;
case VARIABLE:
variable();
break;
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case IDENT:
case HASH:
styleRuleOrDeclarationOrNestedProperties();
break;
default :
jj_la1[109]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
jj_consume_token(RBRACE);
label_73: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[110]=jj_gen;
break label_73;
}
jj_consume_token(S);
}
}
