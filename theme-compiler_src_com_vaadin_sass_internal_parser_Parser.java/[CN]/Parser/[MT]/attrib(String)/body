{
  int cases=0;
  Token att=null;
  Token val=null;
  String attValue=null;
  jj_consume_token(LBRACKET);
  label_61:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[91]=jj_gen;
break label_61;
}
jj_consume_token(S);
}
att=jj_consume_token(IDENT);
label_62: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[92]=jj_gen;
break label_62;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DASHMATCH:
case CARETMATCH:
case DOLLARMATCH:
case STARMATCH:
case INCLUDES:
case EQ:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EQ:
jj_consume_token(EQ);
cases=1;
break;
case INCLUDES:
jj_consume_token(INCLUDES);
cases=2;
break;
case DASHMATCH:
jj_consume_token(DASHMATCH);
cases=3;
break;
case CARETMATCH:
jj_consume_token(CARETMATCH);
cases=4;
break;
case DOLLARMATCH:
jj_consume_token(DOLLARMATCH);
cases=5;
break;
case STARMATCH:
jj_consume_token(STARMATCH);
cases=6;
break;
default :
jj_la1[93]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_63: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[94]=jj_gen;
break label_63;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENT:
val=jj_consume_token(IDENT);
attValue=val.image;
break;
case STRING:
val=jj_consume_token(STRING);
attValue=val.image;
break;
default :
jj_la1[95]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_64: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[96]=jj_gen;
break label_64;
}
jj_consume_token(S);
}
break;
default :
jj_la1[97]=jj_gen;
;
}
jj_consume_token(RBRACKET);
String name=convertIdent(att.image);
String c;
switch (cases) {
case 0:
c=name;
break;
case 1:
c=name + "=" + attValue;
break;
case 2:
c=name + "~=" + attValue;
break;
case 3:
c=name + "|=" + attValue;
break;
case 4:
c=name + "^=" + attValue;
break;
case 5:
c=name + "$=" + attValue;
break;
case 6:
c=name + "*=" + attValue;
break;
default :
c=null;
}
c="[" + c + "]";
if (pred == null) {
{
if (true) {
return c;
}
}
}
 else {
{
if (true) {
return pred + c;
}
}
}
throw new Error("Missing return statement in function");
}
