{
  char connector=' ';
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
    jj_consume_token(PLUS);
  label_32:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[45]=jj_gen;
break label_32;
}
jj_consume_token(S);
}
{
if (true) return '+';
}
break;
case PRECEDES:
jj_consume_token(PRECEDES);
label_33: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[46]=jj_gen;
break label_33;
}
jj_consume_token(S);
}
{
if (true) return '>';
}
break;
case SIBLING:
jj_consume_token(SIBLING);
label_34: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[47]=jj_gen;
break label_34;
}
jj_consume_token(S);
}
{
if (true) return '~';
}
break;
case S:
jj_consume_token(S);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
jj_consume_token(PLUS);
connector='+';
break;
case PRECEDES:
jj_consume_token(PRECEDES);
connector='>';
break;
case SIBLING:
jj_consume_token(SIBLING);
connector='~';
break;
default :
jj_la1[48]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_35: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[49]=jj_gen;
break label_35;
}
jj_consume_token(S);
}
break;
default :
jj_la1[50]=jj_gen;
;
}
{
if (true) return connector;
}
break;
default :
jj_la1[51]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
