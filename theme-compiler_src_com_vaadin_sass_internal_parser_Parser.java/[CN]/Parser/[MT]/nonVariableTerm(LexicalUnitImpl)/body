{
  LexicalUnitImpl result=null;
  Token n=null;
  char op=' ';
  String varName;
  String s="";
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
case NUMBER:
case PERCENTAGE:
case PT:
case MM:
case CM:
case PC:
case IN:
case PX:
case EMS:
case LEM:
case REM:
case EXS:
case DEG:
case RAD:
case GRAD:
case MS:
case SECOND:
case HZ:
case KHZ:
case DIMEN:
case FUNCTION:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
      op=unaryOperator();
    break;
default :
  jj_la1[233]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NUMBER:
n=jj_consume_token(NUMBER);
result=LexicalUnitImpl.createNumber(n.beginLine,n.beginColumn,prev,number(op,n,0));
break;
case PERCENTAGE:
n=jj_consume_token(PERCENTAGE);
result=LexicalUnitImpl.createPercentage(n.beginLine,n.beginColumn,prev,number(op,n,1));
break;
case PT:
n=jj_consume_token(PT);
result=LexicalUnitImpl.createPT(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case CM:
n=jj_consume_token(CM);
result=LexicalUnitImpl.createCM(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case MM:
n=jj_consume_token(MM);
result=LexicalUnitImpl.createMM(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case PC:
n=jj_consume_token(PC);
result=LexicalUnitImpl.createPC(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case IN:
n=jj_consume_token(IN);
result=LexicalUnitImpl.createIN(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case PX:
n=jj_consume_token(PX);
result=LexicalUnitImpl.createPX(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case EMS:
n=jj_consume_token(EMS);
result=LexicalUnitImpl.createEMS(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case LEM:
n=jj_consume_token(LEM);
result=LexicalUnitImpl.createLEM(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case REM:
n=jj_consume_token(REM);
result=LexicalUnitImpl.createREM(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case EXS:
n=jj_consume_token(EXS);
result=LexicalUnitImpl.createEXS(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case DEG:
n=jj_consume_token(DEG);
result=LexicalUnitImpl.createDEG(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case RAD:
n=jj_consume_token(RAD);
result=LexicalUnitImpl.createRAD(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case GRAD:
n=jj_consume_token(GRAD);
result=LexicalUnitImpl.createGRAD(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case SECOND:
n=jj_consume_token(SECOND);
result=LexicalUnitImpl.createS(n.beginLine,n.beginColumn,prev,number(op,n,1));
break;
case MS:
n=jj_consume_token(MS);
result=LexicalUnitImpl.createMS(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case HZ:
n=jj_consume_token(HZ);
result=LexicalUnitImpl.createHZ(n.beginLine,n.beginColumn,prev,number(op,n,2));
break;
case KHZ:
n=jj_consume_token(KHZ);
result=LexicalUnitImpl.createKHZ(n.beginLine,n.beginColumn,prev,number(op,n,3));
break;
case DIMEN:
n=jj_consume_token(DIMEN);
s=n.image;
int i=0;
while (i < s.length() && (Character.isDigit(s.charAt(i)) || (s.charAt(i) == '.'))) {
i++;
}
result=LexicalUnitImpl.createDimen(n.beginLine,n.beginColumn,prev,Float.valueOf(s.substring(0,i)).floatValue(),s.substring(i));
break;
case FUNCTION:
result=function(op,prev);
break;
default :
jj_la1[234]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
case DOT:
case STRING:
case IDENT:
case URL:
case HASH:
case UNICODERANGE:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
n=jj_consume_token(STRING);
result=LexicalUnitImpl.createString(n.beginLine,n.beginColumn,prev,convertStringIndex(n.image,1,n.image.length() - 1));
break;
case DOT:
case IDENT:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DOT:
jj_consume_token(DOT);
s+=".";
break;
default :
jj_la1[235]=jj_gen;
;
}
n=jj_consume_token(IDENT);
s+=convertIdent(n.image);
if ("inherit".equals(s)) {
result=LexicalUnitImpl.createInherit(n.beginLine,n.beginColumn,prev);
}
 else {
result=LexicalUnitImpl.createIdent(n.beginLine,n.beginColumn,prev,convertIdent(n.image));
}
break;
case HASH:
result=hexcolor(prev);
break;
case URL:
result=url(prev);
break;
case UNICODERANGE:
result=unicode(prev);
break;
default :
jj_la1[236]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[237]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_159: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[238]=jj_gen;
break label_159;
}
jj_consume_token(S);
}
{
if (true) {
return result;
}
}
throw new Error("Missing return statement in function");
}
