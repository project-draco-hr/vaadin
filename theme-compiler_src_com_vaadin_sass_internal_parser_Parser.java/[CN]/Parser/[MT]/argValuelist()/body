{
  ArrayList<LexicalUnitImpl> args=new ArrayList<LexicalUnitImpl>();
  LexicalUnitImpl first=null;
  LexicalUnitImpl next=null;
  LexicalUnitImpl prev=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
case DOT:
case TO:
case THROUGH:
case FROM:
case STRING:
case IDENT:
case NUMBER:
case URL:
case VARIABLE:
case PERCENTAGE:
case PT:
case MM:
case CM:
case PC:
case IN:
case PX:
case EMS:
case LEM:
case REM:
case EXS:
case DEG:
case RAD:
case GRAD:
case MS:
case SECOND:
case HZ:
case KHZ:
case DIMEN:
case HASH:
case UNICODERANGE:
case FUNCTION:
    first=term(null);
  args.add(first);
prev=first;
label_102: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
case DOT:
case COLON:
case TO:
case THROUGH:
case FROM:
case STRING:
case IDENT:
case NUMBER:
case URL:
case VARIABLE:
case PERCENTAGE:
case PT:
case MM:
case CM:
case PC:
case IN:
case PX:
case EMS:
case LEM:
case REM:
case EXS:
case DEG:
case RAD:
case GRAD:
case MS:
case SECOND:
case HZ:
case KHZ:
case DIMEN:
case HASH:
case UNICODERANGE:
case FUNCTION:
  ;
break;
default :
jj_la1[153]=jj_gen;
break label_102;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLON:
jj_consume_token(COLON);
label_103: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[154]=jj_gen;
break label_103;
}
jj_consume_token(S);
}
break;
default :
jj_la1[155]=jj_gen;
;
}
next=term(prev);
prev.setNextLexicalUnit(next);
prev=next;
}
label_104: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[156]=jj_gen;
break label_104;
}
jj_consume_token(COMMA);
label_105: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[157]=jj_gen;
break label_105;
}
jj_consume_token(S);
}
first=term(null);
args.add(first);
prev=first;
label_106: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
case DOT:
case COLON:
case TO:
case THROUGH:
case FROM:
case STRING:
case IDENT:
case NUMBER:
case URL:
case VARIABLE:
case PERCENTAGE:
case PT:
case MM:
case CM:
case PC:
case IN:
case PX:
case EMS:
case LEM:
case REM:
case EXS:
case DEG:
case RAD:
case GRAD:
case MS:
case SECOND:
case HZ:
case KHZ:
case DIMEN:
case HASH:
case UNICODERANGE:
case FUNCTION:
;
break;
default :
jj_la1[158]=jj_gen;
break label_106;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COLON:
jj_consume_token(COLON);
label_107: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[159]=jj_gen;
break label_107;
}
jj_consume_token(S);
}
break;
default :
jj_la1[160]=jj_gen;
;
}
next=term(prev);
prev.setNextLexicalUnit(next);
prev=next;
}
}
break;
default :
jj_la1[161]=jj_gen;
;
}
{
if (true) return args;
}
throw new Error("Missing return statement in function");
}
