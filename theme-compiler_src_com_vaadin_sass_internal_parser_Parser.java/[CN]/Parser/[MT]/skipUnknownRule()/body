{
  Token n;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ATKEYWORD:
    n=jj_consume_token(ATKEYWORD);
  break;
case CDO:
n=jj_consume_token(CDO);
break;
case CHARSET_SYM:
n=jj_consume_token(CHARSET_SYM);
break;
case COMMA:
n=jj_consume_token(COMMA);
break;
case DASHMATCH:
n=jj_consume_token(DASHMATCH);
break;
case FONT_FACE_SYM:
n=jj_consume_token(FONT_FACE_SYM);
break;
case FUNCTION:
n=jj_consume_token(FUNCTION);
break;
case IMPORTANT_SYM:
n=jj_consume_token(IMPORTANT_SYM);
break;
case IMPORT_SYM:
n=jj_consume_token(IMPORT_SYM);
break;
case INCLUDES:
n=jj_consume_token(INCLUDES);
break;
case LBRACE:
n=jj_consume_token(LBRACE);
break;
case MEDIA_SYM:
n=jj_consume_token(MEDIA_SYM);
break;
case NONASCII:
n=jj_consume_token(NONASCII);
break;
case NUMBER:
n=jj_consume_token(NUMBER);
break;
case PAGE_SYM:
n=jj_consume_token(PAGE_SYM);
break;
case PERCENTAGE:
n=jj_consume_token(PERCENTAGE);
break;
case STRING:
n=jj_consume_token(STRING);
break;
case UNICODERANGE:
n=jj_consume_token(UNICODERANGE);
break;
case URL:
n=jj_consume_token(URL);
break;
case SEMICOLON:
n=jj_consume_token(SEMICOLON);
break;
case PLUS:
n=jj_consume_token(PLUS);
break;
case PRECEDES:
n=jj_consume_token(PRECEDES);
break;
case SIBLING:
n=jj_consume_token(SIBLING);
break;
case MINUS:
n=jj_consume_token(MINUS);
break;
case UNKNOWN:
n=jj_consume_token(UNKNOWN);
break;
default :
jj_la1[57]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
String ret;
Locator loc=getLocator();
ret=skipStatement();
if ((ret != null) && (n.image.charAt(0) == '@')) {
documentHandler.unrecognizedRule(ret);
}
 else {
reportWarningSkipText(loc,ret);
}
}
