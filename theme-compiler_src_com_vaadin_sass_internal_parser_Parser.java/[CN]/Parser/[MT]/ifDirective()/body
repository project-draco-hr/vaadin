{
  Token n=null;
  String s=null;
  String evaluator="";
  jj_consume_token(IF_SYM);
  label_66:   while (true) {
    s=booleanExpressionToken();
    evaluator+=s;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
case EQ:
case PLUS:
case MINUS:
case PRECEDES:
case SUCCEEDS:
case DIV:
case ANY:
case LPARAN:
case RPARAN:
case COMPARE:
case OR:
case AND:
case NOT_EQ:
case IDENT:
case NUMBER:
case VARIABLE:
case CONTAINS:
      ;
    break;
default :
  jj_la1[102]=jj_gen;
break label_66;
}
}
jj_consume_token(LBRACE);
label_67: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[103]=jj_gen;
break label_67;
}
jj_consume_token(S);
}
documentHandler.startIfElseDirective();
documentHandler.ifDirective(evaluator);
label_68: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case DEBUG_SYM:
case WARN_SYM:
case EACH_SYM:
case IF_SYM:
case EXTEND_SYM:
case CONTENT_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
case KEY_FRAME_SYM:
;
break;
default :
jj_la1[104]=jj_gen;
break label_68;
}
ifContentStatement();
}
jj_consume_token(RBRACE);
label_69: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[105]=jj_gen;
break label_69;
}
jj_consume_token(S);
}
label_70: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ELSE_SYM:
;
break;
default :
jj_la1[106]=jj_gen;
break label_70;
}
elseDirective();
}
documentHandler.endIfElseDirective();
}
