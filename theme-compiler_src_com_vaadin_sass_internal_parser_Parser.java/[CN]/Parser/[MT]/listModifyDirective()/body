{
  String list=null;
  String remove=null;
  String separator=null;
  String variable=null;
  Token n=null;
  Token type=null;
  n=jj_consume_token(VARIABLE);
  variable=n.image;
  label_108:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[157]=jj_gen;
break label_108;
}
jj_consume_token(S);
}
jj_consume_token(COLON);
label_109: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[158]=jj_gen;
break label_109;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case APPEND:
type=jj_consume_token(APPEND);
break;
case REMOVE:
type=jj_consume_token(REMOVE);
break;
case CONTAINS:
type=jj_consume_token(CONTAINS);
break;
default :
jj_la1[159]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
label_110: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[160]=jj_gen;
break label_110;
}
jj_consume_token(S);
}
list=listModifyDirectiveArgs(0);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RPARAN:
jj_consume_token(RPARAN);
break;
default :
jj_la1[161]=jj_gen;
;
}
jj_consume_token(COMMA);
label_111: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[162]=jj_gen;
break label_111;
}
jj_consume_token(S);
}
remove=listModifyDirectiveArgs(1);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
jj_consume_token(COMMA);
label_112: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[163]=jj_gen;
break label_112;
}
jj_consume_token(S);
}
n=jj_consume_token(IDENT);
separator=n.image;
label_113: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[164]=jj_gen;
break label_113;
}
jj_consume_token(S);
}
break;
default :
jj_la1[165]=jj_gen;
;
}
jj_consume_token(RPARAN);
switch (type.kind) {
case APPEND:
documentHandler.appendDirective(variable,list,remove,separator);
break;
case REMOVE:
documentHandler.removeDirective(variable,list,remove,separator);
break;
case CONTAINS:
if (variable == null) {
variable="$var_" + UUID.randomUUID();
}
documentHandler.containsDirective(variable,list,remove,separator);
break;
default :
break;
}
label_114: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[166]=jj_gen;
break label_114;
}
jj_consume_token(S);
}
jj_consume_token(SEMICOLON);
label_115: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[167]=jj_gen;
break label_115;
}
jj_consume_token(S);
}
}
