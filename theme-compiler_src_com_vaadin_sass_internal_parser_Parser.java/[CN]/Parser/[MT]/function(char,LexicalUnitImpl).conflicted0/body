{
  Token n;
  LexicalUnit params=null;
  n=jj_consume_token(FUNCTION);
  label_168:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[247]=jj_gen;
break label_168;
}
jj_consume_token(S);
}
String fname=convertIdent(n.image);
if ("alpha(".equals(fname)) {
String body=skipStatementUntilSemiColon();
{
if (true) return LexicalUnitImpl.createIdent(n.beginLine,n.beginColumn,null,"alpha(" + body);
}
}
 else if ("expression(".equals(fname)) {
String body=skipStatementUntilSemiColon();
{
if (true) return LexicalUnitImpl.createIdent(n.beginLine,n.beginColumn,null,"expression(" + body);
}
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case MINUS:
case DOT:
case TO:
case THROUGH:
case FROM:
case STRING:
case IDENT:
case NUMBER:
case URL:
case VARIABLE:
case PERCENTAGE:
case PT:
case MM:
case CM:
case PC:
case IN:
case PX:
case EMS:
case LEM:
case REM:
case EXS:
case DEG:
case RAD:
case GRAD:
case MS:
case SECOND:
case HZ:
case KHZ:
case DIMEN:
case HASH:
case UNICODERANGE:
case FUNCTION:
params=expr();
break;
default :
jj_la1[248]=jj_gen;
;
}
jj_consume_token(RPARAN);
if (operator != ' ') {
{
if (true) throw new CSSParseException("invalid operator before a function.",getLocator());
}
}
String f=convertIdent(n.image);
LexicalUnitImpl l=(LexicalUnitImpl)params;
boolean loop=true;
if ("rgb(".equals(f)) {
int i=0;
while (loop && l != null && i < 5) {
switch (i) {
case 0:
case 2:
case 4:
if ((l.getLexicalUnitType() != LexicalUnit.SAC_INTEGER) && (l.getLexicalUnitType() != LexicalUnit.SAC_PERCENTAGE)) {
loop=false;
}
break;
case 1:
case 3:
if (l.getLexicalUnitType() != LexicalUnit.SAC_OPERATOR_COMMA) {
loop=false;
}
break;
default :
{
if (true) throw new ParseException("implementation error");
}
}
if (loop) {
l=(LexicalUnitImpl)l.getNextLexicalUnit();
i++;
}
}
if ((i == 5) && loop && (l == null)) {
{
if (true) return LexicalUnitImpl.createRGBColor(n.beginLine,n.beginColumn,prev,params);
}
}
 else {
if (errorHandler != null) {
String errorText;
Locator loc;
if (i < 5) {
if (params == null) {
loc=new LocatorImpl(this,n.beginLine,n.beginColumn - 1);
errorText="not enough parameters.";
}
 else if (l == null) {
loc=new LocatorImpl(this,n.beginLine,n.beginColumn - 1);
errorText="not enough parameters: " + params.toString();
}
 else {
loc=new LocatorImpl(this,l.getLineNumber(),l.getColumnNumber());
errorText="invalid parameter: " + l.toString();
}
}
 else {
loc=new LocatorImpl(this,l.getLineNumber(),l.getColumnNumber());
errorText="too many parameters: " + l.toString();
}
errorHandler.error(new CSSParseException(errorText,loc));
}
{
if (true) throw new JumpException();
}
}
}
 else if ("counter".equals(f)) {
int i=0;
while (loop && l != null && i < 3) {
switch (i) {
case 0:
case 2:
if (l.getLexicalUnitType() != LexicalUnit.SAC_IDENT) {
loop=false;
}
break;
case 1:
if (l.getLexicalUnitType() != LexicalUnit.SAC_OPERATOR_COMMA) {
loop=false;
}
break;
default :
{
if (true) throw new ParseException("implementation error");
}
}
l=(LexicalUnitImpl)l.getNextLexicalUnit();
i++;
}
if (((i == 1) || (i == 3)) && loop && (l == null)) {
{
if (true) return LexicalUnitImpl.createCounter(n.beginLine,n.beginColumn,prev,params);
}
}
}
 else if ("counters(".equals(f)) {
int i=0;
while (loop && l != null && i < 5) {
switch (i) {
case 0:
case 4:
if (l.getLexicalUnitType() != LexicalUnit.SAC_IDENT) {
loop=false;
}
break;
case 2:
if (l.getLexicalUnitType() != LexicalUnit.SAC_STRING_VALUE) {
loop=false;
}
break;
case 1:
case 3:
if (l.getLexicalUnitType() != LexicalUnit.SAC_OPERATOR_COMMA) {
loop=false;
}
break;
default :
{
if (true) throw new ParseException("implementation error");
}
}
l=(LexicalUnitImpl)l.getNextLexicalUnit();
i++;
}
if (((i == 3) || (i == 5)) && loop && (l == null)) {
{
if (true) return LexicalUnitImpl.createCounters(n.beginLine,n.beginColumn,prev,params);
}
}
}
 else if ("attr(".equals(f)) {
if ((l != null) && (l.getNextLexicalUnit() == null) && (l.getLexicalUnitType() == LexicalUnit.SAC_IDENT)) {
{
if (true) return LexicalUnitImpl.createAttr(l.getLineNumber(),l.getColumnNumber(),prev,l.getStringValue());
}
}
}
 else if ("rect(".equals(f)) {
int i=0;
while (loop && l != null && i < 7) {
switch (i) {
case 0:
case 2:
case 4:
case 6:
switch (l.getLexicalUnitType()) {
case LexicalUnit.SAC_INTEGER:
if (l.getIntegerValue() != 0) {
loop=false;
}
break;
case LexicalUnit.SAC_IDENT:
if (!l.getStringValue().equals("auto")) {
loop=false;
}
break;
case LexicalUnit.SAC_EM:
case LexicalUnit.SAC_EX:
case LexicalUnit.SAC_PIXEL:
case LexicalUnit.SAC_CENTIMETER:
case LexicalUnit.SAC_MILLIMETER:
case LexicalUnit.SAC_INCH:
case LexicalUnit.SAC_POINT:
case LexicalUnit.SAC_PICA:
break;
default :
loop=false;
}
break;
case 1:
case 3:
case 5:
if (l.getLexicalUnitType() != LexicalUnit.SAC_OPERATOR_COMMA) {
loop=false;
}
break;
default :
{
if (true) throw new ParseException("implementation error");
}
}
l=(LexicalUnitImpl)l.getNextLexicalUnit();
i++;
}
if ((i == 7) && loop && (l == null)) {
{
if (true) return LexicalUnitImpl.createRect(n.beginLine,n.beginColumn,prev,params);
}
}
}
{
if (true) return LexicalUnitImpl.createFunction(n.beginLine,n.beginColumn,prev,f.substring(0,f.length() - 1),params);
}
throw new Error("Missing return statement in function");
}
