{
  Token var;
  ArrayList<String> list=null;
  String listVariable=null;
  jj_consume_token(EACH_SYM);
  label_82:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
      ;
    break;
default :
  jj_la1[127]=jj_gen;
break label_82;
}
jj_consume_token(S);
}
var=jj_consume_token(VARIABLE);
label_83: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[128]=jj_gen;
break label_83;
}
jj_consume_token(S);
}
jj_consume_token(EACH_IN);
label_84: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[129]=jj_gen;
break label_84;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENT:
list=stringList();
documentHandler.startEachDirective(var.image,list);
break;
case VARIABLE:
listVariable=variableName();
documentHandler.startEachDirective(var.image,listVariable);
break;
default :
jj_la1[130]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(LBRACE);
label_85: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[131]=jj_gen;
break label_85;
}
jj_consume_token(S);
}
label_86: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case DEBUG_SYM:
case WARN_SYM:
case EACH_SYM:
case IF_SYM:
case EXTEND_SYM:
case CONTENT_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
case KEY_FRAME_SYM:
case ATKEYWORD:
;
break;
default :
jj_la1[132]=jj_gen;
break label_86;
}
ifContentStatement();
}
jj_consume_token(RBRACE);
label_87: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[133]=jj_gen;
break label_87;
}
jj_consume_token(S);
}
documentHandler.endEachDirective();
}
