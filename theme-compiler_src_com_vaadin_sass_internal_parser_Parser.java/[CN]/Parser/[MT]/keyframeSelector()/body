{
  Token n;
  String selector="";
  boolean start=false;
  try {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case FROM:
      n=jj_consume_token(FROM);
    break;
case TO:
  n=jj_consume_token(TO);
break;
case PERCENTAGE:
n=jj_consume_token(PERCENTAGE);
break;
default :
jj_la1[27]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
selector+=n.image;
label_19: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[28]=jj_gen;
break label_19;
}
jj_consume_token(S);
}
label_20: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case COMMA:
;
break;
default :
jj_la1[29]=jj_gen;
break label_20;
}
jj_consume_token(COMMA);
label_21: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[30]=jj_gen;
break label_21;
}
jj_consume_token(S);
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case FROM:
n=jj_consume_token(FROM);
break;
case TO:
n=jj_consume_token(TO);
break;
case PERCENTAGE:
n=jj_consume_token(PERCENTAGE);
break;
default :
jj_la1[31]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
selector+=(", " + n.image);
label_22: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[32]=jj_gen;
break label_22;
}
jj_consume_token(S);
}
}
jj_consume_token(LBRACE);
label_23: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[33]=jj_gen;
break label_23;
}
jj_consume_token(S);
}
start=true;
documentHandler.startKeyframeSelector(selector);
label_24: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case DEBUG_SYM:
case WARN_SYM:
case EACH_SYM:
case IF_SYM:
case EXTEND_SYM:
case CONTENT_SYM:
case MICROSOFT_RULE:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
case KEY_FRAME_SYM:
case ATKEYWORD:
;
break;
default :
jj_la1[34]=jj_gen;
break label_24;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case PLUS:
case PRECEDES:
case SIBLING:
case LBRACKET:
case ANY:
case PARENT:
case DOT:
case COLON:
case INTERPOLATION:
case INCLUDE_SYM:
case DEBUG_SYM:
case WARN_SYM:
case EACH_SYM:
case IF_SYM:
case EXTEND_SYM:
case CONTENT_SYM:
case IDENT:
case VARIABLE:
case HASH:
case MEDIA_SYM:
case KEY_FRAME_SYM:
case ATKEYWORD:
ifContentStatement();
break;
case MICROSOFT_RULE:
microsoftExtension();
break;
default :
jj_la1[35]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
jj_consume_token(RBRACE);
label_25: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case S:
;
break;
default :
jj_la1[36]=jj_gen;
break label_25;
}
jj_consume_token(S);
}
}
 catch (ThrowedParseException e) {
if (errorHandler != null) {
LocatorImpl li=new LocatorImpl(this,e.e.currentToken.next.beginLine,e.e.currentToken.next.beginColumn - 1);
reportError(li,e.e);
}
}
catch (ParseException e) {
reportError(getLocator(),e);
skipStatement();
}
catch (TokenMgrError e) {
reportWarningSkipText(getLocator(),skipStatement());
}
 finally {
if (start) {
documentHandler.endKeyframeSelector();
}
}
}
