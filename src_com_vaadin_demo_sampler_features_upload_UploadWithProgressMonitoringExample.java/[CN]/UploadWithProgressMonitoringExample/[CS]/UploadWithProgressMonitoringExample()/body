{
  setMargin(true,false,false,false);
  setSpacing(true);
  addComponent(new Label("Upload a file and we'll count the number of line break charaters found in it."));
  upload.setImmediate(true);
  upload.setButtonCaption("Upload File");
  addComponent(upload);
  CheckBox handBrake=new CheckBox("Simulate slow server");
  handBrake.setValue(true);
  counter.setSlow(true);
  handBrake.setDescription("Sleep for 100ms after each kilobyte to simulate slower processing/bandwidth. This is to show progress indicator even with rather small files.");
  handBrake.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      counter.setSlow(event.getButton().booleanValue());
    }
  }
);
  final Button cancelProcessing=new Button("Cancel processing");
  cancelProcessing.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      upload.interruptUpload();
    }
  }
);
  cancelProcessing.setEnabled(false);
  cancelProcessing.setStyleName("small");
  addComponent(cancelProcessing);
  handBrake.setImmediate(true);
  addComponent(handBrake);
  Panel p=new Panel("Status");
  p.setSizeUndefined();
  FormLayout l=new FormLayout();
  l.setMargin(true);
  p.setContent(l);
  state.setCaption("Current state");
  state.setValue("Idle");
  l.addComponent(state);
  fileName.setCaption("File name");
  l.addComponent(fileName);
  result.setCaption("Line breaks counted");
  l.addComponent(result);
  pi.setCaption("Progress");
  pi.setVisible(false);
  l.addComponent(pi);
  textualProgress.setVisible(false);
  l.addComponent(textualProgress);
  addComponent(p);
  upload.addListener(new Upload.StartedListener(){
    public void uploadStarted(    StartedEvent event){
      pi.setValue(0f);
      pi.setVisible(true);
      pi.setPollingInterval(500);
      textualProgress.setVisible(true);
      state.setValue("Uploading");
      fileName.setValue(event.getFilename());
      cancelProcessing.setEnabled(true);
    }
  }
);
  upload.addListener(new Upload.ProgressListener(){
    public void updateProgress(    long readBytes,    long contentLength){
      pi.setValue(new Float(readBytes / (float)contentLength));
      textualProgress.setValue("Processed " + readBytes + " bytes of "+ contentLength);
      result.setValue(counter.getLineBreakCount() + " (counting...)");
    }
  }
);
  upload.addListener(new Upload.SucceededListener(){
    public void uploadSucceeded(    SucceededEvent event){
      result.setValue(counter.getLineBreakCount() + " (total)");
    }
  }
);
  upload.addListener(new Upload.FailedListener(){
    public void uploadFailed(    FailedEvent event){
      result.setValue(counter.getLineBreakCount() + " (counting interrupted at " + Math.round(100 * (Float)pi.getValue())+ "%)");
    }
  }
);
  upload.addListener(new Upload.FinishedListener(){
    public void uploadFinished(    FinishedEvent event){
      state.setValue("Idle");
      pi.setVisible(false);
      textualProgress.setVisible(false);
      cancelProcessing.setEnabled(false);
    }
  }
);
}
