{
  this.connection=connection;
  connection.addHandler(ApplicationStoppedEvent.TYPE,new ApplicationStoppedHandler(){
    @Override public void onApplicationStopped(    ApplicationStoppedEvent event){
      if (state == State.DISCONNECT_PENDING || state == State.DISCONNECTED) {
        return;
      }
      disconnect(new Command(){
        @Override public void execute(){
        }
      }
);
    }
  }
);
  config=createConfig();
  String debugParameter=Location.getParameter("debug");
  if ("push".equals(debugParameter)) {
    config.setStringValue("logLevel","debug");
  }
  for (  String param : pushConfiguration.parameters.keySet()) {
    String value=pushConfiguration.parameters.get(param);
    if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
      config.setBooleanValue(param,value.equalsIgnoreCase("true"));
    }
 else {
      config.setStringValue(param,value);
    }
  }
  if (pushConfiguration.pushUrl != null) {
    url=pushConfiguration.pushUrl;
  }
 else {
    url=ApplicationConstants.APP_PROTOCOL_PREFIX + ApplicationConstants.PUSH_PATH;
  }
  runWhenAtmosphereLoaded(new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          connect();
        }
      }
);
    }
  }
);
}
