{
  CheckBox cb=new CheckBox("Switch Selects ReadOnly",false);
  cb.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      for (Iterator<Component> it=layout.getComponentIterator(); it.hasNext(); ) {
        Component c=it.next();
        if (c instanceof AbstractSelect) {
          c.setReadOnly(!c.isReadOnly());
        }
      }
    }
  }
);
  CheckBox cb2=new CheckBox("Switch Selects Enabled",true);
  cb2.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      for (Iterator<Component> it=layout.getComponentIterator(); it.hasNext(); ) {
        Component c=it.next();
        if (c instanceof AbstractSelect) {
          boolean enabled=!c.isEnabled();
          c.setEnabled(enabled);
          c.setCaption(c.getCaption().replace((enabled ? "disabled" : "enabled"),(enabled ? "enabled" : "disabled")));
        }
      }
    }
  }
);
  HorizontalLayout cbs=new HorizontalLayout();
  cbs.setSpacing(true);
  cbs.addComponent(cb);
  cbs.addComponent(cb2);
  addComponent(cbs);
  layout=new HorizontalLayout();
  layout.setSpacing(true);
  layout.addComponent(createSelect(new ListSelect("List Select, enabled"),true));
  layout.addComponent(createSelect(new ListSelect("List Select, disabled"),false));
  layout.addComponent(createSelect(new NativeSelect("Native Select, enabled"),true));
  layout.addComponent(createSelect(new NativeSelect("Native Select, disabled"),false));
  layout.addComponent(createSelect(new OptionGroup("Option Group, enabled"),true));
  layout.addComponent(createSelect(new OptionGroup("Option Group, disabled"),false));
  layout.addComponent(createSelect(new TwinColSelect("Twin Column Select, enabled"),true));
  layout.addComponent(createSelect(new TwinColSelect("Twin Column Select, disabled"),false));
  addTestComponent(layout);
}
