{
  if (!ServletPortletHelper.isUIDLRequest(request)) {
    return false;
  }
  UI uI=session.getService().findUI(request);
  if (uI == null) {
    getLogger().warning("Could not find the requested UI in session");
    return true;
  }
  checkWidgetsetVersion(request);
  String requestThemeName=request.getParameter("theme");
  ClientConnector highlightedConnector;
  boolean repaintAll;
  repaintAll=(request.getParameter(ApplicationConstants.URL_PARAMETER_REPAINT_ALL) != null);
  boolean analyzeLayouts=false;
  if (repaintAll) {
    analyzeLayouts=(request.getParameter(ApplicationConstants.PARAM_ANALYZE_LAYOUTS) != null);
    String pid=request.getParameter(ApplicationConstants.PARAM_HIGHLIGHT_CONNECTOR);
    if (pid != null) {
      highlightedConnector=uI.getConnectorTracker().getConnector(pid);
      highlightConnector(highlightedConnector);
    }
  }
  StringWriter stringWriter=new StringWriter();
  try {
    rpcHandler.handleRpc(uI,request.getReader(),request);
    if (repaintAll) {
      session.getCommunicationManager().repaintAll(uI);
    }
    writeUidl(request,response,uI,stringWriter,repaintAll,analyzeLayouts);
    postHandleRequest(uI);
  }
 catch (  JSONException e) {
    getLogger().log(Level.SEVERE,"Error writing JSON to response",e);
    criticalNotifier.criticalNotification(request,response,null,null,null,null);
    return true;
  }
catch (  InvalidUIDLSecurityKeyException e) {
    getLogger().log(Level.WARNING,"Invalid security key received from {}",request.getRemoteHost());
    criticalNotifier.criticalNotification(request,response,null,null,null,null);
    return true;
  }
 finally {
    stringWriter.close();
    requestThemeName=null;
  }
  return UIInitHandler.commitJsonResponse(request,response,stringWriter.toString());
}
