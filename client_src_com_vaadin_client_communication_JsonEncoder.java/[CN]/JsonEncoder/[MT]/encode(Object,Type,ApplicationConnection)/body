{
  if (null == value) {
    return Json.createNull();
  }
 else   if (value instanceof JsonValue) {
    return (JsonValue)value;
  }
 else   if (value instanceof String[]) {
    String[] array=(String[])value;
    JsonArray jsonArray=Json.createArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.set(i,array[i]);
    }
    return jsonArray;
  }
 else   if (value instanceof String) {
    return Json.create((String)value);
  }
 else   if (value instanceof Boolean) {
    return Json.create((Boolean)value);
  }
 else   if (value instanceof Number) {
    return Json.create(((Number)value).doubleValue());
  }
 else   if (value instanceof Character) {
    return Json.create(String.valueOf(value));
  }
 else   if (value instanceof Object[] && type == null) {
    return encodeLegacyObjectArray((Object[])value,connection);
  }
 else   if (value instanceof Enum) {
    return encodeEnum((Enum<?>)value,connection);
  }
 else   if (value instanceof Map) {
    return encodeMap((Map)value,type,connection);
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    return Json.create(connector.getConnectorId());
  }
 else   if (value instanceof Collection) {
    return encodeCollection((Collection)value,type,connection);
  }
 else   if (value instanceof UidlValue) {
    return encodeVariableChange((UidlValue)value,connection);
  }
 else {
    JSONSerializer<Object> serializer=null;
    if (type != null) {
      serializer=(JSONSerializer<Object>)type.findSerializer();
      if (serializer != null) {
        return serializer.serialize(value,connection);
      }
    }
    String transportType=getTransportType(value);
    if (transportType != null) {
      return Json.create(String.valueOf(value));
    }
 else     if (type != null) {
      try {
        JsArrayObject<Property> properties=type.getPropertiesAsArray();
        JsonObject jsonObject=Json.createObject();
        int size=properties.size();
        for (int i=0; i < size; i++) {
          Property property=properties.get(i);
          Object propertyValue=property.getValue(value);
          Type propertyType=property.getType();
          JsonValue encodedPropertyValue=encode(propertyValue,propertyType,connection);
          jsonObject.put(property.getName(),encodedPropertyValue);
        }
        return jsonObject;
      }
 catch (      NoDataException e) {
        throw new RuntimeException("Can not encode " + type.getSignature(),e);
      }
    }
 else {
      throw new RuntimeException("Can't encode " + value.getClass() + " without type information");
    }
  }
}
