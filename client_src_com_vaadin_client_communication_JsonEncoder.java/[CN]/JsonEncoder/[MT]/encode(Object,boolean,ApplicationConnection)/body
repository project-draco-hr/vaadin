{
  if (null == value) {
    return JSONNull.getInstance();
  }
 else   if (value instanceof JSONValue) {
    return (JSONValue)value;
  }
 else   if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.set(i,new JSONString(array[i]));
    }
    return jsonArray;
  }
 else   if (value instanceof String) {
    return new JSONString((String)value);
  }
 else   if (value instanceof Boolean) {
    return JSONBoolean.getInstance((Boolean)value);
  }
 else   if (value instanceof Byte) {
    return new JSONNumber((Byte)value);
  }
 else   if (value instanceof Character) {
    return new JSONString(String.valueOf(value));
  }
 else   if (value instanceof Object[]) {
    return encodeObjectArray((Object[])value,restrictToInternalTypes,connection);
  }
 else   if (value instanceof Enum) {
    return encodeEnum((Enum<?>)value,connection);
  }
 else   if (value instanceof Map) {
    return encodeMap((Map)value,restrictToInternalTypes,connection);
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    return new JSONString(connector.getConnectorId());
  }
 else   if (value instanceof Collection) {
    return encodeCollection((Collection)value,restrictToInternalTypes,connection);
  }
 else   if (value instanceof UidlValue) {
    return encodeVariableChange((UidlValue)value,connection);
  }
 else {
    String transportType=getTransportType(value);
    if (transportType != null) {
      return new JSONString(String.valueOf(value));
    }
 else {
      Type type=new Type(value.getClass());
      JSONSerializer<Object> serializer=(JSONSerializer<Object>)type.findSerializer();
      if (serializer != null) {
        return serializer.serialize(value,connection);
      }
 else {
        try {
          Collection<Property> properties=type.getProperties();
          JSONObject jsonObject=new JSONObject();
          for (          Property property : properties) {
            Object propertyValue=property.getValue(value);
            JSONValue encodedPropertyValue=encode(propertyValue,restrictToInternalTypes,connection);
            jsonObject.put(property.getName(),encodedPropertyValue);
          }
          return jsonObject;
        }
 catch (        NoDataException e) {
          throw new RuntimeException("Can not encode " + type.getSignature(),e);
        }
      }
    }
  }
}
