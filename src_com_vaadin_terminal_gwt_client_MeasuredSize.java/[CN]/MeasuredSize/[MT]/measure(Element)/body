{
  boolean heightChanged=false;
  boolean widthChanged=false;
  ComputedStyle computedStyle=new ComputedStyle(element);
  int[] paddings=computedStyle.getPadding();
  if (!heightChanged && hasHeightChanged(this.paddings,paddings)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.paddings,paddings)) {
    widthChanged=true;
  }
  this.paddings=paddings;
  int[] margins=computedStyle.getMargin();
  if (!heightChanged && hasHeightChanged(this.margins,margins)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.margins,margins)) {
    widthChanged=true;
  }
  this.margins=margins;
  int[] borders=computedStyle.getBorder();
  if (!heightChanged && hasHeightChanged(this.borders,borders)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.borders,borders)) {
    widthChanged=true;
  }
  this.borders=borders;
  int requiredHeight=Util.getRequiredHeight(element);
  int marginHeight=sumHeights(margins);
  if (setOuterHeight(requiredHeight + marginHeight)) {
    heightChanged=true;
  }
  int requiredWidth=Util.getRequiredWidth(element);
  int marginWidth=sumWidths(margins);
  if (setOuterWidth(requiredWidth + marginWidth)) {
    widthChanged=true;
  }
  return new MeasureResult(widthChanged,heightChanged);
}
