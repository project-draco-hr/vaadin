{
  Widget widget=paintable.getWidgetForPaintable();
  ComputedStyle computedStyle=new ComputedStyle(widget.getElement());
  int[] paddings=computedStyle.getPadding();
  if (!heightChanged && hasHeightChanged(this.paddings,paddings)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.paddings,paddings)) {
    widthChanged=true;
  }
  this.paddings=paddings;
  int[] margins=computedStyle.getMargin();
  if (!heightChanged && hasHeightChanged(this.margins,margins)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.margins,margins)) {
    widthChanged=true;
  }
  this.margins=margins;
  int[] borders=computedStyle.getBorder();
  if (!heightChanged && hasHeightChanged(this.borders,borders)) {
    heightChanged=true;
  }
  if (!widthChanged && hasWidthChanged(this.borders,borders)) {
    widthChanged=true;
  }
  this.borders=borders;
  int requiredHeight=Util.getRequiredHeight(widget);
  int marginHeight=sumHeights(margins);
  setOuterHeight(requiredHeight + marginHeight);
  int requiredWidth=Util.getRequiredWidth(widget);
  int marginWidth=sumWidths(margins);
  setOuterWidth(requiredWidth + marginWidth);
  for (  Entry<Element,int[]> entry : dependencySizes.entrySet()) {
    Element element=entry.getKey();
    int[] sizes=entry.getValue();
    int elementWidth=element.getOffsetWidth();
    if (elementWidth != sizes[0]) {
      sizes[0]=elementWidth;
      widthChanged=true;
    }
    int elementHeight=element.getOffsetHeight();
    if (elementHeight != sizes[1]) {
      sizes[1]=elementHeight;
      heightChanged=true;
    }
  }
}
