{
  detachedConnectors.add(connector.getConnectorId());
  Profiler.enter("ApplicationConnection recursivelyDetach reset state");
  try {
    Profiler.enter("ApplicationConnection recursivelyDetach reset state - getStateType");
    Type stateType=AbstractConnector.getStateType(connector);
    Profiler.leave("ApplicationConnection recursivelyDetach reset state - getStateType");
    Profiler.enter("ApplicationConnection recursivelyDetach reset state - createInstance");
    Object defaultState=stateType.createInstance();
    Profiler.leave("ApplicationConnection recursivelyDetach reset state - createInstance");
    if (connector instanceof AbstractConnector) {
      replaceState((AbstractConnector)connector,defaultState);
    }
 else {
      SharedState state=connector.getState();
      Profiler.enter("ApplicationConnection recursivelyDetach reset state - properties");
      JsArrayObject<Property> properties=stateType.getPropertiesAsArray();
      int size=properties.size();
      for (int i=0; i < size; i++) {
        Property property=properties.get(i);
        property.setValue(state,property.getValue(defaultState));
      }
      Profiler.leave("ApplicationConnection recursivelyDetach reset state - properties");
    }
  }
 catch (  NoDataException e) {
    throw new RuntimeException("Can't reset state for " + Util.getConnectorString(connector),e);
  }
 finally {
    Profiler.leave("ApplicationConnection recursivelyDetach reset state");
  }
  Profiler.enter("ApplicationConnection recursivelyDetach perform detach");
  for (  ServerConnector child : connector.getChildren()) {
    if (child.getParent() != connector) {
      continue;
    }
    recursivelyDetach(child,events,detachedConnectors);
  }
  Profiler.leave("ApplicationConnection recursivelyDetach perform detach");
  Profiler.enter("ApplicationConnection recursivelyDetach clear children and parent");
  connector.setChildren(Collections.<ServerConnector>emptyList());
  connector.setParent(null);
  Profiler.leave("ApplicationConnection recursivelyDetach clear children and parent");
  Profiler.enter("ApplicationConnection recursivelyDetach create hierarchy event");
  if (connector instanceof HasComponentsConnector) {
    HasComponentsConnector ccc=(HasComponentsConnector)connector;
    List<ComponentConnector> oldChildren=ccc.getChildComponents();
    if (!oldChildren.isEmpty()) {
      ccc.setChildComponents(Collections.<ComponentConnector>emptyList());
      ConnectorHierarchyChangeEvent event=GWT.create(ConnectorHierarchyChangeEvent.class);
      event.setConnector(connector);
      event.setOldChildren(oldChildren);
      events.add(event);
    }
  }
  Profiler.leave("ApplicationConnection recursivelyDetach create hierarchy event");
}
