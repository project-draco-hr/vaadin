{
  UI w=getLayout().getUI();
  HorizontalSortableCssLayoutWithWrappers verticalSortableCssLayoutWithWrappers=new HorizontalSortableCssLayoutWithWrappers();
  w.addWindow(verticalSortableCssLayoutWithWrappers);
  verticalSortableCssLayoutWithWrappers.setPositionX(200);
  verticalSortableCssLayoutWithWrappers.setPositionY(40);
  Label l;
  l=new Label("Drag me");
  DragAndDropWrapper dragAndDropWrapper=new DragAndDropWrapper(l);
  dragAndDropWrapper.setDragStartMode(DragStartMode.COMPONENT);
  dragAndDropWrapper.setWidth("100px");
  dragAndDropWrapper.setHeight("100px");
  getLayout().addComponent(dragAndDropWrapper);
  l=new Label("Drag me too");
  dragAndDropWrapper=new DragAndDropWrapper(l);
  dragAndDropWrapper.setDragStartMode(DragStartMode.WRAPPER);
  dragAndDropWrapper.setWidth("100px");
  dragAndDropWrapper.setHeight("100px");
  getLayout().addComponent(dragAndDropWrapper);
  final CssLayout cssLayout=new CssLayout();
  cssLayout.setHeight("300px");
  dragAndDropWrapper2=new DragAndDropWrapper(cssLayout);
  dragAndDropWrapper2.setCaption("Drop here or sort with dd (wrapper(csslayout(n*wrapper(label))))");
  dh=new DropHandler(){
    @Override public AcceptCriterion getAcceptCriterion(){
      return AcceptAll.get();
    }
    @Override public void drop(    DragAndDropEvent dropEvent){
      if (dropEvent.getTransferable() instanceof WrapperTransferable) {
        WrapperTransferable transferable=(WrapperTransferable)dropEvent.getTransferable();
        Component sourceComponent=transferable.getSourceComponent();
        Component draggedComponent=transferable.getDraggedComponent();
        DropTarget target=dropEvent.getTargetDetails().getTarget();
        WrappedLabel wrappedLabel=new WrappedLabel(draggedComponent.toString());
        if (target instanceof WrappedLabel) {
          int i=1;
          Iterator<Component> componentIterator=cssLayout.getComponentIterator();
          Component next=componentIterator.next();
          while (next != target && componentIterator.hasNext()) {
            if (next != sourceComponent) {
              i++;
            }
            next=componentIterator.next();
          }
          if (sourceComponent instanceof WrappedLabel) {
            cssLayout.removeComponent(sourceComponent);
            wrappedLabel=(WrappedLabel)sourceComponent;
          }
          if (dropEvent.getTargetDetails().getData("verticalLocation").equals("TOP")) {
            i--;
            if (i < 0) {
              i=0;
            }
          }
          cssLayout.addComponent(wrappedLabel,i);
        }
 else {
          cssLayout.addComponent(wrappedLabel);
        }
      }
 else {
        String data=(String)dropEvent.getTransferable().getData("text/plain");
        if (data == null || "".equals(data)) {
          data="-- no Text --";
        }
        cssLayout.addComponent(new WrappedLabel(data));
      }
    }
  }
;
  dragAndDropWrapper2.setDropHandler(dh);
  getLayout().addComponent(dragAndDropWrapper2);
}
