{
  tq.consumeWhitespace();
  String subQuery=consumeSubQuery();
  Evaluator rootEval;
  Evaluator currentEval;
  Evaluator newEval=parse(subQuery);
  boolean replaceRightMost=false;
  if (evals.size() == 1) {
    rootEval=currentEval=evals.get(0);
    if (rootEval instanceof CombiningEvaluator.Or && combinator != ',') {
      currentEval=((CombiningEvaluator.Or)currentEval).rightMostEvaluator();
      replaceRightMost=true;
    }
  }
 else {
    rootEval=currentEval=new CombiningEvaluator.And(evals);
  }
  evals.clear();
  if (combinator == '>')   currentEval=new CombiningEvaluator.And(newEval,new StructuralEvaluator.ImmediateParent(currentEval));
 else   if (combinator == ' ')   currentEval=new CombiningEvaluator.And(newEval,new StructuralEvaluator.Parent(currentEval));
 else   if (combinator == '+')   currentEval=new CombiningEvaluator.And(newEval,new StructuralEvaluator.ImmediatePreviousSibling(currentEval));
 else   if (combinator == '~')   currentEval=new CombiningEvaluator.And(newEval,new StructuralEvaluator.PreviousSibling(currentEval));
 else   if (combinator == ',') {
    CombiningEvaluator.Or or;
    if (currentEval instanceof CombiningEvaluator.Or) {
      or=(CombiningEvaluator.Or)currentEval;
      or.add(newEval);
    }
 else {
      or=new CombiningEvaluator.Or();
      or.add(currentEval);
      or.add(newEval);
    }
    currentEval=or;
  }
 else   throw new Selector.SelectorParseException("Unknown combinator: " + combinator);
  if (replaceRightMost)   ((CombiningEvaluator.Or)rootEval).replaceRightMostEvaluator(currentEval);
 else   rootEval=currentEval;
  evals.add(rootEval);
}
