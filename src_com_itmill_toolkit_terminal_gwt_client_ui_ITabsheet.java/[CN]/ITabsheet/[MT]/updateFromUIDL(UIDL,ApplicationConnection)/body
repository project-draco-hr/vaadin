{
  rendering=true;
  super.updateFromUIDL(uidl,client);
  if (cachedUpdate) {
    return;
  }
  if (uidl.hasAttribute("style")) {
    final String[] styles=uidl.getStringAttribute("style").split(" ");
    final String contentBaseClass=CLASSNAME + "-content";
    String contentClass=contentBaseClass;
    final String decoBaseClass=CLASSNAME + "-deco";
    String decoClass=decoBaseClass;
    for (int i=0; i < styles.length; i++) {
      tb.addStyleDependentName(styles[i]);
      contentClass+=" " + contentBaseClass + "-"+ styles[i];
      decoClass+=" " + decoBaseClass + "-"+ styles[i];
    }
    DOM.setElementProperty(contentNode,"className",contentClass);
    DOM.setElementProperty(deco,"className",decoClass);
  }
 else {
    tb.setStyleName(CLASSNAME + "-tabs");
    DOM.setElementProperty(contentNode,"className",CLASSNAME + "-content");
    DOM.setElementProperty(deco,"className",CLASSNAME + "-deco");
  }
  if (uidl.hasAttribute("hidetabs")) {
    tb.setVisible(false);
    addStyleName(CLASSNAME + "-hidetabs");
  }
 else {
    tb.setVisible(true);
    removeStyleName(CLASSNAME + "-hidetabs");
  }
  if (!isDynamicWidth()) {
    DOM.setStyleAttribute(tabs,"width","1px");
    DOM.setStyleAttribute(tabs,"overflow","hidden");
  }
 else {
    showAllTabs();
    DOM.setStyleAttribute(tabs,"width","");
    DOM.setStyleAttribute(tabs,"overflow","visible");
    updateDynamicWidth();
  }
  if (!isDynamicHeight()) {
    updateContentNodeHeight();
    updateOpenTabSize();
  }
  iLayout();
  try {
    client.handleComponentRelativeSize(tp.getWidget(tp.getVisibleWidget()));
  }
 catch (  Exception e) {
  }
  renderInformation.updateSize(getElement());
  waitingForResponse=false;
  rendering=false;
}
