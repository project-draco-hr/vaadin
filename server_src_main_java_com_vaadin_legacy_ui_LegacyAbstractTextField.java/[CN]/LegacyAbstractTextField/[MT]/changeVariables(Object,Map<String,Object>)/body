{
  changingVariables=true;
  try {
    String newHeight=(String)variables.get("height");
    if (newHeight != null) {
      setHeight(newHeight);
    }
    String newWidth=(String)variables.get("width");
    if (newWidth != null) {
      setWidth(newWidth);
    }
    if (variables.containsKey(LegacyTextFieldConstants.VAR_CURSOR)) {
      Integer object=(Integer)variables.get(LegacyTextFieldConstants.VAR_CURSOR);
      lastKnownCursorPosition=object.intValue();
    }
    if (variables.containsKey(LegacyTextFieldConstants.VAR_CUR_TEXT)) {
      handleInputEventTextChange(variables);
    }
    if (variables.containsKey("text") && !isReadOnly()) {
      String newValue=(String)variables.get("text");
      if (getMaxLength() != -1 && newValue.length() > getMaxLength()) {
        newValue=newValue.substring(0,getMaxLength());
      }
      final String oldValue=getValue();
      if (newValue != null && (oldValue == null || isNullSettingAllowed()) && newValue.equals(getNullRepresentation())) {
        newValue=null;
      }
      if (newValue != oldValue && (newValue == null || !newValue.equals(oldValue))) {
        boolean wasModified=isModified();
        setValue(newValue,true);
        if (wasModified != isModified()) {
          markAsDirty();
        }
      }
    }
    firePendingTextChangeEvent();
    if (variables.containsKey(FocusEvent.EVENT_ID)) {
      fireEvent(new FocusEvent(this));
    }
    if (variables.containsKey(BlurEvent.EVENT_ID)) {
      fireEvent(new BlurEvent(this));
    }
  }
  finally {
    changingVariables=false;
  }
}
