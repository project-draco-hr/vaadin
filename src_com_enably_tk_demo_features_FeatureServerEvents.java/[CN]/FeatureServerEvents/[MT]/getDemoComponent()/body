{
  OrderedLayout l=new OrderedLayout();
  l.addComponent(new Label("<h3>Multiplayer GO-Game</h3><p>For demonstration, see GO-Game example application. The application implements a " + "multi-player board game, where the moved by one player are immediately reflected to " + "another player.</p>"+ "<p>Updating another players screen is totally automatic, and the programmed "+ "does not need to be avare when the refresh requests are sent to screen by the server. In "+ "web adapter the requests are passed through open HTTP-connection as java-script fragments "+ "that update the windows that need repainting.</p>",Label.CONTENT_UIDL));
  URL goUrl=null;
  try {
    goUrl=new URL(getApplication().getURL(),"../go/");
  }
 catch (  MalformedURLException e) {
  }
  if (goUrl != null) {
    Link link=new Link("Start GO-Game",new ExternalResource(goUrl));
    link.setTargetName("gogame");
    link.setTargetBorder(Link.TARGET_BORDER_NONE);
    l.addComponent(link);
  }
  l.addComponent(new Label("<h3>Chat example</h3><p>For some purposes it might be better to create your own " + "stream. The easiest way of creating a continuous stream for " + "simple purposes is to use StreamResource-class. See chat "+ "example below, how this technique can be used for creation "+ "of simple chat program.</p>",Label.CONTENT_UIDL));
  URL chatUrl=null;
  try {
    chatUrl=new URL(getApplication().getURL(),"../chat/");
  }
 catch (  MalformedURLException e) {
  }
  if (goUrl != null) {
    Link link=new Link("Start chat",new ExternalResource(chatUrl));
    link.setTargetName("chat");
    link.setTargetBorder(Link.TARGET_BORDER_NONE);
    l.addComponent(link);
  }
  return l;
}
