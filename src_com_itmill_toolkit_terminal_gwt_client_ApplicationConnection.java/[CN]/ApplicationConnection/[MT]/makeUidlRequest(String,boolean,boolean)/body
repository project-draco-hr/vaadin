{
  startRequest();
  console.log("Making UIDL Request with params: " + requestData);
  String uri=getAppUri() + "UIDL" + configuration.getPathInfo();
  if (repaintAll) {
    uri+="?repaintAll=1";
  }
  if (windowName != null && windowName.length() > 0) {
    uri+=(repaintAll ? "&" : "?") + "windowName=" + windowName;
  }
  if (!forceSync) {
    final RequestBuilder rb=new RequestBuilder(RequestBuilder.POST,uri);
    rb.setHeader("Content-Type","text/plain;charset=utf-8");
    try {
      rb.sendRequest(requestData,new RequestCallback(){
        public void onError(        Request request,        Throwable exception){
          console.error("Got error");
          endRequest();
          if (!applicationRunning) {
            ApplicationConfiguration.startNextApplication();
          }
        }
        public void onResponseReceived(        Request request,        Response response){
          if (applicationRunning) {
            handleReceivedJSONMessage(response);
          }
 else {
            applicationRunning=true;
            handleWhenCSSLoaded(response);
            ApplicationConfiguration.startNextApplication();
          }
        }
        int cssWaits=0;
        static final int MAX_CSS_WAITS=20;
        private void handleWhenCSSLoaded(        final Response response){
          int heightOfLoadElement=DOM.getElementPropertyInt(loadElement,"offsetHeight");
          if (heightOfLoadElement == 0 && cssWaits < MAX_CSS_WAITS) {
            (new Timer(){
              @Override public void run(){
                handleWhenCSSLoaded(response);
              }
            }
).schedule(50);
            console.log("Assuming CSS loading is not complete, " + "postponing render phase. " + "(.i-loading-indicator height == 0)");
            cssWaits++;
          }
 else {
            handleReceivedJSONMessage(response);
            if (cssWaits >= MAX_CSS_WAITS) {
              console.error("CSS files may have not loaded properly.");
            }
          }
        }
      }
);
    }
 catch (    final RequestException e) {
      ClientExceptionHandler.displayError(e);
      endRequest();
    }
  }
 else {
    syncSendForce(((HTTPRequestImpl)GWT.create(HTTPRequestImpl.class)).createXmlHTTPRequest(),uri,requestData);
  }
}
