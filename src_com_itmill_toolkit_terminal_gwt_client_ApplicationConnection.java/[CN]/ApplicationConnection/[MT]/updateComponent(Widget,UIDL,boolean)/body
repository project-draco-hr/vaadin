{
  if (uidl.getBooleanAttribute("cached")) {
    return true;
  }
  boolean visible=!uidl.getBooleanAttribute("invisible");
  boolean wasVisible=component.isVisible();
  component.setVisible(visible);
  if (wasVisible != visible) {
    if (wasVisible && manageCaption) {
      final Container parent=Util.getLayout(component);
      if (parent != null) {
        parent.updateCaption((Paintable)component,uidl);
      }
    }
  }
  if (!visible) {
    componentOffsetSizes.remove(component);
    return true;
  }
  if (!widgetSet.isCorrectImplementation(component,uidl)) {
    final Container parent=Util.getLayout(component);
    if (parent != null) {
      final Widget w=(Widget)widgetSet.createWidget(uidl);
      parent.replaceChildComponent(component,w);
      unregisterPaintable((Paintable)component);
      registerPaintable(uidl.getId(),(Paintable)w);
      ((Paintable)w).updateFromUIDL(uidl,this);
      return true;
    }
  }
  boolean enabled=!uidl.getBooleanAttribute("disabled");
  if (component instanceof FocusWidget) {
    FocusWidget fw=(FocusWidget)component;
    fw.setEnabled(enabled);
    if (uidl.hasAttribute("tabindex")) {
      fw.setTabIndex(uidl.getIntAttribute("tabindex"));
    }
  }
  StringBuffer styleBuf=new StringBuffer();
  final String primaryName=component.getStylePrimaryName();
  styleBuf.append(primaryName);
  if (!enabled) {
    styleBuf.append(" ");
    styleBuf.append("i-disabled");
  }
  if (uidl.getBooleanAttribute("readonly")) {
    styleBuf.append(" ");
    styleBuf.append("i-readonly");
  }
  if (uidl.hasAttribute("style")) {
    final String[] styles=uidl.getStringAttribute("style").split(" ");
    for (int i=0; i < styles.length; i++) {
      styleBuf.append(" ");
      styleBuf.append(primaryName);
      styleBuf.append("-");
      styleBuf.append(styles[i]);
      styleBuf.append(" ");
      styleBuf.append(styles[i]);
    }
  }
  if (uidl.hasAttribute("modified") && component instanceof Field) {
    styleBuf.append(" ");
    styleBuf.append(MODIFIED_CLASSNAME);
  }
  TooltipInfo tooltipInfo=getTitleInfo((Paintable)component);
  if (uidl.hasAttribute("description")) {
    tooltipInfo.setTitle(uidl.getStringAttribute("description"));
  }
 else {
    tooltipInfo.setTitle(null);
  }
  if (uidl.hasAttribute("error")) {
    styleBuf.append(" ");
    styleBuf.append(primaryName);
    styleBuf.append(ERROR_CLASSNAME_EXT);
    tooltipInfo.setErrorUidl(uidl.getErrors());
  }
 else {
    tooltipInfo.setErrorUidl(null);
  }
  if (uidl.hasAttribute("required")) {
    styleBuf.append(" ");
    styleBuf.append(primaryName);
    styleBuf.append(REQUIRED_CLASSNAME_EXT);
  }
  component.setStyleName(styleBuf.toString());
  if (manageCaption) {
    final Container parent=Util.getLayout(component);
    if (parent != null) {
      parent.updateCaption((Paintable)component,uidl);
    }
  }
  if (usePaintableIdsInDOM) {
    DOM.setElementProperty(component.getElement(),"id",uidl.getId());
  }
  updateComponentSize(component,uidl);
  return false;
}
