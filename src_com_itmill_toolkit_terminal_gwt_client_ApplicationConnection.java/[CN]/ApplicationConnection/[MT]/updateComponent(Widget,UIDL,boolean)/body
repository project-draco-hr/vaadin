{
  if (uidl.getBooleanAttribute("cached")) {
    return true;
  }
  boolean visible=!uidl.getBooleanAttribute("invisible");
  component.setVisible(visible);
  if (manageCaption) {
    final Container parent=Util.getParentLayout(component);
    if (parent != null) {
      parent.updateCaption((Paintable)component,uidl);
    }
  }
  if (!visible) {
    return true;
  }
  if (!widgetSet.isCorrectImplementation(component,uidl)) {
    final Container parent=Util.getParentLayout(component);
    if (parent != null) {
      final Widget w=widgetSet.createWidget(uidl);
      parent.replaceChildComponent(component,w);
      registerPaintable(uidl.getId(),(Paintable)w);
      ((Paintable)w).updateFromUIDL(uidl,this);
      return true;
    }
  }
  updateComponentSize(component,uidl);
  component.setStyleName(component.getStylePrimaryName());
  boolean enabled=true;
  if (uidl.hasAttribute("disabled")) {
    enabled=!uidl.getBooleanAttribute("disabled");
  }
  if (component instanceof FocusWidget) {
    ((FocusWidget)component).setEnabled(enabled);
  }
  if (!enabled) {
    component.addStyleName("i-disabled");
  }
 else {
    component.removeStyleName("i-disabled");
  }
  if (uidl.hasAttribute("style")) {
    final String[] styles=uidl.getStringAttribute("style").split(" ");
    for (int i=0; i < styles.length; i++) {
      component.addStyleDependentName(styles[i]);
    }
  }
  if (usePaintableIdsInDOM) {
    DOM.setElementProperty(component.getElement(),"id",uidl.getId());
  }
  return false;
}
