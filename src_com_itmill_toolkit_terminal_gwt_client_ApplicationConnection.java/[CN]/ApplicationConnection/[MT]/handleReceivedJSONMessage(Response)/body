{
  hideLoadingIndicator();
  final Date start=new Date();
  final String jsonText=response.getText().substring(3) + "}";
  JSONValue json;
  try {
    json=JSONParser.parse(jsonText);
  }
 catch (  final com.google.gwt.json.client.JSONException e) {
    console.log(e.getMessage() + " - Original JSON-text:");
    console.log(jsonText);
    return;
  }
  final JSONObject redirect=(JSONObject)((JSONObject)json).get("redirect");
  if (redirect != null) {
    final JSONString url=(JSONString)redirect.get("url");
    if (url != null) {
      console.log("redirecting to " + url.stringValue());
      redirect(url.stringValue());
      return;
    }
  }
  final JSONObject resources=(JSONObject)((JSONObject)json).get("resources");
  for (final Iterator i=resources.keySet().iterator(); i.hasNext(); ) {
    final String key=(String)i.next();
    resourcesMap.put(key,((JSONString)resources.get(key)).stringValue());
  }
  if (((JSONObject)json).containsKey("locales")) {
    final JSONArray l=(JSONArray)((JSONObject)json).get("locales");
    for (int i=0; i < l.size(); i++) {
      LocaleService.addLocale((JSONObject)l.get(i));
    }
  }
  final JSONArray changes=(JSONArray)((JSONObject)json).get("changes");
  for (int i=0; i < changes.size(); i++) {
    try {
      final UIDL change=new UIDL((JSONArray)changes.get(i));
      try {
        console.dirUIDL(change);
      }
 catch (      final Exception e) {
        console.log(e.getMessage());
      }
      final UIDL uidl=change.getChildUIDL(0);
      final Paintable paintable=getPaintable(uidl.getId());
      if (paintable != null) {
        paintable.updateFromUIDL(uidl,this);
      }
 else {
        if (!uidl.getTag().equals("window")) {
          System.out.println("Received update for " + uidl.getTag() + ", but there is no such paintable ("+ uidl.getId()+ ") rendered.");
        }
 else {
          view.updateFromUIDL(uidl,this);
        }
      }
    }
 catch (    final Throwable e) {
      e.printStackTrace();
    }
  }
  if (((JSONObject)json).containsKey("meta")) {
    final JSONObject meta=((JSONObject)json).get("meta").isObject();
    if (meta.containsKey("focus")) {
      final String focusPid=meta.get("focus").isString().stringValue();
      final Paintable toBeFocused=getPaintable(focusPid);
      if (toBeFocused instanceof HasFocus) {
        final HasFocus toBeFocusedWidget=(HasFocus)toBeFocused;
        toBeFocusedWidget.setFocus(true);
      }
    }
  }
  final long prosessingTime=(new Date().getTime()) - start.getTime();
  console.log(" Processing time was " + String.valueOf(prosessingTime) + "ms for "+ jsonText.length()+ " characters of JSON");
  console.log("Referenced paintables: " + idToPaintable.size());
}
