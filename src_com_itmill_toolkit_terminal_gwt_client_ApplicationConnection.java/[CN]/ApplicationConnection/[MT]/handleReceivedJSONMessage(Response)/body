{
  final Date start=new Date();
  String jsonText=response.getText();
  jsonText=jsonText.substring(9,jsonText.length() - 1);
  JSONValue json;
  try {
    json=JSONParser.parse(jsonText);
  }
 catch (  final com.google.gwt.json.client.JSONException e) {
    endRequest();
    console.log(e.getMessage() + " - Original JSON-text:");
    console.log(jsonText);
    return;
  }
  final JSONObject redirect=(JSONObject)((JSONObject)json).get("redirect");
  if (redirect != null) {
    final JSONString url=(JSONString)redirect.get("url");
    if (url != null) {
      console.log("redirecting to " + url.stringValue());
      redirect(url.stringValue());
      return;
    }
  }
  final JSONObject resources=(JSONObject)((JSONObject)json).get("resources");
  for (final Iterator i=resources.keySet().iterator(); i.hasNext(); ) {
    final String key=(String)i.next();
    resourcesMap.put(key,((JSONString)resources.get(key)).stringValue());
  }
  if (((JSONObject)json).containsKey("locales")) {
    final JSONArray l=(JSONArray)((JSONObject)json).get("locales");
    for (int i=0; i < l.size(); i++) {
      LocaleService.addLocale((JSONObject)l.get(i));
    }
  }
  JSONObject meta=null;
  if (((JSONObject)json).containsKey("meta")) {
    meta=((JSONObject)json).get("meta").isObject();
    if (meta.containsKey("repaintAll")) {
      view.clear();
      idToPaintable.clear();
      paintableToId.clear();
    }
    if (meta.containsKey("timedRedirect")) {
      final JSONObject timedRedirect=meta.get("timedRedirect").isObject();
      redirectTimer=new Timer(){
        @Override public void run(){
          redirect(timedRedirect.get("url").isString().stringValue());
        }
      }
;
      sessionExpirationInterval=Integer.parseInt(timedRedirect.get("interval").toString());
    }
  }
  if (redirectTimer != null) {
    redirectTimer.schedule(1000 * sessionExpirationInterval);
  }
  final JSONArray changes=(JSONArray)((JSONObject)json).get("changes");
  Vector<Paintable> updatedWidgets=new Vector<Paintable>();
  relativeSizeChanges.clear();
  componentCaptionSizeChanges.clear();
  for (int i=0; i < changes.size(); i++) {
    try {
      final UIDL change=new UIDL((JSONArray)changes.get(i));
      try {
        console.dirUIDL(change);
      }
 catch (      final Exception e) {
        ClientExceptionHandler.displayError(e);
      }
      final UIDL uidl=change.getChildUIDL(0);
      final Paintable paintable=getPaintable(uidl.getId());
      if (paintable != null) {
        paintable.updateFromUIDL(uidl,this);
        updatedWidgets.add(idToPaintable.get(uidl.getId()));
      }
 else {
        if (!uidl.getTag().equals("window")) {
          ClientExceptionHandler.displayError("Received update for " + uidl.getTag() + ", but there is no such paintable ("+ uidl.getId()+ ") rendered.");
        }
 else {
          view.updateFromUIDL(uidl,this);
        }
      }
    }
 catch (    final Throwable e) {
      ClientExceptionHandler.displayError(e);
    }
  }
  Set<Paintable> sizeUpdatedWidgets=new HashSet<Paintable>();
  updatedWidgets.addAll(relativeSizeChanges);
  sizeUpdatedWidgets.addAll(componentCaptionSizeChanges);
  for (  Paintable paintable : updatedWidgets) {
    Widget widget=(Widget)paintable;
    Size oldSize=componentOffsetSizes.get(widget);
    Size newSize=new Size(widget.getOffsetWidth(),widget.getOffsetHeight());
    if (oldSize == null || !oldSize.equals(newSize)) {
      sizeUpdatedWidgets.add(paintable);
      componentOffsetSizes.put(widget,newSize);
    }
  }
  Util.componentSizeUpdated(sizeUpdatedWidgets);
  if (meta != null) {
    if (meta.containsKey("appError")) {
      JSONObject error=meta.get("appError").isObject();
      JSONValue val=error.get("caption");
      String html="";
      if (val.isString() != null) {
        html+="<h1>" + val.isString().stringValue() + "</h1>";
      }
      val=error.get("message");
      if (val.isString() != null) {
        html+="<p>" + val.isString().stringValue() + "</p>";
      }
      val=error.get("url");
      String url=null;
      if (val.isString() != null) {
        url=val.isString().stringValue();
      }
      if (html.length() != 0) {
        INotification n=new INotification(1000 * 60 * 45);
        n.addEventListener(new NotificationRedirect(url));
        n.show(html,INotification.CENTERED_TOP,INotification.STYLE_SYSTEM);
      }
 else {
        redirect(url);
      }
      applicationRunning=false;
    }
    if (meta.containsKey("invalidLayouts")) {
      getConsole().printLayoutProblems(meta.get("invalidLayouts").isArray(),this);
    }
  }
  final long prosessingTime=(new Date().getTime()) - start.getTime();
  console.log(" Processing time was " + String.valueOf(prosessingTime) + "ms for "+ jsonText.length()+ " characters of JSON");
  console.log("Referenced paintables: " + idToPaintable.size());
  endRequest();
}
