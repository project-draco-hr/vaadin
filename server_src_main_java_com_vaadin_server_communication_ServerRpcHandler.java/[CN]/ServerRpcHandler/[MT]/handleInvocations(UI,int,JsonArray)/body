{
  LegacyCommunicationManager manager=ui.getSession().getCommunicationManager();
  try {
    ConnectorTracker connectorTracker=ui.getConnectorTracker();
    Set<Connector> enabledConnectors=new HashSet<Connector>();
    List<MethodInvocation> invocations=parseInvocations(ui.getConnectorTracker(),invocationsData,lastSyncIdSeenByClient);
    for (    MethodInvocation invocation : invocations) {
      final ClientConnector connector=connectorTracker.getConnector(invocation.getConnectorId());
      if (connector != null && connector.isConnectorEnabled()) {
        enabledConnectors.add(connector);
      }
    }
    for (int i=0; i < invocations.size(); i++) {
      MethodInvocation invocation=invocations.get(i);
      final ClientConnector connector=connectorTracker.getConnector(invocation.getConnectorId());
      if (connector == null) {
        getLogger().log(Level.WARNING,"Received RPC call for unknown connector with id {0} (tried to invoke {1}.{2})",new Object[]{invocation.getConnectorId(),invocation.getInterfaceName(),invocation.getMethodName()});
        continue;
      }
      if (!enabledConnectors.contains(connector)) {
        if (invocation instanceof LegacyChangeVariablesInvocation) {
          LegacyChangeVariablesInvocation legacyInvocation=(LegacyChangeVariablesInvocation)invocation;
          Map<String,Object> changes=legacyInvocation.getVariableChanges();
          if (changes.size() == 1 && changes.containsKey("close") && Boolean.TRUE.equals(changes.get("close"))) {
            continue;
          }
        }
        getLogger().warning(getIgnoredDisabledError("RPC call",connector));
        continue;
      }
      if (connector.getUI() != null && connector.getUI().isClosing()) {
        String msg="Ignoring RPC call for connector " + connector.getClass().getName();
        if (connector instanceof Component) {
          String caption=((Component)connector).getCaption();
          if (caption != null) {
            msg+=", caption=" + caption;
          }
        }
        msg+=" in closed UI";
        getLogger().warning(msg);
        continue;
      }
      if (invocation instanceof ServerRpcMethodInvocation) {
        handleInvocation(ui,connector,(ServerRpcMethodInvocation)invocation);
      }
 else {
        LegacyChangeVariablesInvocation legacyInvocation=(LegacyChangeVariablesInvocation)invocation;
        handleInvocation(ui,connector,legacyInvocation);
      }
    }
  }
 catch (  JsonException e) {
    getLogger().warning("Unable to parse RPC call from the client: " + e.getMessage());
    throw new RuntimeException(e);
  }
}
