{
  JsonArray json=Json.createArray();
  if (isEmpty()) {
    return json;
  }
  for (  MethodInvocation invocation : getAll()) {
    String connectorId=invocation.getConnectorId();
    if (!connectorExists(connectorId)) {
      getLogger().info("Ignoring RPC for removed connector: " + connectorId + ": "+ invocation.toString());
      continue;
    }
    JsonArray invocationJson=Json.createArray();
    invocationJson.set(0,connectorId);
    invocationJson.set(1,invocation.getInterfaceName());
    invocationJson.set(2,invocation.getMethodName());
    JsonArray paramJson=Json.createArray();
    Type[] parameterTypes=null;
    if (!isLegacyVariableChange(invocation) && !isJavascriptRpc(invocation)) {
      try {
        Type type=new Type(invocation.getInterfaceName(),null);
        Method method=type.getMethod(invocation.getMethodName());
        parameterTypes=method.getParameterTypes();
      }
 catch (      NoDataException e) {
        throw new RuntimeException("No type data for " + invocation.toString(),e);
      }
    }
    for (int i=0; i < invocation.getParameters().length; ++i) {
      Type type=null;
      if (parameterTypes != null) {
        type=parameterTypes[i];
      }
      Object value=invocation.getParameters()[i];
      JsonValue jsonValue=JsonEncoder.encode(value,type,connection);
      paramJson.set(i,jsonValue);
    }
    invocationJson.set(3,paramJson);
    json.set(json.length(),invocationJson);
  }
  return json;
}
