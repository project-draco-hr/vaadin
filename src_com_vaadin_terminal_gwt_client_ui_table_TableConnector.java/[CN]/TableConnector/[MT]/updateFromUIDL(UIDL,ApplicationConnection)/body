{
  getWidget().rendering=true;
  ContextMenuDetails contextMenuBeforeUpdate=getWidget().contextMenu;
  if (uidl.hasAttribute(VScrollTable.ATTRIBUTE_PAGEBUFFER_FIRST)) {
    getWidget().serverCacheFirst=uidl.getIntAttribute(VScrollTable.ATTRIBUTE_PAGEBUFFER_FIRST);
    getWidget().serverCacheLast=uidl.getIntAttribute(VScrollTable.ATTRIBUTE_PAGEBUFFER_LAST);
  }
 else {
    getWidget().serverCacheFirst=-1;
    getWidget().serverCacheLast=-1;
  }
  if (uidl.hasAttribute("colfooters")) {
    getWidget().showColFooters=uidl.getBooleanAttribute("colfooters");
  }
  getWidget().tFoot.setVisible(getWidget().showColFooters);
  if (!isRealUpdate(uidl)) {
    getWidget().rendering=false;
    return;
  }
  getWidget().enabled=isEnabled();
  if (BrowserInfo.get().isIE8() && !getWidget().enabled) {
    getWidget().scrollBodyPanel.getElement().getStyle().setPosition(Position.STATIC);
  }
 else   if (BrowserInfo.get().isIE8()) {
    getWidget().scrollBodyPanel.getElement().getStyle().setPosition(Position.RELATIVE);
  }
  getWidget().paintableId=uidl.getStringAttribute("id");
  getWidget().immediate=getState().isImmediate();
  int previousTotalRows=getWidget().totalRows;
  getWidget().updateTotalRows(uidl);
  boolean totalRowsChanged=(getWidget().totalRows != previousTotalRows);
  getWidget().updateDragMode(uidl);
  getWidget().updateSelectionProperties(uidl,getState(),isReadOnly());
  if (uidl.hasAttribute("alb")) {
    getWidget().bodyActionKeys=uidl.getStringArrayAttribute("alb");
  }
 else {
    getWidget().bodyActionKeys=null;
  }
  getWidget().setCacheRateFromUIDL(uidl);
  getWidget().recalcWidths=uidl.hasAttribute("recalcWidths");
  if (getWidget().recalcWidths) {
    getWidget().tHead.clear();
    getWidget().tFoot.clear();
  }
  getWidget().updatePageLength(uidl);
  getWidget().updateFirstVisibleAndScrollIfNeeded(uidl);
  getWidget().showRowHeaders=uidl.getBooleanAttribute("rowheaders");
  getWidget().showColHeaders=uidl.getBooleanAttribute("colheaders");
  getWidget().updateSortingProperties(uidl);
  boolean keyboardSelectionOverRowFetchInProgress=getWidget().selectSelectedRows(uidl);
  getWidget().updateActionMap(uidl);
  getWidget().updateColumnProperties(uidl);
  UIDL ac=uidl.getChildByTagName("-ac");
  if (ac == null) {
    if (getWidget().dropHandler != null) {
      getWidget().dropHandler=null;
    }
  }
 else {
    if (getWidget().dropHandler == null) {
      getWidget().dropHandler=getWidget().new VScrollTableDropHandler();
    }
    getWidget().dropHandler.updateAcceptRules(ac);
  }
  UIDL partialRowAdditions=uidl.getChildByTagName("prows");
  UIDL partialRowUpdates=uidl.getChildByTagName("urows");
  if (partialRowUpdates != null || partialRowAdditions != null) {
    getWidget().rowRequestHandler.cancel();
    getWidget().updateRowsInBody(partialRowUpdates);
    getWidget().addAndRemoveRows(partialRowAdditions);
  }
 else {
    UIDL rowData=uidl.getChildByTagName("rows");
    if (rowData != null) {
      getWidget().rowRequestHandler.cancel();
      if (!getWidget().recalcWidths && getWidget().initializedAndAttached) {
        getWidget().updateBody(rowData,uidl.getIntAttribute("firstrow"),uidl.getIntAttribute("rows"));
        if (getWidget().headerChangedDuringUpdate) {
          getWidget().triggerLazyColumnAdjustment(true);
        }
 else         if (!getWidget().isScrollPositionVisible() || totalRowsChanged || getWidget().lastRenderedHeight != getWidget().scrollBody.getOffsetHeight()) {
          Scheduler.get().scheduleDeferred(new Command(){
            public void execute(){
              Util.runWebkitOverflowAutoFix(getWidget().scrollBodyPanel.getElement());
            }
          }
);
        }
      }
 else {
        getWidget().initializeRows(uidl,rowData);
      }
    }
  }
  showSavedContextMenu(contextMenuBeforeUpdate);
  if (!getWidget().isSelectable()) {
    getWidget().scrollBody.addStyleName(VScrollTable.CLASSNAME + "-body-noselection");
  }
 else {
    getWidget().scrollBody.removeStyleName(VScrollTable.CLASSNAME + "-body-noselection");
  }
  getWidget().hideScrollPositionAnnotation();
  if (!keyboardSelectionOverRowFetchInProgress) {
    getWidget().selectionChanged=false;
  }
  if (getWidget().selectFirstItemInNextRender || getWidget().focusFirstItemInNextRender) {
    getWidget().selectFirstRenderedRowInViewPort(getWidget().focusFirstItemInNextRender);
    getWidget().selectFirstItemInNextRender=getWidget().focusFirstItemInNextRender=false;
  }
  if (getWidget().selectLastItemInNextRender || getWidget().focusLastItemInNextRender) {
    getWidget().selectLastRenderedRowInViewPort(getWidget().focusLastItemInNextRender);
    getWidget().selectLastItemInNextRender=getWidget().focusLastItemInNextRender=false;
  }
  getWidget().multiselectPending=false;
  if (getWidget().focusedRow != null) {
    if (!getWidget().focusedRow.isAttached() && !getWidget().rowRequestHandler.isRunning()) {
      getWidget().focusRowFromBody();
    }
  }
  getWidget().tabIndex=uidl.hasAttribute("tabindex") ? uidl.getIntAttribute("tabindex") : 0;
  getWidget().setProperTabIndex();
  getWidget().resizeSortedColumnForSortIndicator();
  getWidget().lastRenderedHeight=getWidget().scrollBody.getOffsetHeight();
  getWidget().rendering=false;
  getWidget().headerChangedDuringUpdate=false;
}
