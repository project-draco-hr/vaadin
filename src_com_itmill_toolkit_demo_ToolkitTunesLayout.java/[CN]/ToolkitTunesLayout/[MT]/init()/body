{
  final Window root=new Window("ToolkitTunes");
  root.setWidth("90%");
  root.setHeight("90%");
  root.center();
  setMainWindow(root);
  root.getLayout().setSizeFull();
  root.getLayout().setMargin(false);
  HorizontalLayout top=new HorizontalLayout();
  top.setWidth("100%");
  top.setMargin(true);
  top.setSpacing(true);
  root.addComponent(top);
  HorizontalLayout playback=new HorizontalLayout();
  HorizontalLayout volume=new HorizontalLayout();
  HorizontalLayout status=new HorizontalLayout();
  HorizontalLayout viewmodes=new HorizontalLayout();
  ComboBox search=new ComboBox();
  top.addComponent(playback);
  top.addComponent(volume);
  top.addComponent(status);
  top.addComponent(viewmodes);
  top.addComponent(search);
  top.setComponentAlignment(playback,"middle");
  top.setComponentAlignment(volume,"middle");
  top.setComponentAlignment(viewmodes,"middle");
  top.setComponentAlignment(search,"middle");
  top.setExpandRatio(status,1.0F);
  Button prev=new Button("Previous");
  Button play=new Button("Play/pause");
  Button next=new Button("Next");
  playback.addComponent(prev);
  playback.addComponent(play);
  playback.addComponent(next);
  playback.setSpacing(true);
  Button mute=new Button("mute");
  Slider vol=new Slider();
  vol.setOrientation(Slider.ORIENTATION_HORIZONTAL);
  vol.setWidth("100px");
  Button max=new Button("max");
  volume.addComponent(mute);
  volume.addComponent(vol);
  volume.addComponent(max);
  status.setWidth("80%");
  status.setSpacing(true);
  top.setComponentAlignment(status,"center");
  Button toggleVisualization=new Button("Mode");
  Label timeFromStart=new Label("0:00");
  VerticalLayout trackDetails=new VerticalLayout();
  trackDetails.setWidth("100%");
  Label track=new Label("Track Name");
  Label album=new Label("Album Name - Artist");
  Slider progress=new Slider();
  progress.setOrientation(Slider.ORIENTATION_HORIZONTAL);
  progress.setWidth("100%");
  trackDetails.addComponent(track);
  trackDetails.addComponent(album);
  trackDetails.addComponent(progress);
  trackDetails.setComponentAlignment(track,"center");
  trackDetails.setComponentAlignment(album,"center");
  Label timeToEnd=new Label("-4:46");
  Button jumpToTrack=new Button("Show");
  status.addComponent(toggleVisualization);
  status.setComponentAlignment(toggleVisualization,"middle");
  status.addComponent(timeFromStart);
  status.setComponentAlignment(timeFromStart,"bottom");
  status.addComponent(trackDetails);
  status.addComponent(timeToEnd);
  status.setComponentAlignment(timeToEnd,"bottom");
  status.addComponent(jumpToTrack);
  status.setComponentAlignment(jumpToTrack,"middle");
  status.setExpandRatio(trackDetails,1.0F);
  Button viewAsTable=new Button("Table");
  Button viewAsGrid=new Button("Grid");
  Button coverflow=new Button("Coverflow");
  viewmodes.addComponent(viewAsTable);
  viewmodes.addComponent(viewAsGrid);
  viewmodes.addComponent(coverflow);
  SplitPanel bottom=new SplitPanel(SplitPanel.ORIENTATION_HORIZONTAL);
  root.addComponent(bottom);
  root.getLayout().setHeight("100%");
  ((VerticalLayout)root.getLayout()).setExpandRatio(bottom,1.0F);
  bottom.setSplitPosition(200,SplitPanel.UNITS_PIXELS);
  VerticalLayout sidebar=new VerticalLayout();
  sidebar.setSizeFull();
  bottom.setFirstComponent(sidebar);
  VerticalLayout selections=new VerticalLayout();
  Label library=new Label("Library");
  Button music=new Button("Music");
  Label store=new Label("Store");
  Button toolkitTunesStore=new Button("ToolkitTunes Store");
  Button purchased=new Button("Purchased");
  Label playlists=new Label("Playlists");
  Button genius=new Button("Geniues");
  Button recent=new Button("Recently Added");
  selections.addComponent(library);
  selections.addComponent(music);
  selections.addComponent(store);
  selections.addComponent(toolkitTunesStore);
  selections.addComponent(purchased);
  selections.addComponent(playlists);
  selections.addComponent(genius);
  selections.addComponent(recent);
  sidebar.addComponent(selections);
  sidebar.setExpandRatio(selections,1.0F);
  Embedded cover=new Embedded();
  cover.setWidth("200px");
  cover.setHeight("200px");
  sidebar.addComponent(cover);
  sidebar.setComponentAlignment(cover,"center");
  Table listing=new Table();
  listing.setSizeFull();
  bottom.setSecondComponent(listing);
  listing.addContainerProperty("Name",String.class,"");
  listing.addContainerProperty("Time",String.class,"0:00");
  listing.addContainerProperty("Artist",String.class,"");
  listing.addContainerProperty("Album",String.class,"");
  listing.addContainerProperty("Genre",String.class,"");
  listing.addContainerProperty("Rating",NativeSelect.class,new NativeSelect());
  String[] tracks=new String[]{"Red Flag","Millstone","Not The Sun","Breath","Here We Are","Deep Heaven","Her Voice Resides","Natural Tan","End It All","Kings","Daylight Slaving","Mad Man","Resolve","Teargas","African Air","Passing Bird"};
  String[] times=new String[]{"4:12","6:03","5:43","4:32","3:42","4:45","2:56","9:34","2:10","3:44","5:49","6:30","5:18","7:42","3:13","2:52"};
  String[] artists=new String[]{"Billy Talent","Brand New","Breaking Benjamin","Becoming The Archetype","Bullet For My Valentine","Chasing Victory","Chimaira","Danko Jones","Deadlock","Deftones","From Autumn To Ashes","Haste The Day","Four Year Strong","In Flames","Kemopetrol","John Legend"};
  String[] albums=new String[]{"Once Again","The Caitiff Choir","The Devil And God","Light Grenades","Dicthonomy","Back In Black","Dreamer","Come Clarity","Year Zero","Frames","Fortress","Phobia","The Poison","Manifesto","White Pony","The Big Dirty"};
  String[] genres=new String[]{"Rock","Metal","Hardcore","Indie","Pop","Alternative","Blues","Jazz","Hip Hop","Electronica"};
  for (int i=0; i < 1000; i++) {
    NativeSelect s=new NativeSelect();
    s.addItem("1 star");
    s.addItem("2 stars");
    s.addItem("3 stars");
    s.addItem("4 stars");
    s.addItem("5 stars");
    s.select(new Random().nextInt(5) + " stars");
    listing.addItem(new Object[]{tracks[new Random().nextInt(tracks.length - 1)],times[new Random().nextInt(times.length - 1)],artists[new Random().nextInt(artists.length - 1)],albums[new Random().nextInt(albums.length - 1)],genres[new Random().nextInt(genres.length - 1)],s},i);
  }
}
