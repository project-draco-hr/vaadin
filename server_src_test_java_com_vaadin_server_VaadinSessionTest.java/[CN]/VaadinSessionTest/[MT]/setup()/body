{
  httpSessionLock=new ReentrantLock();
  mockServletConfig=new MockServletConfig();
  mockServlet=new VaadinServlet();
  mockServlet.init(mockServletConfig);
  mockService=mockServlet.getService();
  mockHttpSession=EasyMock.createMock(HttpSession.class);
  mockWrappedSession=new WrappedHttpSession(mockHttpSession){
    final ReentrantLock lock=new ReentrantLock();
{
      lock.lock();
    }
    @Override public Object getAttribute(    String name){
      Object res;
      try {
        Thread.sleep(100);
        org.junit.Assert.assertTrue("Deadlock detected",httpSessionLock.tryLock(5,TimeUnit.SECONDS));
        String lockAttribute=mockService.getServiceName() + ".lock";
        if (lockAttribute.equals(name)) {
          res=lock;
        }
 else         if ("com.vaadin.server.VaadinSession.Mock Servlet".equals(name)) {
          res=session;
        }
 else {
          res=super.getAttribute(name);
        }
        httpSessionLock.unlock();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      return res;
    }
  }
;
  session=new VaadinSession(mockService);
  mockService.storeSession(session,mockWrappedSession);
  ui=new MockPageUI();
  vaadinRequest=new VaadinServletRequest(EasyMock.createMock(HttpServletRequest.class),mockService){
    @Override public String getParameter(    String name){
      if ("theme".equals(name) || "restartApplication".equals(name) || "ignoreRestart".equals(name)|| "closeApplication".equals(name)) {
        return null;
      }
 else       if (UIInitHandler.BROWSER_DETAILS_PARAMETER.equals(name)) {
        return "1";
      }
      return super.getParameter(name);
    }
    @Override public String getMethod(){
      return "POST";
    }
    @Override public WrappedSession getWrappedSession(    boolean allowSessionCreation){
      return mockWrappedSession;
    }
  }
;
  ui.doInit(vaadinRequest,session.getNextUIid(),null);
  ui.setSession(session);
  session.addUI(ui);
}
