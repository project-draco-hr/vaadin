{
  if (isMultiSelect()) {
    super.paintContent(target);
    return;
  }
  getCaptionChangeListener().clear();
  if (getTabIndex() != 0) {
    target.addAttribute("tabindex",getTabIndex());
  }
  if (isModified()) {
    target.addAttribute("modified",true);
  }
  if (isRequired()) {
    target.addAttribute("required",true);
  }
  if (isNewItemsAllowed()) {
    target.addAttribute("allownewitem",true);
  }
  boolean needNullSelectOption=false;
  if (isNullSelectionAllowed()) {
    target.addAttribute("nullselect",true);
    needNullSelectOption=(getNullSelectionItemId() == null);
    if (!needNullSelectOption) {
      target.addAttribute("nullselectitem",true);
    }
  }
  String[] selectedKeys;
  if (isMultiSelect()) {
    selectedKeys=new String[((Set)getValue()).size()];
  }
 else {
    selectedKeys=new String[(getValue() == null && getNullSelectionItemId() == null ? 0 : 1)];
  }
  target.addAttribute("filteringmode",getFilteringMode());
  int keyIndex=0;
  target.startTag("options");
  if (currentPage < 0) {
    optionRequest=false;
    currentPage=0;
    filterstring="";
  }
  List options=getFilteredOptions();
  options=sanitetizeList(options,needNullSelectOption);
  final boolean paintNullSelection=needNullSelectOption && (currentPage == 0 && (filterstring == null || filterstring.equals("")));
  if (paintNullSelection) {
    target.startTag("so");
    target.addAttribute("caption","");
    target.addAttribute("key","");
    target.endTag("so");
  }
  final Iterator i=options.iterator();
  while (i.hasNext()) {
    final Object id=i.next();
    if (!isNullSelectionAllowed() && id != null && id.equals(getNullSelectionItemId()) && !isSelected(id)) {
      continue;
    }
    final String key=itemIdMapper.key(id);
    final String caption=getItemCaption(id);
    final Resource icon=getItemIcon(id);
    getCaptionChangeListener().addNotifierForItem(id);
    target.startTag("so");
    if (icon != null) {
      target.addAttribute("icon",icon);
    }
    target.addAttribute("caption",caption);
    if (id != null && id.equals(getNullSelectionItemId())) {
      target.addAttribute("nullselection",true);
    }
    target.addAttribute("key",key);
    if (isSelected(id) && keyIndex < selectedKeys.length) {
      target.addAttribute("selected",true);
      selectedKeys[keyIndex++]=key;
    }
    target.endTag("so");
  }
  target.endTag("options");
  target.addAttribute("totalitems",size() + (needNullSelectOption ? 1 : 0));
  if (filteredOptions != null) {
    target.addAttribute("totalMatches",filteredOptions.size() + (needNullSelectOption ? 1 : 0));
  }
  target.addVariable(this,"selected",selectedKeys);
  if (isNewItemsAllowed()) {
    target.addVariable(this,"newitem","");
  }
  target.addVariable(this,"filter",filterstring);
  target.addVariable(this,"page",currentPage);
  currentPage=-1;
  optionRequest=true;
}
