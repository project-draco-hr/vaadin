{
  RequestTimer requestTimer=new RequestTimer();
  requestTimer.start();
  getService().setCurrentInstances(request,response);
  AbstractApplicationPortletWrapper portletWrapper=new AbstractApplicationPortletWrapper(this);
  try {
    RequestType requestType=getRequestType(request);
    if (requestType == RequestType.UNKNOWN) {
      handleUnknownRequest(request,response);
    }
 else     if (requestType == RequestType.DUMMY) {
      ((ResourceResponse)response).setContentType("text/html");
      final OutputStream out=((ResourceResponse)response).getPortletOutputStream();
      final PrintWriter outWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out,"UTF-8")));
      outWriter.print("<html><body>dummy page</body></html>");
      outWriter.close();
    }
 else     if (requestType == RequestType.STATIC_FILE) {
      serveStaticResources((ResourceRequest)request,(ResourceResponse)response);
    }
 else {
      VaadinPortletSession vaadinSession=null;
      try {
        vaadinSession=(VaadinPortletSession)getService().findVaadinSession(request);
        if (vaadinSession == null) {
          return;
        }
        if (requestType == RequestType.PUBLISHED_FILE) {
          new PublishedFileHandler().handleRequest(vaadinSession,request,response);
          return;
        }
 else         if (requestType == RequestType.HEARTBEAT) {
          new HeartbeatHandler().handleRequest(vaadinSession,request,response);
          return;
        }
        new PortletListenerNotifier().handleRequest(vaadinSession,request,response);
        if (requestType == RequestType.FILE_UPLOAD) {
          new FileUploadHandler().handleRequest(vaadinSession,request,response);
          return;
        }
 else         if (requestType == RequestType.BROWSER_DETAILS) {
          new UIInitHandler().handleRequest(vaadinSession,request,response);
          return;
        }
 else         if (requestType == RequestType.UIDL) {
          new UidlRequestHandler(portletWrapper).handleRequest(vaadinSession,request,response);
          return;
        }
 else {
          handleOtherRequest(request,response,requestType,vaadinSession,vaadinSession.getCommunicationManager());
        }
      }
 catch (      final SessionExpiredException e) {
        getLogger().finest("A user session has expired");
      }
catch (      final Throwable e) {
        handleServiceException(request,response,vaadinSession,e);
      }
 finally {
        if (vaadinSession != null) {
          getService().cleanupSession(vaadinSession);
          requestTimer.stop(vaadinSession);
        }
      }
    }
  }
  finally {
    CurrentInstance.clearAll();
  }
}
