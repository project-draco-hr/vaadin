{
  final LegacyTextField delayField=new LegacyTextField("Delay (ms)");
  delayField.setConverter(Integer.class);
  delayField.setConvertedValue(1000);
  NativeButton delayButton=new NativeButton("Wait");
  delayButton.addClickListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      try {
        Thread.sleep((Integer)delayField.getConvertedValue());
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  firstDelay=createIntegerTextField("First delay (ms)",getState().loadingIndicatorConfiguration.firstDelay);
  firstDelay.addValueChangeListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      getLoadingIndicatorConfiguration().setFirstDelay((Integer)firstDelay.getConvertedValue());
    }
  }
);
  secondDelay=createIntegerTextField("Second delay (ms)",getState().loadingIndicatorConfiguration.secondDelay);
  secondDelay.addValueChangeListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      getLoadingIndicatorConfiguration().setSecondDelay((Integer)secondDelay.getConvertedValue());
    }
  }
);
  thirdDelay=createIntegerTextField("Third delay (ms)",getState().loadingIndicatorConfiguration.thirdDelay);
  thirdDelay.addValueChangeListener(new Property.ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      getLoadingIndicatorConfiguration().setThirdDelay((Integer)thirdDelay.getConvertedValue());
    }
  }
);
  getLayout().addComponents(firstDelay,secondDelay,thirdDelay);
  HorizontalLayout hl=new HorizontalLayout();
  hl.setMargin(true);
  hl.setDefaultComponentAlignment(Alignment.BOTTOM_RIGHT);
  hl.addComponents(delayField,delayButton);
  addComponent(hl);
}
