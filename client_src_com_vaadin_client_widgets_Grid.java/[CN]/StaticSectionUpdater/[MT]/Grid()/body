{
  initWidget(escalator);
  getElement().setTabIndex(0);
  cellFocusHandler=new CellFocusHandler();
  setStylePrimaryName("v-grid");
  escalator.getHeader().setEscalatorUpdater(createHeaderUpdater());
  escalator.getBody().setEscalatorUpdater(createBodyUpdater());
  escalator.getFooter().setEscalatorUpdater(createFooterUpdater());
  header.setGrid(this);
  HeaderRow defaultRow=header.appendRow();
  header.setDefaultRow(defaultRow);
  footer.setGrid(this);
  editorRow.setGrid(this);
  setSelectionMode(SelectionMode.MULTI);
  escalator.addScrollHandler(new ScrollHandler(){
    @Override public void onScroll(    ScrollEvent event){
      fireEvent(new ScrollEvent());
    }
  }
);
  escalator.addRowVisibilityChangeHandler(new RowVisibilityChangeHandler(){
    @Override public void onRowVisibilityChange(    RowVisibilityChangeEvent event){
      if (dataSource != null && dataSource.size() != 0) {
        dataIsBeingFetched=true;
        dataSource.ensureAvailability(event.getFirstVisibleRow(),event.getVisibleRowCount());
      }
    }
  }
);
  addSelectionHandler(new SelectionHandler<T>(){
    @Override public void onSelect(    SelectionEvent<T> event){
      refreshBody();
    }
  }
);
  sinkEvents(getHeader().getConsumedEvents());
  sinkEvents(Arrays.asList(BrowserEvents.KEYDOWN,BrowserEvents.KEYUP,BrowserEvents.KEYPRESS,BrowserEvents.DBLCLICK));
  addHeaderKeyUpHandler(new HeaderKeyUpHandler(){
    @Override public void onKeyUp(    GridKeyUpEvent event){
      if (event.getNativeKeyCode() != KeyCodes.KEY_ENTER) {
        return;
      }
      sorter.sort(event.getFocusedCell(),event.isShiftKeyDown());
    }
  }
);
  addDataAvailableHandler(new DataAvailableHandler(){
    @Override public void onDataAvailable(    DataAvailableEvent event){
      dataIsBeingFetched=false;
    }
  }
);
}
