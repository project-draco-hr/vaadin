{
  Profiler.enter("Layout overflow fix handling");
  JsArrayString pendingOverflowConnectorsIds=pendingOverflowFixes.dump();
  int pendingOverflowCount=pendingOverflowConnectorsIds.length();
  ConnectorMap connectorMap=ConnectorMap.get(connection);
  if (pendingOverflowCount > 0) {
    HashMap<Element,String> originalOverflows=new HashMap<Element,String>();
    FastStringSet delayedOverflowFixes=FastStringSet.create();
    for (int i=0; i < pendingOverflowCount; i++) {
      String connectorId=pendingOverflowConnectorsIds.get(i);
      ComponentConnector componentConnector=(ComponentConnector)connectorMap.getConnector(connectorId);
      boolean connectorChangesExpected=!currentDependencyTree.noMoreChangesExpected(componentConnector);
      boolean parentChangesExcpected=componentConnector.getParent() instanceof ComponentConnector && !currentDependencyTree.noMoreChangesExpected((ComponentConnector)componentConnector.getParent());
      if (connectorChangesExpected || parentChangesExcpected) {
        delayedOverflowFixes.add(connectorId);
        continue;
      }
      if (debugLogging) {
        VConsole.log("Doing overflow fix for " + Util.getConnectorString(componentConnector) + " in "+ Util.getConnectorString(componentConnector.getParent()));
      }
      Profiler.enter("Overflow fix apply");
      Element parentElement=componentConnector.getWidget().getElement().getParentElement();
      Style style=parentElement.getStyle();
      String originalOverflow=style.getOverflow();
      if (originalOverflow != null && !originalOverflows.containsKey(parentElement)) {
        originalOverflows.put(parentElement,originalOverflow);
      }
      style.setOverflow(Overflow.HIDDEN);
      Profiler.leave("Overflow fix apply");
    }
    pendingOverflowFixes.removeAll(delayedOverflowFixes);
    JsArrayString remainingOverflowFixIds=pendingOverflowFixes.dump();
    int remainingCount=remainingOverflowFixIds.length();
    Profiler.enter("Overflow fix reflow");
    for (int i=0; i < remainingCount; i++) {
      ComponentConnector componentConnector=(ComponentConnector)connectorMap.getConnector(remainingOverflowFixIds.get(i));
      componentConnector.getWidget().getElement().getParentElement().getOffsetHeight();
    }
    Profiler.leave("Overflow fix reflow");
    Profiler.enter("Overflow fix restore");
    for (int i=0; i < remainingCount; i++) {
      String connectorId=remainingOverflowFixIds.get(i);
      ComponentConnector componentConnector=(ComponentConnector)connectorMap.getConnector(connectorId);
      Element parentElement=componentConnector.getWidget().getElement().getParentElement();
      parentElement.getStyle().setProperty("overflow",originalOverflows.get(parentElement));
      layoutDependencyTree.setNeedsMeasure(connectorId,true);
    }
    Profiler.leave("Overflow fix restore");
    if (!pendingOverflowFixes.isEmpty()) {
      VConsole.log("Did overflow fix for " + remainingCount + " elements");
    }
    pendingOverflowFixes=delayedOverflowFixes;
  }
  Profiler.leave("Layout overflow fix handling");
  int measureCount=0;
  if (measureAll) {
    Profiler.enter("Layout measureAll");
    JsArrayObject<ComponentConnector> allConnectors=connectorMap.getComponentConnectorsAsJsArray();
    int size=allConnectors.size();
    JsArrayObject<ComponentConnector> connectors=JsArrayObject.createArray().cast();
    for (int i=0; i < size; i++) {
      ComponentConnector candidate=allConnectors.get(i);
      if (needsMeasure(candidate.getWidget().getElement())) {
        connectors.add(candidate);
      }
    }
    int connectorCount=connectors.size();
    for (int i=0; i < connectorCount; i++) {
      measureConnector(connectors.get(i));
    }
    for (int i=0; i < connectorCount; i++) {
      layoutDependencyTree.setNeedsMeasure(connectors.get(i).getConnectorId(),false);
    }
    measureCount+=connectorCount;
    Profiler.leave("Layout measureAll");
  }
  Profiler.enter("Layout measure from tree");
  while (layoutDependencyTree.hasConnectorsToMeasure()) {
    JsArrayString measureTargets=layoutDependencyTree.getMeasureTargetsJsArray();
    int length=measureTargets.length();
    for (int i=0; i < length; i++) {
      ComponentConnector connector=(ComponentConnector)connectorMap.getConnector(measureTargets.get(i));
      measureConnector(connector);
      measureCount++;
    }
    for (int i=0; i < length; i++) {
      String connectorId=measureTargets.get(i);
      layoutDependencyTree.setNeedsMeasure(connectorId,false);
    }
  }
  Profiler.leave("Layout measure from tree");
  return measureCount;
}
