{
  VConsole.log("Starting layout phase");
  FastStringMap<Integer> layoutCounts=FastStringMap.create();
  int passes=0;
  Duration totalDuration=new Duration();
  ConnectorMap connectorMap=ConnectorMap.get(connection);
  JsArrayString dump=needsHorizontalLayout.dump();
  int dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    String layoutId=dump.get(i);
    currentDependencyTree.setNeedsHorizontalLayout(layoutId,true);
  }
  dump=needsVerticalLayout.dump();
  dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    String layoutId=dump.get(i);
    currentDependencyTree.setNeedsVerticalLayout(layoutId,true);
  }
  needsHorizontalLayout=FastStringSet.create();
  needsVerticalLayout=FastStringSet.create();
  dump=needsMeasure.dump();
  dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    String layoutId=dump.get(i);
    currentDependencyTree.setNeedsMeasure(layoutId,true);
  }
  needsMeasure=FastStringSet.create();
  measureNonConnectors();
  VConsole.log("Layout init in " + totalDuration.elapsedMillis() + " ms");
  while (true) {
    Duration passDuration=new Duration();
    passes++;
    performBrowserLayoutHacks();
    int measuredConnectorCount=measureConnectors(currentDependencyTree,everythingNeedsMeasure);
    everythingNeedsMeasure=false;
    if (measuredConnectorCount == 0) {
      VConsole.log("No more changes in pass " + passes);
      break;
    }
    int measureTime=passDuration.elapsedMillis();
    VConsole.log("  Measured " + measuredConnectorCount + " elements in "+ measureTime+ " ms");
    if (!listenersToFire.isEmpty()) {
      for (      Element element : listenersToFire) {
        Collection<ElementResizeListener> listeners=elementResizeListeners.get(element);
        if (listeners != null) {
          ElementResizeListener[] array=listeners.toArray(new ElementResizeListener[listeners.size()]);
          ElementResizeEvent event=new ElementResizeEvent(this,element);
          for (          ElementResizeListener listener : array) {
            try {
              listener.onElementResize(event);
            }
 catch (            RuntimeException e) {
              VConsole.error(e);
            }
          }
        }
      }
      int measureListenerTime=passDuration.elapsedMillis();
      VConsole.log("  Fired resize listeners for  " + listenersToFire.size() + " elements in "+ (measureListenerTime - measureTime)+ " ms");
      measureTime=measuredConnectorCount;
      listenersToFire.clear();
    }
    FastStringSet updatedSet=FastStringSet.create();
    while (currentDependencyTree.hasHorizontalConnectorToLayout() || currentDependencyTree.hasVerticaConnectorToLayout()) {
      JsArrayString layoutTargets=currentDependencyTree.getHorizontalLayoutTargetsJsArray();
      int length=layoutTargets.length();
      for (int i=0; i < length; i++) {
        ManagedLayout layout=(ManagedLayout)connectorMap.getConnector(layoutTargets.get(i));
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          try {
            cl.layoutHorizontally();
          }
 catch (          RuntimeException e) {
            VConsole.error(e);
          }
          countLayout(layoutCounts,cl);
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          try {
            rr.layout();
          }
 catch (          RuntimeException e) {
            VConsole.error(e);
          }
          countLayout(layoutCounts,rr);
        }
        if (debugLogging) {
          updatedSet.add(layout.getConnectorId());
        }
      }
      layoutTargets=currentDependencyTree.getVerticalLayoutTargetsJsArray();
      length=layoutTargets.length();
      for (int i=0; i < length; i++) {
        ManagedLayout layout=(ManagedLayout)connectorMap.getConnector(layoutTargets.get(i));
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsVerticallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          try {
            cl.layoutVertically();
          }
 catch (          RuntimeException e) {
            VConsole.error(e);
          }
          countLayout(layoutCounts,cl);
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          try {
            rr.layout();
          }
 catch (          RuntimeException e) {
            VConsole.error(e);
          }
          countLayout(layoutCounts,rr);
        }
        if (debugLogging) {
          updatedSet.add(layout.getConnectorId());
        }
      }
    }
    if (debugLogging) {
      JsArrayString changedCids=updatedSet.dump();
      StringBuilder b=new StringBuilder("  ");
      b.append(changedCids.length());
      b.append(" requestLayout invocations in ");
      b.append(passDuration.elapsedMillis() - measureTime);
      b.append(" ms");
      if (changedCids.length() < 30) {
        for (int i=0; i < changedCids.length(); i++) {
          if (i != 0) {
            b.append(", ");
          }
 else {
            b.append(": ");
          }
          String connectorString=changedCids.get(i);
          if (changedCids.length() < 10) {
            ServerConnector connector=ConnectorMap.get(connection).getConnector(connectorString);
            connectorString=Util.getConnectorString(connector);
          }
          b.append(connectorString);
        }
      }
      VConsole.log(b.toString());
    }
    VConsole.log("Pass " + passes + " completed in "+ passDuration.elapsedMillis()+ " ms");
    if (passes > 100) {
      VConsole.log(LOOP_ABORT_MESSAGE);
      if (ApplicationConfiguration.isDebugMode()) {
        VNotification.createNotification(VNotification.DELAY_FOREVER,connection.getUIConnector().getWidget()).show(LOOP_ABORT_MESSAGE,VNotification.CENTERED,"error");
      }
      break;
    }
  }
  int postLayoutStart=totalDuration.elapsedMillis();
  JsArrayObject<ComponentConnector> componentConnectors=connectorMap.getComponentConnectorsAsJsArray();
  int size=componentConnectors.size();
  for (int i=0; i < size; i++) {
    ComponentConnector connector=componentConnectors.get(i);
    if (connector instanceof PostLayoutListener) {
      ((PostLayoutListener)connector).postLayout();
    }
  }
  int postLayoutDone=totalDuration.elapsedMillis();
  VConsole.log("Invoke post layout listeners in " + (postLayoutDone - postLayoutStart) + " ms");
  cleanMeasuredSizes();
  int cleaningTime=(totalDuration.elapsedMillis() - postLayoutDone);
  VConsole.log("Cleaned old measured sizes in " + cleaningTime + "ms");
  VConsole.log("Total layout phase time: " + totalDuration.elapsedMillis() + "ms");
}
