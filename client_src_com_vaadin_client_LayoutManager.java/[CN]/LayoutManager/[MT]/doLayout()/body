{
  getLogger().info("Starting layout phase");
  Profiler.enter("LayoutManager phase init");
  FastStringMap<Integer> layoutCounts=FastStringMap.create();
  int passes=0;
  Duration totalDuration=new Duration();
  ConnectorMap connectorMap=ConnectorMap.get(connection);
  JsArrayString dump=needsHorizontalLayout.dump();
  int dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    String layoutId=dump.get(i);
    currentDependencyTree.setNeedsHorizontalLayout(layoutId,true);
  }
  dump=needsVerticalLayout.dump();
  dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    String layoutId=dump.get(i);
    currentDependencyTree.setNeedsVerticalLayout(layoutId,true);
  }
  needsHorizontalLayout=FastStringSet.create();
  needsVerticalLayout=FastStringSet.create();
  dump=needsMeasure.dump();
  dumpLength=dump.length();
  for (int i=0; i < dumpLength; i++) {
    ServerConnector connector=connectorMap.getConnector(dump.get(i));
    if (connector != null) {
      currentDependencyTree.setNeedsMeasure((ComponentConnector)connector,true);
    }
  }
  needsMeasure=FastStringSet.create();
  measureNonConnectors();
  Profiler.leave("LayoutManager phase init");
  while (true) {
    Profiler.enter("Layout pass");
    passes++;
    performBrowserLayoutHacks();
    Profiler.enter("Layout measure connectors");
    int measuredConnectorCount=measureConnectors(currentDependencyTree,everythingNeedsMeasure);
    Profiler.leave("Layout measure connectors");
    everythingNeedsMeasure=false;
    if (measuredConnectorCount == 0) {
      getLogger().info("No more changes in pass " + passes);
      Profiler.leave("Layout pass");
      break;
    }
    int firedListeners=0;
    if (!listenersToFire.isEmpty()) {
      firedListeners=listenersToFire.size();
      Profiler.enter("Layout fire resize events");
      for (      Element element : listenersToFire) {
        Collection<ElementResizeListener> listeners=elementResizeListeners.get(element);
        if (listeners != null) {
          Profiler.enter("Layout fire resize events - listeners not null");
          Profiler.enter("ElementResizeListener.onElementResize copy list");
          ElementResizeListener[] array=listeners.toArray(new ElementResizeListener[listeners.size()]);
          Profiler.leave("ElementResizeListener.onElementResize copy list");
          ElementResizeEvent event=new ElementResizeEvent(this,element);
          for (          ElementResizeListener listener : array) {
            try {
              String key=null;
              if (Profiler.isEnabled()) {
                Profiler.enter("ElementResizeListener.onElementResize construct profiler key");
                key="ElementResizeListener.onElementResize for " + listener.getClass().getSimpleName();
                Profiler.leave("ElementResizeListener.onElementResize construct profiler key");
                Profiler.enter(key);
              }
              listener.onElementResize(event);
              if (Profiler.isEnabled()) {
                Profiler.leave(key);
              }
            }
 catch (            RuntimeException e) {
              getLogger().log(Level.SEVERE,"Error in resize listener",e);
            }
          }
          Profiler.leave("Layout fire resize events - listeners not null");
        }
      }
      listenersToFire.clear();
      Profiler.leave("Layout fire resize events");
    }
    Profiler.enter("LayoutManager handle ManagedLayout");
    FastStringSet updatedSet=FastStringSet.create();
    int layoutCount=0;
    while (currentDependencyTree.hasHorizontalConnectorToLayout() || currentDependencyTree.hasVerticaConnectorToLayout()) {
      JsArrayString layoutTargets=currentDependencyTree.getHorizontalLayoutTargetsJsArray();
      int length=layoutTargets.length();
      for (int i=0; i < length; i++) {
        ManagedLayout layout=(ManagedLayout)connectorMap.getConnector(layoutTargets.get(i));
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          try {
            String key=null;
            if (Profiler.isEnabled()) {
              key="layoutHorizontally() for " + cl.getClass().getSimpleName();
              Profiler.enter(key);
            }
            cl.layoutHorizontally();
            layoutCount++;
            if (Profiler.isEnabled()) {
              Profiler.leave(key);
            }
          }
 catch (          RuntimeException e) {
            getLogger().log(Level.SEVERE,"Error in ManagedLayout handling",e);
          }
          countLayout(layoutCounts,cl);
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          try {
            String key=null;
            if (Profiler.isEnabled()) {
              key="layout() for " + rr.getClass().getSimpleName();
              Profiler.enter(key);
            }
            rr.layout();
            layoutCount++;
            if (Profiler.isEnabled()) {
              Profiler.leave(key);
            }
          }
 catch (          RuntimeException e) {
            getLogger().log(Level.SEVERE,"Error in SimpleManagedLayout (horizontal) handling",e);
          }
          countLayout(layoutCounts,rr);
        }
        if (debugLogging) {
          updatedSet.add(layout.getConnectorId());
        }
      }
      layoutTargets=currentDependencyTree.getVerticalLayoutTargetsJsArray();
      length=layoutTargets.length();
      for (int i=0; i < length; i++) {
        ManagedLayout layout=(ManagedLayout)connectorMap.getConnector(layoutTargets.get(i));
        if (layout instanceof DirectionalManagedLayout) {
          currentDependencyTree.markAsVerticallyLayouted(layout);
          DirectionalManagedLayout cl=(DirectionalManagedLayout)layout;
          try {
            String key=null;
            if (Profiler.isEnabled()) {
              key="layoutVertically() for " + cl.getClass().getSimpleName();
              Profiler.enter(key);
            }
            cl.layoutVertically();
            layoutCount++;
            if (Profiler.isEnabled()) {
              Profiler.leave(key);
            }
          }
 catch (          RuntimeException e) {
            getLogger().log(Level.SEVERE,"Error in DirectionalManagedLayout handling",e);
          }
          countLayout(layoutCounts,cl);
        }
 else {
          currentDependencyTree.markAsHorizontallyLayouted(layout);
          currentDependencyTree.markAsVerticallyLayouted(layout);
          SimpleManagedLayout rr=(SimpleManagedLayout)layout;
          try {
            String key=null;
            if (Profiler.isEnabled()) {
              key="layout() for " + rr.getClass().getSimpleName();
              Profiler.enter(key);
            }
            rr.layout();
            layoutCount++;
            if (Profiler.isEnabled()) {
              Profiler.leave(key);
            }
          }
 catch (          RuntimeException e) {
            getLogger().log(Level.SEVERE,"Error in SimpleManagedLayout (vertical) handling",e);
          }
          countLayout(layoutCounts,rr);
        }
        if (debugLogging) {
          updatedSet.add(layout.getConnectorId());
        }
      }
    }
    Profiler.leave("LayoutManager handle ManagedLayout");
    if (debugLogging) {
      JsArrayString changedCids=updatedSet.dump();
      StringBuilder b=new StringBuilder("  ");
      b.append(changedCids.length());
      b.append(" requestLayout invocations ");
      if (changedCids.length() < 30) {
        for (int i=0; i < changedCids.length(); i++) {
          if (i != 0) {
            b.append(", ");
          }
 else {
            b.append(": ");
          }
          String connectorString=changedCids.get(i);
          if (changedCids.length() < 10) {
            ServerConnector connector=ConnectorMap.get(connection).getConnector(connectorString);
            connectorString=Util.getConnectorString(connector);
          }
          b.append(connectorString);
        }
      }
      getLogger().info(b.toString());
    }
    Profiler.leave("Layout pass");
    getLogger().info("Pass " + passes + " measured "+ measuredConnectorCount+ " elements, fired "+ firedListeners+ " listeners and did "+ layoutCount+ " layouts.");
    if (passes > 100) {
      getLogger().severe(LOOP_ABORT_MESSAGE);
      if (ApplicationConfiguration.isDebugMode()) {
        VNotification.createNotification(VNotification.DELAY_FOREVER,connection.getUIConnector().getWidget()).show(LOOP_ABORT_MESSAGE,VNotification.CENTERED,"error");
      }
      break;
    }
  }
  Profiler.enter("layout PostLayoutListener");
  JsArrayObject<ComponentConnector> componentConnectors=connectorMap.getComponentConnectorsAsJsArray();
  int size=componentConnectors.size();
  for (int i=0; i < size; i++) {
    ComponentConnector connector=componentConnectors.get(i);
    if (connector instanceof PostLayoutListener) {
      String key=null;
      if (Profiler.isEnabled()) {
        key="layout PostLayoutListener for " + connector.getClass().getSimpleName();
        Profiler.enter(key);
      }
      ((PostLayoutListener)connector).postLayout();
      if (Profiler.isEnabled()) {
        Profiler.leave(key);
      }
    }
  }
  Profiler.leave("layout PostLayoutListener");
  cleanMeasuredSizes();
  getLogger().info("Total layout phase time: " + totalDuration.elapsedMillis() + "ms");
}
