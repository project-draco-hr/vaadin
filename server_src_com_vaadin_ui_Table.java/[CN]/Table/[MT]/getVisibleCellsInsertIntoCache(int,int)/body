{
  getLogger().log(Level.FINEST,"Insert {0} rows at index {1} to existing page buffer requested",new Object[]{rows,firstIndex});
  int minPageBufferIndex=getMinPageBufferIndex();
  int maxPageBufferIndex=getMaxPageBufferIndex();
  int maxBufferSize=maxPageBufferIndex - minPageBufferIndex + 1;
  if (getPageLength() == 0) {
    maxBufferSize=pageBuffer[CELL_ITEMID].length + rows;
  }
  int currentlyCachedRowCount=pageBuffer[CELL_ITEMID].length;
  if (firstIndex + rows - 1 > maxPageBufferIndex) {
    rows=maxPageBufferIndex - firstIndex + 1;
  }
  int lastCacheRowToRemove=minPageBufferIndex - 1;
  int rowsFromBeginning=lastCacheRowToRemove - pageBufferFirstIndex + 1;
  if (lastCacheRowToRemove >= pageBufferFirstIndex) {
    unregisterComponentsAndPropertiesInRows(pageBufferFirstIndex,rowsFromBeginning);
  }
 else {
    rowsFromBeginning=0;
  }
  int firstCacheRowToRemove=firstIndex;
  int numberOfOldRowsAfterInsertedRows=Math.min(pageBufferFirstIndex + currentlyCachedRowCount + rows,maxPageBufferIndex + 1) - (firstIndex + rows - 1);
  if (numberOfOldRowsAfterInsertedRows > 0) {
    firstCacheRowToRemove+=numberOfOldRowsAfterInsertedRows;
  }
  int rowsFromAfter=currentlyCachedRowCount - (firstCacheRowToRemove - pageBufferFirstIndex);
  if (rowsFromAfter > 0) {
    unregisterComponentsAndPropertiesInRows(firstCacheRowToRemove,rowsFromAfter);
  }
  int newCachedRowCount=maxBufferSize;
  if (pageBufferFirstIndex + currentlyCachedRowCount + rows - 1 < maxPageBufferIndex) {
    newCachedRowCount-=maxPageBufferIndex - (pageBufferFirstIndex + currentlyCachedRowCount + rows - 1);
  }
 else   if (minPageBufferIndex < pageBufferFirstIndex) {
    newCachedRowCount-=pageBufferFirstIndex - minPageBufferIndex;
  }
  int firstIndexInNewPageBuffer=firstIndex - pageBufferFirstIndex - rowsFromBeginning;
  Object[][] cells=getVisibleCellsNoCache(firstIndex,rows,false);
  Object[][] newPageBuffer=new Object[pageBuffer.length][newCachedRowCount];
  for (int i=0; i < pageBuffer.length; i++) {
    for (int row=0; row < firstIndexInNewPageBuffer; row++) {
      newPageBuffer[i][row]=pageBuffer[i][rowsFromBeginning + row];
    }
    for (int row=firstIndexInNewPageBuffer; row < firstIndexInNewPageBuffer + rows; row++) {
      newPageBuffer[i][row]=cells[i][row - firstIndexInNewPageBuffer];
    }
    for (int row=firstIndexInNewPageBuffer + rows; row < newCachedRowCount; row++) {
      newPageBuffer[i][row]=pageBuffer[i][rowsFromBeginning + row - rows];
    }
  }
  pageBuffer=newPageBuffer;
  pageBufferFirstIndex=Math.max(pageBufferFirstIndex + rowsFromBeginning,minPageBufferIndex);
  if (getLogger().isLoggable(Level.FINEST)) {
    getLogger().log(Level.FINEST,"Page Buffer now contains {0} rows ({1}-{2})",new Object[]{pageBuffer[CELL_ITEMID].length,pageBufferFirstIndex,(pageBufferFirstIndex + pageBuffer[CELL_ITEMID].length - 1)});
  }
  return cells;
}
