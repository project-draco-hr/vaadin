{
  getLogger().finest("Insert " + rows + " rows at index "+ firstIndex+ " to existing page buffer requested");
  int minPageBufferIndex=getCurrentPageFirstItemIndex() - (int)(getPageLength() * getCacheRate());
  if (minPageBufferIndex < 0) {
    minPageBufferIndex=0;
  }
  int maxPageBufferIndex=getCurrentPageFirstItemIndex() + (int)(getPageLength() * (1 + getCacheRate()));
  int maxBufferSize=maxPageBufferIndex - minPageBufferIndex;
  if (getPageLength() == 0) {
    maxBufferSize=pageBuffer[0].length + rows;
  }
  int currentlyCachedRowCount=pageBuffer[CELL_ITEMID].length;
  int firstIndexInPageBuffer=firstIndex - pageBufferFirstIndex;
  if (firstIndexInPageBuffer + rows > maxBufferSize) {
    rows=maxBufferSize - firstIndexInPageBuffer;
  }
  int firstCacheRowToRemoveInPageBuffer=firstIndexInPageBuffer;
  int numberOfOldRowsAfterInsertedRows=maxBufferSize - firstIndexInPageBuffer - rows;
  if (numberOfOldRowsAfterInsertedRows > 0) {
    firstCacheRowToRemoveInPageBuffer+=numberOfOldRowsAfterInsertedRows;
  }
  if (firstCacheRowToRemoveInPageBuffer <= currentlyCachedRowCount) {
    unregisterComponentsAndPropertiesInRows(firstCacheRowToRemoveInPageBuffer + pageBufferFirstIndex,currentlyCachedRowCount - firstCacheRowToRemoveInPageBuffer + pageBufferFirstIndex);
  }
  int newCachedRowCount=currentlyCachedRowCount;
  if (maxBufferSize == 0 || currentlyCachedRowCount < maxBufferSize) {
    newCachedRowCount=currentlyCachedRowCount + rows;
    if (maxBufferSize > 0 && newCachedRowCount > maxBufferSize) {
      newCachedRowCount=maxBufferSize;
    }
  }
  Object[][] cells=getVisibleCellsNoCache(firstIndex,rows,false);
  Object[][] newPageBuffer=new Object[pageBuffer.length][newCachedRowCount];
  for (int i=0; i < pageBuffer.length; i++) {
    for (int row=0; row < firstIndexInPageBuffer; row++) {
      newPageBuffer[i][row]=pageBuffer[i][row];
    }
    for (int row=firstIndexInPageBuffer; row < firstIndexInPageBuffer + rows; row++) {
      newPageBuffer[i][row]=cells[i][row - firstIndexInPageBuffer];
    }
    for (int row=firstIndexInPageBuffer + rows; row < newCachedRowCount; row++) {
      newPageBuffer[i][row]=pageBuffer[i][row - rows];
    }
  }
  pageBuffer=newPageBuffer;
  getLogger().finest("Page Buffer now contains " + pageBuffer[CELL_ITEMID].length + " rows ("+ pageBufferFirstIndex+ "-"+ (pageBufferFirstIndex + pageBuffer[CELL_ITEMID].length - 1)+ ")");
  return cells;
}
