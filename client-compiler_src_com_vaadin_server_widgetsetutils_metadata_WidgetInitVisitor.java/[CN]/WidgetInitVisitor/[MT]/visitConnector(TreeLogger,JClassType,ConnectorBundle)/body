{
  if (ConnectorBundle.isConnectedComponentConnector(type)) {
    JClassType createWidgetClass=findInheritedMethod(type,"createWidget").getEnclosingType();
    JMethod getWidget=findInheritedMethod(type,"getWidget");
    JClassType widgetType=getWidget.getReturnType().isClass();
    if (createWidgetClass.getQualifiedSourceName().equals(AbstractComponentConnector.class.getCanonicalName())) {
      bundle.setNeedsGwtConstructor(widgetType);
      bundle.setNeedsReturnType(type,getWidget);
    }
    JClassType getTooltipParamType=type.getOracle().findType("com.google.gwt.dom.client.Element");
    JMethod getTooltipInfoMethod=findInheritedMethod(type,"getTooltipInfo",getTooltipParamType);
    if (getTooltipInfoMethod == null) {
      logger.log(Type.ERROR,"Could not find getTooltipInfo in " + type.getQualifiedSourceName());
      throw new UnableToCompleteException();
    }
    JClassType enclosingType=getTooltipInfoMethod.getEnclosingType();
    if (!enclosingType.getQualifiedSourceName().equals(AbstractComponentConnector.class.getCanonicalName())) {
      logger.log(Type.WARN,type.getQualifiedSourceName() + " has overridden getTooltipInfo");
      bundle.setHasGetTooltip(type);
    }
    JMethod getState=findInheritedMethod(type,"getState");
    JClassType stateType=getState.getReturnType().isClass();
    Collection<Property> properties=bundle.getProperties(stateType);
    for (    Property property : properties) {
      DelegateToWidget delegateToWidget=property.getAnnotation(DelegateToWidget.class);
      if (delegateToWidget != null) {
        bundle.setNeedsDelegateToWidget(property);
        String methodName=DelegateToWidget.Helper.getDelegateTarget(property.getName(),delegateToWidget.value());
        JMethod delegatedSetter=findInheritedMethod(widgetType,methodName,property.getPropertyType());
        if (delegatedSetter == null) {
          logger.log(Type.ERROR,widgetType.getName() + "." + methodName+ "("+ property.getPropertyType().getSimpleSourceName()+ ") required by @DelegateToWidget for "+ stateType.getName()+ "."+ property.getName()+ " can not be found.");
          throw new UnableToCompleteException();
        }
        bundle.setNeedsInvoker(widgetType,delegatedSetter);
        bundle.setNeedsReturnType(type,getWidget);
      }
    }
  }
}
