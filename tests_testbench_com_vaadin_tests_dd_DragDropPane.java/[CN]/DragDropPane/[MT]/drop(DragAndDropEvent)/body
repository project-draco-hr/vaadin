{
  WrapperTargetDetails ed=(WrapperTargetDetails)event.getTargetDetails();
  Transferable ctr=event.getTransferable();
  Component component=null;
  if (ctr instanceof WrapperTransferable) {
    component=((WrapperTransferable)ctr).getDraggedComponent();
  }
 else   if (ctr instanceof DataBoundTransferable) {
    Label l=new Label();
    l.setSizeUndefined();
    l.setValue("ItemId : " + ((DataBoundTransferable)ctr).getItemId());
    component=l;
  }
  if (component != null) {
    if (component.getParent() != root) {
      root.addComponent(component);
      Integer left=ed.getAbsoluteLeft();
      Integer top=ed.getAbsoluteTop();
      MouseEventDetails eventDetails=ed.getMouseEvent();
      int clientX=eventDetails.getClientX();
      int clientY=eventDetails.getClientY();
      try {
        root.getPosition(component).setTopValue(Float.valueOf(clientY - top));
        root.getPosition(component).setLeftValue(Float.valueOf(clientX - left));
      }
 catch (      Exception e) {
      }
    }
 else {
      MouseEventDetails start=((WrapperTransferable)event.getTransferable()).getMouseDownEvent();
      MouseEventDetails eventDetails=ed.getMouseEvent();
      int deltaX=eventDetails.getClientX() - start.getClientX();
      int deltaY=eventDetails.getClientY() - start.getClientY();
      ComponentPosition p=root.getPosition(component);
      p.setTopValue(p.getTopValue() + deltaY);
      p.setLeftValue(p.getLeftValue() + deltaX);
    }
  }
 else {
    WrapperTransferable wtr=(WrapperTransferable)ctr;
    String object=wtr.getText();
    final Label l=new Label();
    l.setCaption("Generated from HTML5 drag:");
    if (object != null) {
      if (object.length() > 80) {
        object=object.substring(0,79);
      }
      l.setValue(object);
    }
 else {
      l.setValue("HTML5 dd");
    }
    Html5File[] files=wtr.getFiles();
    if (files != null) {
      for (      Html5File html5File : files) {
        l.setCaption(html5File.getFileName());
        html5File.setStreamVariable(new StreamVariable(){
          ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
          public OutputStream getOutputStream(){
            return byteArrayOutputStream;
          }
          public boolean listenProgress(){
            return false;
          }
          public void onProgress(          StreamingProgressEvent event){
          }
          public void streamingStarted(          StreamingStartEvent event){
          }
          public void streamingFinished(          StreamingEndEvent event){
            l.setValue((new String(byteArrayOutputStream.toByteArray()).substring(0,80) + "..."));
          }
          public void streamingFailed(          StreamingErrorEvent event){
          }
          public boolean isInterrupted(){
            return false;
          }
        }
);
      }
    }
    l.setSizeUndefined();
    root.addComponent(l);
  }
  return;
}
