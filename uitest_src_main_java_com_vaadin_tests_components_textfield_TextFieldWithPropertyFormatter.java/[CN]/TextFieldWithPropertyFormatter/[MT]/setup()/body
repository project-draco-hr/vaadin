{
  property=new Property<BigDecimal>(){
    private BigDecimal value;
    @Override public BigDecimal getValue(){
      return value;
    }
    @Override public void setValue(    BigDecimal newValue) throws ReadOnlyException {
      value=newValue;
    }
    @Override public Class<BigDecimal> getType(){
      return BigDecimal.class;
    }
    @Override public boolean isReadOnly(){
      return false;
    }
    @Override public void setReadOnly(    boolean newStatus){
    }
  }
;
  formatter=new PropertyFormatter<BigDecimal>(property){
    private final DecimalFormat df=new DecimalFormat("#,##0.00",new DecimalFormatSymbols(new Locale("en","UK")));
{
      df.setParseBigDecimal(true);
    }
    @Override public String format(    BigDecimal value){
      final String retVal;
      if (value == null) {
        retVal="";
      }
 else {
        retVal=df.format(value);
      }
      return retVal;
    }
    @Override public BigDecimal parse(    String formattedValue) throws Exception {
      if (formattedValue != null && formattedValue.trim().length() != 0) {
        BigDecimal value=(BigDecimal)df.parse(formattedValue);
        value=value.setScale(2,BigDecimal.ROUND_HALF_UP);
        return value;
      }
      return null;
    }
  }
;
  final TextField tf1=new TextField();
  tf1.setPropertyDataSource(formatter);
  addComponent(tf1);
  Button b=new Button("Sync (typing 12345.6789 and clicking this should format field)");
  b.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
    }
  }
);
  addComponent(b);
  b=new Button("Set '12345.6789' to textfield on the server side");
  b.addListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      tf1.setValue("12345.6789");
    }
  }
);
  addComponent(b);
}
