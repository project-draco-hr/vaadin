{
  TypeOracle typeOracle=context.getTypeOracle();
  for (Iterator<Class<? extends Paintable>> iterator=paintablesHavingWidgetAnnotation.iterator(); iterator.hasNext(); ) {
    Class<? extends Paintable> class1=iterator.next();
    Class<? extends com.vaadin.terminal.gwt.client.VPaintableWidget> clientClass=getClientClass(class1);
    if (typeOracle.findType(clientClass.getName()) == null) {
      logger.log(Type.WARN,"Widget class " + clientClass.getName() + " was not found. The component "+ class1.getName()+ " will not be included in the widgetset.");
      iterator.remove();
    }
  }
  logger.log(Type.INFO,"Widget set will contain implementations for following components: ");
  TreeSet<String> classNames=new TreeSet<String>();
  HashMap<String,String> loadStyle=new HashMap<String,String>();
  for (  Class<? extends Paintable> class1 : paintablesHavingWidgetAnnotation) {
    String className=class1.getCanonicalName();
    classNames.add(className);
    if (getLoadStyle(class1) == LoadStyle.DEFERRED) {
      loadStyle.put(className,"DEFERRED");
    }
 else     if (getLoadStyle(class1) == LoadStyle.LAZY) {
      loadStyle.put(className,"LAZY");
    }
  }
  for (  String className : classNames) {
    String msg=className;
    if (loadStyle.containsKey(className)) {
      msg+=" (load style: " + loadStyle.get(className) + ")";
    }
    logger.log(Type.INFO,"\t" + msg);
  }
}
