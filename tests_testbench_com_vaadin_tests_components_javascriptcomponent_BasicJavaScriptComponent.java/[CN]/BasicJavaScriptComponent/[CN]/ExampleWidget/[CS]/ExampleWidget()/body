{
  registerRpc(new TestRpc(){
    @Override public void sendRpc(    String message){
      log.log("Got RPC message: " + message);
    }
  }
);
  registerCallback("messageToServer",new JavaScriptCallback(){
    @Override public void call(    JSONArray arguments) throws JSONException {
      log.log("Got callback message: " + arguments.getString(0));
    }
  }
);
  registerCallback("reportParentIds",new JavaScriptCallback(){
    @Override public void call(    JSONArray arguments) throws JSONException {
      JSONArray parentIds=arguments.getJSONArray(0);
      if (!parentIds.getString(0).equals(getConnectorId())) {
        log.log("Connector ids doesn't match");
      }
      HasComponents parent=getParent();
      int i=1;
      while (parent != null) {
        if (!parentIds.getString(i).equals(parent.getConnectorId())) {
          log.log("parentIds[" + i + "] doesn't match");
        }
        i++;
        parent=parent.getParent();
      }
      log.log("Parent ids checked");
    }
  }
);
  getRpcProxy(TestRpc.class).sendRpc("RPC message");
  invokeCallback("messageToClient","Callback message");
  getState().setMessages(Arrays.asList("First state message","Second state message"));
  ClassResource resource=new ClassResource("test",BasicJavaScriptComponent.this.getApplication());
  getState().setUrl(new ResourceReference(resource));
}
