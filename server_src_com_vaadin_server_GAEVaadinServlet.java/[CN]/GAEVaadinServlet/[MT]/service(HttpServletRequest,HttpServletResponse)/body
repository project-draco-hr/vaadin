{
  VaadinServletRequest request=new VaadinServletRequest(unwrappedRequest,getService());
  VaadinServletResponse response=new VaadinServletResponse(unwrappedResponse,getService());
  if (isCleanupRequest(request)) {
    cleanDatastore();
    return;
  }
  if (isStaticResourceRequest(request)) {
    super.service(request,response);
    cleanSession(request);
    return;
  }
  if (ServletPortletHelper.isAppRequest(request)) {
    getApplicationContext(request,MemcacheServiceFactory.getMemcacheService());
    super.service(request,response);
    cleanSession(request);
    return;
  }
  final HttpSession session=request.getSession(getService().requestCanCreateSession(request));
  if (session == null) {
    try {
      getService().handleSessionExpired(request,response);
    }
 catch (    ServiceException e) {
      throw new ServletException(e);
    }
    cleanSession(request);
    return;
  }
  boolean locked=false;
  MemcacheService memcache=null;
  String mutex=MUTEX_BASE + session.getId();
  memcache=MemcacheServiceFactory.getMemcacheService();
  try {
    long started=new Date().getTime();
    if (!ServletPortletHelper.isUIDLRequest(request)) {
      while (new Date().getTime() - started < MAX_UIDL_WAIT_MILLISECONDS) {
        locked=memcache.put(mutex,1,Expiration.byDeltaSeconds(40),MemcacheService.SetPolicy.ADD_ONLY_IF_NOT_PRESENT);
        if (locked) {
          break;
        }
        try {
          Thread.sleep(RETRY_AFTER_MILLISECONDS);
        }
 catch (        InterruptedException e) {
          getLogger().finer("Thread.sleep() interrupted while waiting for lock. Trying again. " + e);
        }
      }
    }
    if (!locked) {
      response.setStatus(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
      response.setHeader("Retry-After","" + RETRY_AFTER_MILLISECONDS);
      return;
    }
    VaadinSession ctx=getApplicationContext(request,memcache);
    super.service(request,response);
    started=new Date().getTime();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(ctx);
    oos.flush();
    byte[] bytes=baos.toByteArray();
    started=new Date().getTime();
    String id=AC_BASE + session.getId();
    Date expire=new Date(started + (getMaxInactiveIntervalSeconds(session) * 1000));
    Expiration expires=Expiration.onDate(expire);
    memcache.put(id,bytes,expires);
    DatastoreService ds=DatastoreServiceFactory.getDatastoreService();
    Entity entity=new Entity(AC_BASE,id);
    entity.setProperty(PROPERTY_EXPIRES,expire.getTime());
    entity.setProperty(PROPERTY_DATA,new Blob(bytes));
    ds.put(entity);
  }
 catch (  DeadlineExceededException e) {
    getLogger().log(Level.WARNING,"DeadlineExceeded for {0}",session.getId());
    sendDeadlineExceededNotification(request,response);
  }
catch (  NotSerializableException e) {
    getLogger().log(Level.SEVERE,"Not serializable!",e);
    sendNotSerializableNotification(request,response);
  }
catch (  Exception e) {
    getLogger().log(Level.WARNING,"An exception occurred while servicing request.",e);
    sendCriticalErrorNotification(request,response);
  }
 finally {
    if (locked) {
      memcache.delete(mutex);
    }
    cleanSession(request);
  }
}
