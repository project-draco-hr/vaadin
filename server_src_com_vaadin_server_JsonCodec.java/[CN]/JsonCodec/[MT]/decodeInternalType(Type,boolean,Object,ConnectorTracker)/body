{
  if (!isInternalType(targetType)) {
    throw new JSONException("Type " + targetType + " is not a supported internal type.");
  }
  String transportType=getInternalTransportType(targetType);
  if (encodedJsonValue == JSONObject.NULL) {
    return null;
  }
  if (targetType == UidlValue.class) {
    return decodeUidlValue((JSONArray)encodedJsonValue,connectorTracker);
  }
  if (JsonConstants.VTYPE_LIST.equals(transportType)) {
    return decodeList(targetType,restrictToInternalTypes,(JSONArray)encodedJsonValue,connectorTracker);
  }
 else   if (JsonConstants.VTYPE_SET.equals(transportType)) {
    return decodeSet(targetType,restrictToInternalTypes,(JSONArray)encodedJsonValue,connectorTracker);
  }
 else   if (JsonConstants.VTYPE_MAP.equals(transportType)) {
    return decodeMap(targetType,restrictToInternalTypes,encodedJsonValue,connectorTracker);
  }
  if (JsonConstants.VTYPE_ARRAY.equals(transportType)) {
    return decodeObjectArray(targetType,(JSONArray)encodedJsonValue,connectorTracker);
  }
 else   if (JsonConstants.VTYPE_STRINGARRAY.equals(transportType)) {
    return decodeStringArray((JSONArray)encodedJsonValue);
  }
  String stringValue=String.valueOf(encodedJsonValue);
  if (JsonConstants.VTYPE_CONNECTOR.equals(transportType)) {
    return connectorTracker.getConnector(stringValue);
  }
  if (JsonConstants.VTYPE_STRING.equals(transportType)) {
    return stringValue;
  }
 else   if (JsonConstants.VTYPE_INTEGER.equals(transportType)) {
    return Integer.valueOf(stringValue);
  }
 else   if (JsonConstants.VTYPE_LONG.equals(transportType)) {
    return Long.valueOf(stringValue);
  }
 else   if (JsonConstants.VTYPE_FLOAT.equals(transportType)) {
    return Float.valueOf(stringValue);
  }
 else   if (JsonConstants.VTYPE_DOUBLE.equals(transportType)) {
    return Double.valueOf(stringValue);
  }
 else   if (JsonConstants.VTYPE_BOOLEAN.equals(transportType)) {
    return Boolean.valueOf(stringValue);
  }
  throw new JSONException("Unknown type " + transportType);
}
