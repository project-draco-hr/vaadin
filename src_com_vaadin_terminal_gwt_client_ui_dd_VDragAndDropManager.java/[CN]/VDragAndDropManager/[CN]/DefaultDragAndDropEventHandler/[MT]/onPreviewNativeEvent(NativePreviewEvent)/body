{
  NativeEvent nativeEvent=event.getNativeEvent();
  int typeInt=event.getTypeInt();
  if (typeInt == Event.ONKEYDOWN) {
    int keyCode=event.getNativeEvent().getKeyCode();
    if (keyCode == KeyCodes.KEY_ESCAPE) {
      interruptDrag();
      event.cancel();
      event.getNativeEvent().preventDefault();
    }
    return;
  }
  currentDrag.setCurrentGwtEvent(nativeEvent);
  updateDragImagePosition();
  Element targetElement=Element.as(nativeEvent.getEventTarget());
  if (dragElement != null && dragElement.isOrHasChild(targetElement)) {
    String display=dragElement.getStyle().getDisplay();
    dragElement.getStyle().setDisplay(Display.NONE);
    try {
      int x=nativeEvent.getClientX();
      int y=nativeEvent.getClientY();
      targetElement=Util.getElementFromPoint(x,y);
      if (targetElement == null) {
        event.cancel();
        nativeEvent.stopPropagation();
        return;
      }
 else {
switch (typeInt) {
case Event.ONMOUSEOVER:
case Event.ONMOUSEOUT:
          return;
case Event.ONMOUSEMOVE:
        VDropHandler findDragTarget=findDragTarget(targetElement);
      if (findDragTarget != currentDropHandler) {
        if (currentDropHandler != null) {
          currentDropHandler.dragLeave(currentDrag);
          currentDrag.getDropDetails().clear();
          serverCallback=null;
        }
        currentDropHandler=findDragTarget;
        if (findDragTarget != null) {
        }
        if (currentDropHandler != null) {
          currentDrag.setElementOver((com.google.gwt.user.client.Element)targetElement);
          currentDropHandler.dragEnter(currentDrag);
        }
      }
 else       if (findDragTarget != null) {
        currentDrag.setElementOver((com.google.gwt.user.client.Element)targetElement);
        currentDropHandler.dragOver(currentDrag);
      }
    nativeEvent.preventDefault();
  return;
default :
currentDrag.setElementOver((com.google.gwt.user.client.Element)targetElement);
break;
}
}
}
 catch (RuntimeException e) {
throw e;
}
 finally {
dragElement.getStyle().setProperty("display",display);
}
}
switch (typeInt) {
case Event.ONMOUSEOVER:
VDropHandler target=findDragTarget(targetElement);
if (target != null && target != currentDropHandler) {
if (currentDropHandler != null) {
currentDropHandler.dragLeave(currentDrag);
currentDrag.getDropDetails().clear();
}
currentDropHandler=target;
target.dragEnter(currentDrag);
}
 else if (target == null && currentDropHandler != null) {
currentDropHandler.dragLeave(currentDrag);
currentDrag.getDropDetails().clear();
currentDropHandler=null;
}
break;
case Event.ONMOUSEOUT:
Element relatedTarget=Element.as(nativeEvent.getRelatedEventTarget());
VDropHandler newDragHanler=findDragTarget(relatedTarget);
if (dragElement != null && dragElement.isOrHasChild(relatedTarget)) {
return;
}
if (currentDropHandler != null && currentDropHandler != newDragHanler) {
currentDropHandler.dragLeave(currentDrag);
currentDrag.getDropDetails().clear();
currentDropHandler=null;
serverCallback=null;
}
break;
case Event.ONMOUSEMOVE:
if (currentDropHandler != null) {
currentDropHandler.dragOver(currentDrag);
}
nativeEvent.preventDefault();
break;
case Event.ONMOUSEUP:
endDrag();
break;
default :
break;
}
}
