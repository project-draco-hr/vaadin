{
  interruptDrag();
  currentDrag=new VDragEvent(transferable,startEvent);
  updateCurrentEvent(startEvent);
  final Command startDrag=new Command(){
    public void execute(){
      VDropHandler dh=null;
      if (startEvent != null) {
        dh=findDragTarget((Element)currentDrag.currentGwtEvent.getEventTarget().cast());
      }
      if (dh != null) {
        currentDropHandler=dh;
        dh.dragEnter(currentDrag);
      }
      if (handleDragEvents) {
        handlerRegistration=Event.addNativePreviewHandler(defaultDragAndDropEventHandler);
      }
    }
  }
;
  if (handleDragEvents) {
    if (Event.as(startEvent).getTypeInt() == Event.ONMOUSEDOWN) {
      deferredStartRegistration=Event.addNativePreviewHandler(new NativePreviewHandler(){
        public void onPreviewNativeEvent(        NativePreviewEvent event){
          int typeInt=event.getTypeInt();
switch (typeInt) {
case Event.ONKEYDOWN:
case Event.ONKEYPRESS:
case Event.ONKEYUP:
            break;
case Event.ONMOUSEMOVE:
          deferredStartRegistration.removeHandler();
        deferredStartRegistration=null;
      updateCurrentEvent(event.getNativeEvent());
    startDrag.execute();
default :
  deferredStartRegistration.removeHandler();
deferredStartRegistration=null;
break;
}
}
}
);
}
 else {
startDrag.execute();
}
}
 else {
startDrag.execute();
}
return currentDrag;
}
