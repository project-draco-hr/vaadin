{
  interruptDrag();
  isStarted=false;
  currentDrag=new VDragEvent(transferable,startEvent);
  currentDrag.setCurrentGwtEvent(startEvent);
  final Command startDrag=new Command(){
    public void execute(){
      isStarted=true;
      addActiveDragSourceStyleName();
      VDropHandler dh=null;
      if (startEvent != null) {
        dh=findDragTarget(Element.as(currentDrag.getCurrentGwtEvent().getEventTarget()));
      }
      if (dh != null) {
        currentDropHandler=dh;
        dh.dragEnter(currentDrag);
      }
      if (handleDragEvents) {
        handlerRegistration=Event.addNativePreviewHandler(defaultDragAndDropEventHandler);
        if (dragElement != null && dragElement.getParentElement() == null) {
          lazyAttachDragElement.cancel();
          lazyAttachDragElement.run();
        }
      }
      Event.setCapture(RootPanel.getBodyElement());
    }
    private void addActiveDragSourceStyleName(){
      Paintable dragSource=currentDrag.getTransferable().getDragSource();
      ((Widget)dragSource).addStyleName(ACTIVE_DRAG_SOURCE_STYLENAME);
    }
  }
;
  final int eventType=Event.as(startEvent).getTypeInt();
  if (handleDragEvents && (eventType == Event.ONMOUSEDOWN || eventType == Event.ONTOUCHSTART)) {
    deferredStartRegistration=Event.addNativePreviewHandler(new NativePreviewHandler(){
      public void onPreviewNativeEvent(      NativePreviewEvent event){
        int typeInt=event.getTypeInt();
switch (typeInt) {
case Event.ONMOUSEOVER:
          if (dragElement == null) {
            break;
          }
        EventTarget currentEventTarget=event.getNativeEvent().getCurrentEventTarget();
      if (Node.is(currentEventTarget) && !dragElement.isOrHasChild(Node.as(currentEventTarget))) {
        break;
      }
case Event.ONKEYDOWN:
case Event.ONKEYPRESS:
case Event.ONKEYUP:
case Event.ONBLUR:
    break;
case Event.ONMOUSEOUT:
  if (dragElement == null) {
    break;
  }
EventTarget relatedEventTarget=event.getNativeEvent().getRelatedEventTarget();
if (Node.is(relatedEventTarget) && !dragElement.isOrHasChild(Node.as(relatedEventTarget))) {
break;
}
case Event.ONMOUSEMOVE:
case Event.ONTOUCHMOVE:
if (deferredStartRegistration != null) {
deferredStartRegistration.removeHandler();
deferredStartRegistration=null;
}
currentDrag.setCurrentGwtEvent(event.getNativeEvent());
startDrag.execute();
break;
default :
if (deferredStartRegistration != null) {
deferredStartRegistration.removeHandler();
deferredStartRegistration=null;
}
currentDrag=null;
clearDragElement();
break;
}
}
}
);
}
 else {
startDrag.execute();
}
return currentDrag;
}
