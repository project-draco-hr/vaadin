{
  isRendering=true;
  super.updateFromUIDL(uidl,client);
  if (uidl.getBooleanAttribute("cached") || uidl.getBooleanAttribute("invisible")) {
    isRendering=false;
    return;
  }
  handleHandlerRegistration();
  if (allowOrientationUpdate) {
    handleOrientationUpdate(uidl);
  }
  ArrayList<Widget> uidlWidgets=new ArrayList<Widget>(uidl.getChildCount());
  ArrayList<ChildComponentContainer> relativeSizeComponents=new ArrayList<ChildComponentContainer>();
  ArrayList<UIDL> relativeSizeComponentUIDL=new ArrayList<UIDL>();
  int pos=0;
  for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL childUIDL=(UIDL)it.next();
    final Paintable child=client.getPaintable(childUIDL);
    Widget widget=(Widget)child;
    ChildComponentContainer childComponentContainer=getComponentContainer(widget);
    if (childComponentContainer == null) {
      childComponentContainer=createChildContainer(widget);
    }
    addOrMoveChild(childComponentContainer,pos++);
    if (!Util.isCached(childUIDL)) {
      FloatSize relativeSize=Util.parseRelativeSize(childUIDL);
      childComponentContainer.setRelativeSize(relativeSize);
    }
    if (childComponentContainer.isComponentRelativeSized(orientation)) {
      relativeSizeComponents.add(childComponentContainer);
      relativeSizeComponentUIDL.add(childUIDL);
    }
 else {
      if (isDynamicWidth()) {
        childComponentContainer.renderChild(childUIDL,client,-1);
      }
 else {
        childComponentContainer.renderChild(childUIDL,client,activeLayoutSize.getWidth());
      }
      if (sizeHasChangedDuringRendering && Util.isCached(childUIDL)) {
        client.handleComponentRelativeSize(childComponentContainer.getWidget());
      }
    }
    uidlWidgets.add(widget);
  }
  removeChildrenAfter(pos);
  updateAlignmentsAndExpandRatios(uidl,uidlWidgets);
  updateWidgetSizes();
  recalculateLayout();
  for (int i=0; i < relativeSizeComponents.size(); i++) {
    ChildComponentContainer childComponentContainer=relativeSizeComponents.get(i);
    UIDL childUIDL=relativeSizeComponentUIDL.get(i);
    if (isDynamicWidth()) {
      childComponentContainer.renderChild(childUIDL,client,-1);
    }
 else {
      childComponentContainer.renderChild(childUIDL,client,activeLayoutSize.getWidth());
    }
    if (Util.isCached(childUIDL)) {
      client.handleComponentRelativeSize(childComponentContainer.getWidget());
    }
  }
  for (  ChildComponentContainer childComponentContainer : widgetToComponentContainer.values()) {
    childComponentContainer.updateWidgetSize();
  }
  if ((isHorizontal() && isDynamicHeight()) || (isVertical() && isDynamicWidth())) {
    layoutSizeMightHaveChanged();
  }
  updateContainerMargins();
  if (updateRelativeSizesInNonMainDirection()) {
    updateWidgetSizes();
    layoutSizeMightHaveChanged();
  }
  calculateAlignments();
  setRootSize();
  if (BrowserInfo.get().isIE()) {
    root.getStyle().setProperty("zoom","1");
  }
  isRendering=false;
  sizeHasChangedDuringRendering=false;
}
