{
  final Object oldValue=getInternalValue();
  if (dataSource != null && Property.ValueChangeNotifier.class.isAssignableFrom(dataSource.getClass())) {
    ((Property.ValueChangeNotifier)dataSource).removeListener(this);
  }
  if (dataSource != null && Property.ReadOnlyStatusChangeNotifier.class.isAssignableFrom(dataSource.getClass())) {
    ((Property.ReadOnlyStatusChangeNotifier)dataSource).removeListener(this);
  }
  dataSource=newDataSource;
  if (newDataSource != null && (getValueConverter() == null || !getValueConverter().getSourceType().isAssignableFrom(newDataSource.getType()))) {
    updateValueConverterFromFactory(newDataSource.getType());
  }
  try {
    if (dataSource != null) {
      T fieldValue=convertFromDataSource(getDataSourceValue());
      setInternalValue(fieldValue);
    }
    setModified(false);
  }
 catch (  final Throwable e) {
    currentBufferedSourceException=new Buffered.SourceException(this,e);
    setModified(true);
  }
  if (dataSource instanceof Property.ValueChangeNotifier) {
    ((Property.ValueChangeNotifier)dataSource).addListener(this);
  }
  if (dataSource instanceof Property.ReadOnlyStatusChangeNotifier) {
    ((Property.ReadOnlyStatusChangeNotifier)dataSource).addListener(this);
  }
  if (dataSource instanceof Validatable) {
    final Collection<Validator> validators=((Validatable)dataSource).getValidators();
    if (validators != null) {
      for (final Iterator<Validator> i=validators.iterator(); i.hasNext(); ) {
        addValidator(i.next());
      }
    }
  }
  T value=getInternalValue();
  if ((value != oldValue) && ((value != null && !value.equals(oldValue)) || value == null)) {
    fireValueChange(false);
  }
}
