{
  if (propertyId.equals("trainingType")) {
    return getTrainingTypeComboboxFor(itemId);
  }
  if (propertyId.equals("secondaryTypes")) {
    return getSecondaryTypesList(itemId);
  }
  final Field f=super.createField(container,itemId,propertyId,uiContext);
  if (f != null) {
    if (f instanceof TextField) {
      TextField tf=(TextField)f;
      tf.setWidth("100%");
    }
    if (propertyId.equals("kilometers")) {
      f.setWidth("4em");
      f.addValidator(new Validator(){
        public boolean isValid(        Object value){
          try {
            @SuppressWarnings("unused") float f=Float.parseFloat((String)value);
            return true;
          }
 catch (          Exception e) {
            f.getRoot().showNotification("Bad number value");
            f.setValue(0);
            return false;
          }
        }
        public void validate(        Object value) throws InvalidValueException {
        }
      }
);
    }
    if (propertyId.equals("date")) {
      ((DateField)f).setResolution(DateField.RESOLUTION_MIN);
    }
  }
  return f;
}
