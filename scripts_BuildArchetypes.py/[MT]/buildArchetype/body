def buildArchetype(archetype):
    global args, archetypeGroup, resultPath, group, mavenCmd
    artifactId = ('test-%s-%s' % (archetype, args.version.replace('.', '-')))
    logFile = open(join(resultPath, ('%s.log' % archetype)), 'w')
    cmd = [mavenCmd, 'archetype:generate']
    cmd.append(('-DarchetypeGroupId=%s' % archetypeGroup))
    cmd.append(('-DarchetypeArtifactId=%s' % archetype))
    cmd.append(('-DarchetypeVersion=%s' % args.version))
    cmd.append(('-DarchetypeRepository=%s' % (repo % args.archetype)))
    cmd.append(('-DgroupId=%s' % group))
    cmd.append(('-DartifactId=%s' % artifactId))
    cmd.append('-Dversion=1.0-SNAPSHOT')
    cmd.append('-DinteractiveMode=false')
    print ('Generating pom.xml for archetype %s' % archetype)
    subprocess.check_call(cmd, stdout=logFile)
    print 'Add staging repositories to pom.xml'
    updateRepositories(artifactId)
    print 'Do maven clean package validate'
    subprocess.check_call([mavenCmd, 'clean', 'package', 'validate'], cwd=join(getcwd(), artifactId), stdout=logFile)
    warFiles = glob(join(getcwd(), artifactId, 'target', '*.war'))
    warFiles.extend(glob(join(getcwd(), artifactId, '*', 'target', '*.war')))
    for warFile in warFiles:
        if (len(warFiles) == 1):
            deployName = ('%s.war' % archetype)
        else:
            deployName = ('%s-%d' % (archetype, warFiles.index(warFile)))
        print ('Copying .war file %s as %s to result folder' % (basename(warFile), deployName))
        copy(warFile, join(resultPath, ('%s' % deployName)))
