import subprocess, sys
from os.path import join
archetypeGroup = 'com.vaadin'
archetypes = ['vaadin-archetype-widget', 'vaadin-archetype-application', 'vaadin-archetype-application-example', 'vaadin-archetype-application-multimodule']
group = 'testpkg'
log = None
args = None
if (__name__ == '__main__'):
    from BuildHelpers import mavenValidate, copyWarFiles, getLogFile, mavenCmd, updateRepositories, getArgs, removeDir, parser, resultPath
    from DeployHelpers import deployWar
    archetypesFailed = False
    args = getArgs()
    wars = {}
    for archetype in archetypes:
        artifactId = ('test-%s-%s' % (archetype, args.version.replace('.', '-')))
        try:
            log = getLogFile(archetype)
            generateArchetype(archetype, artifactId, args.pluginRepo)
            if (hasattr(args, 'fwRepo') and (args.fwRepo is not None)):
                updateRepositories(join(resultPath, artifactId), args.fwRepo)
            if (hasattr(args, 'pluginRepo') and (args.pluginRepo is not None)):
                updateRepositories(join(resultPath, artifactId), args.pluginRepo, postfix='plugin')
            mavenValidate(artifactId, logFile=log)
            warFiles = copyWarFiles(artifactId, name=archetype)
            for war in warFiles:
                wars[war] = ('%s.war' % getDeploymentContext(archetype, args.version))
            print ('%s validation succeeded!' % archetype)
        except Exception as e:
            print (('Archetype %s build failed:' % archetype), e)
            archetypesFailed = True
        try:
            removeDir(artifactId)
        except:
            pass
        print ''
    for i in wars:
        try:
            deployWar(i, wars[i])
        except Exception as e:
            print ('War %s failed to deploy: %s' % (war, e))
            archetypesFailed = True
    if archetypesFailed:
        sys.exit(1)
