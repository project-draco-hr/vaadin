{
  List returnValue=new LinkedList();
  List sourcePaths=new LinkedList();
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(this.getServletContext().getResourceAsStream(THEME_LISTING_FILE)));
    String line=null;
    while ((line=reader.readLine()) != null) {
      sourcePaths.add(THEME_DIRECTORY_PATH + line.trim());
    }
    if (this.isDebugMode(null)) {
      Log.debug("Listed " + sourcePaths.size() + " themes in "+ THEME_LISTING_FILE+ ". Loading "+ sourcePaths);
    }
  }
 catch (  Exception ignored) {
  }
  if (sourcePaths.size() <= 0) {
    if (this.isDebugMode(null)) {
      Log.debug("No themes listed in " + THEME_LISTING_FILE + ". Trying to read the content of directory "+ THEME_DIRECTORY_PATH);
    }
    try {
      String path=getResourcePath(getServletContext(),THEME_DIRECTORY_PATH);
      if (path != null) {
        File f=new File(path);
        if (f != null && f.exists())         returnValue.add(new DirectoryThemeSource(f,this));
      }
    }
 catch (    java.io.IOException je) {
      Log.info("Theme directory " + THEME_DIRECTORY_PATH + " not available. Skipped.");
    }
catch (    ThemeException e) {
      throw new ServletException("Failed to load themes from " + THEME_DIRECTORY_PATH,e);
    }
  }
  String paramValue=getApplicationOrSystemProperty(PARAMETER_THEMESOURCE,null);
  if (paramValue != null) {
    StringTokenizer st=new StringTokenizer(paramValue,";");
    while (st.hasMoreTokens()) {
      sourcePaths.add(st.nextToken());
    }
  }
  for (Iterator i=sourcePaths.iterator(); i.hasNext(); ) {
    String source=(String)i.next();
    File sourceFile=new File(source);
    try {
      if (!sourceFile.isAbsolute()) {
        returnValue.add(new ServletThemeSource(this.getServletContext(),this,source));
      }
 else       if (sourceFile.isDirectory()) {
        returnValue.add(new DirectoryThemeSource(sourceFile,this));
      }
 else {
        returnValue.add(new JarThemeSource(sourceFile,this,""));
      }
    }
 catch (    Exception e) {
      throw new ServletException("Invalid theme source: " + source,e);
    }
  }
  return returnValue;
}
