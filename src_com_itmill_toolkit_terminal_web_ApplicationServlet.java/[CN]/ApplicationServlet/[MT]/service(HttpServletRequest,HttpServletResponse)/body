{
  UIDLTransformer transformer=null;
  HttpVariableMap variableMap=null;
  OutputStream out=response.getOutputStream();
  HashSet currentlyDirtyWindowsForThisApplication=new HashSet();
  Application application=null;
  try {
    if (handleResourceRequest(request,response))     return;
    if (handleServerCommands(request,response))     return;
    application=getApplication(request);
    if (application == null)     application=createApplication(request);
    applicationToLastRequestDate.put(application,new Date());
    ((WebApplicationContext)application.getContext()).startTransaction(application,request);
    DownloadStream download=null;
synchronized (application) {
      String resourceId=request.getPathInfo();
      if (resourceId != null && resourceId.startsWith(AJAX_UIDL_URI)) {
        getApplicationManager(application).handleUidlRequest(request,response);
        return;
      }
      variableMap=getVariableMap(application,request);
      if (variableMap == null)       return;
      Map unhandledParameters=variableMap.handleVariables(request,application);
      WebBrowserProbe.handleProbeRequest(request,unhandledParameters);
      WebBrowser wb=WebBrowserProbe.getTerminalType(request.getSession());
      boolean detect=false;
      if (unhandledParameters.get("renderingMode") != null) {
        detect=((String)((Object[])unhandledParameters.get("renderingMode"))[0]).equals("detect");
      }
      if (detect || wb.getRenderingMode() == WebBrowser.RENDERING_MODE_UNDEFINED) {
        String themeName=application.getTheme();
        if (themeName == null)         themeName=DEFAULT_THEME;
        if (unhandledParameters.get("theme") != null) {
          themeName=(String)((Object[])unhandledParameters.get("theme"))[0];
        }
        Theme theme=themeSource.getThemeByName(themeName);
        if (theme == null)         throw new ServletException("Failed to load theme with name " + themeName + ". Check that theme's description.xml "+ "contains correct theme name.");
        String renderingMode=theme.getPreferredMode(wb,themeSource);
        if (Theme.MODE_AJAX.equals(renderingMode)) {
          wb.setRenderingMode(WebBrowser.RENDERING_MODE_AJAX);
        }
 else {
          wb.setRenderingMode(WebBrowser.RENDERING_MODE_HTML);
        }
      }
      if (unhandledParameters.get("renderingMode") != null) {
        String renderingMode=(String)((Object[])unhandledParameters.get("renderingMode"))[0];
        if (renderingMode.equals("html")) {
          wb.setRenderingMode(WebBrowser.RENDERING_MODE_HTML);
        }
 else         if (renderingMode.equals("ajax")) {
          wb.setRenderingMode(WebBrowser.RENDERING_MODE_AJAX);
        }
      }
      if (application.isRunning())       download=handleURI(application,request,response);
      if (download == null) {
        response.setHeader("Cache-Control","no-cache");
        response.setHeader("Pragma","no-cache");
        response.setDateHeader("Expires",0);
        Window window=null;
        if (application.isRunning())         window=getApplicationWindow(request,application,unhandledParameters);
        if (window != null && unhandledParameters != null && !unhandledParameters.isEmpty()) {
          try {
            window.handleParameters(unhandledParameters);
          }
 catch (          Throwable t) {
            application.terminalError(new ParameterHandlerErrorImpl(window,t));
          }
        }
        if (!application.isRunning()) {
          endApplication(request,response,application);
          return;
        }
        if (window == null) {
          response.setContentType("text/html");
          BufferedWriter page=new BufferedWriter(new OutputStreamWriter(out));
          page.write("<html><head><script>");
          page.write(ThemeFunctionLibrary.generateWindowScript(null,application,this,WebBrowserProbe.getTerminalType(request.getSession())));
          page.write("</script></head><body>");
          page.write("The requested window has been removed from application.");
          page.write("</body></html>");
          page.close();
          return;
        }
        if (window.getTerminal() == null) {
          window.setTerminal(wb);
        }
        String themeName=window.getTheme() != null ? window.getTheme() : DEFAULT_THEME;
        if (unhandledParameters.get("theme") != null) {
          themeName=(String)((Object[])unhandledParameters.get("theme"))[0];
        }
        Theme theme=themeSource.getThemeByName(themeName);
        if (theme == null)         throw new ServletException("Theme (named '" + themeName + "') can not be found");
        if (wb.getRenderingMode() == WebBrowser.RENDERING_MODE_AJAX) {
          writeAjaxPage(request,response,out,unhandledParameters,window,wb,theme);
          return;
        }
        if (wb.getRenderingMode() == WebBrowser.RENDERING_MODE_UNDEFINED && !(window instanceof DebugWindow)) {
          response.setContentType("text/html");
          BufferedWriter page=new BufferedWriter(new OutputStreamWriter(out));
          page.write("<html><head></head><body>");
          page.write("Unsupported browser.");
          page.write("</body></html>");
          page.close();
          return;
        }
        UIDLTransformerType transformerType=new UIDLTransformerType(wb,theme);
        transformer=this.transformerFactory.getTransformer(transformerType);
        response.setContentType(wb.getContentType());
        WebPaintTarget paintTarget=transformer.getPaintTarget(variableMap);
        DebugWindow debugWindow=(DebugWindow)application.getWindow(DebugWindow.WINDOW_NAME);
        if (debugWindow != null && debugWindow != window) {
          debugWindow.setWindowUIDL(window,"Painting...");
        }
        window.paint(paintTarget);
        paintTarget.close();
        Collection dirtyWindows=(Collection)applicationToDirtyWindowSetMap.get(application);
        if (dirtyWindows == null) {
          dirtyWindows=new HashSet();
          applicationToDirtyWindowSetMap.put(application,dirtyWindows);
        }
        currentlyDirtyWindowsForThisApplication.addAll(dirtyWindows);
        windowPainted(application,window);
        if (debugWindow != null && debugWindow != window) {
          debugWindow.setWindowUIDL(window,paintTarget.getUIDL());
        }
        ThemeFunctionLibrary.setState(application,window,transformerType.getWebBrowser(),request.getSession(),this,transformerType.getTheme().getName());
      }
    }
    if (download == null) {
      transformer.transform(out);
    }
 else {
      handleDownload(download,request,response);
    }
  }
 catch (  UIDLTransformerException te) {
    try {
      response.setContentType("text/html");
      BufferedWriter err=new BufferedWriter(new OutputStreamWriter(out));
      err.write("<html><head><title>Application Internal Error</title></head><body>");
      err.write("<h1>" + te.getMessage() + "</h1>");
      err.write(te.getHTMLDescription());
      err.write("</body></html>");
      err.close();
    }
 catch (    Throwable t) {
      Log.except("Failed to write error page: " + t + ". Original exception was: ",te);
    }
    Application currentApplication=getApplication(request);
    for (Iterator iter=currentlyDirtyWindowsForThisApplication.iterator(); iter.hasNext(); ) {
      Window dirtyWindow=(Window)iter.next();
      addDirtyWindow(currentApplication,dirtyWindow);
    }
  }
catch (  Throwable e) {
    throw new ServletException(e);
  }
 finally {
    if (transformer != null)     transformerFactory.releaseTransformer(transformer);
    if (application != null)     ((WebApplicationContext)application.getContext()).endTransaction(application,request);
    ThemeFunctionLibrary.cleanState();
  }
}
