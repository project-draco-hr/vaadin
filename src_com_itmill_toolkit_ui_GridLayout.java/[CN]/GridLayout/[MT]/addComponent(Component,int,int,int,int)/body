{
  if (component == null) {
    throw new NullPointerException("Component must not be null");
  }
  if (components.contains(component)) {
    throw new IllegalArgumentException("Component is already in the container");
  }
  final Area area=new Area(component,column1,row1,column2,row2);
  if (column2 < column1 || row2 < row1) {
    throw new IllegalArgumentException("Illegal coordinates for the component");
  }
  if (column1 < 0 || row1 < 0 || column2 >= cols || row2 >= rows) {
    throw new OutOfBoundsException(area);
  }
  checkExistingOverlaps(area);
  super.addComponent(component);
  final Iterator i=areas.iterator();
  int index=0;
  boolean done=false;
  while (!done && i.hasNext()) {
    final Area existingArea=(Area)i.next();
    if ((existingArea.row1 >= row1 && existingArea.column1 > column1) || existingArea.row1 > row1) {
      areas.add(index,area);
      components.add(index,component);
      done=true;
    }
    index++;
  }
  if (!done) {
    areas.addLast(area);
    components.addLast(component);
  }
  requestRepaint();
}
