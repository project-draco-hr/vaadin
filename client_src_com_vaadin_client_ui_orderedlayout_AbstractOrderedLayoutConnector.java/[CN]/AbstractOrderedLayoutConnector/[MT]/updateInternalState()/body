{
  int lastResponseId=getConnection().getLastResponseId();
  if (processedResponseId == lastResponseId) {
    return;
  }
  Profiler.enter("AOLC.updateInternalState");
  processedResponseId=lastResponseId;
  hasChildrenWithRelativeHeight=false;
  hasChildrenWithRelativeWidth=false;
  hasChildrenWithMiddleAlignment=false;
  needsExpand=getWidget().vertical ? !isUndefinedHeight() : !isUndefinedWidth();
  boolean onlyZeroExpands=true;
  if (needsExpand) {
    for (    ComponentConnector child : getChildComponents()) {
      double expandRatio=getState().childData.get(child).expandRatio;
      if (expandRatio != 0) {
        onlyZeroExpands=false;
        break;
      }
    }
  }
  for (  ComponentConnector child : getChildComponents()) {
    Slot slot=getWidget().getSlot(child.getWidget());
    slot.setRelativeWidth(child.isRelativeWidth());
    slot.setRelativeHeight(child.isRelativeHeight());
    if (child.delegateCaptionHandling()) {
      updateCaptionInternal(child);
    }
    List<String> childStyles=child.getState().styles;
    if (childStyles == null) {
      getWidget().setSlotStyleNames(child.getWidget(),(String[])null);
    }
 else {
      getWidget().setSlotStyleNames(child.getWidget(),childStyles.toArray(new String[childStyles.size()]));
    }
    AlignmentInfo alignment=new AlignmentInfo(getState().childData.get(child).alignmentBitmask);
    slot.setAlignment(alignment);
    if (alignment.isVerticalCenter()) {
      hasChildrenWithMiddleAlignment=true;
    }
    double expandRatio=onlyZeroExpands ? 1 : getState().childData.get(child).expandRatio;
    slot.setExpandRatio(expandRatio);
    if (child.isRelativeHeight()) {
      hasChildrenWithRelativeHeight=true;
    }
    if (child.isRelativeWidth()) {
      hasChildrenWithRelativeWidth=true;
    }
  }
  if (needsFixedHeight()) {
    getLayoutManager().addElementResizeListener(getWidget().getElement(),childComponentResizeListener);
  }
 else {
    getLayoutManager().removeElementResizeListener(getWidget().getElement(),childComponentResizeListener);
  }
  updateAllSlotListeners();
  updateLayoutHeight();
  if (needsExpand()) {
    getWidget().updateExpandedSizes();
    Scheduler.get().scheduleFinally(new ScheduledCommand(){
      @Override public void execute(){
        getWidget().updateExpandCompensation();
      }
    }
);
  }
 else {
    getWidget().clearExpand();
  }
  Profiler.leave("AOLC.updateInternalState");
}
