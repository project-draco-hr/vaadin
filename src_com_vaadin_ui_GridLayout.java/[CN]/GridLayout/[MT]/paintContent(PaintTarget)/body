{
  super.paintContent(target);
  target.addAttribute("h",rows);
  target.addAttribute("w",cols);
  target.addAttribute("structuralChange",structuralChange);
  structuralChange=false;
  if (spacing) {
    target.addAttribute("spacing",spacing);
  }
  final Iterator areaiterator=areas.iterator();
  Area area=areaiterator.hasNext() ? (Area)areaiterator.next() : null;
  final HashMap cellUsed=new HashMap();
  int emptyCells=0;
  final String[] alignmentsArray=new String[components.size()];
  final Integer[] columnExpandRatioArray=new Integer[cols];
  final Integer[] rowExpandRatioArray=new Integer[rows];
  int realColExpandRatioSum=0;
  float colSum=getExpandRatioSum(columnExpandRatio);
  if (colSum == 0) {
    float equalSize=1 / (float)cols;
    int myRatio=Math.round(equalSize * 1000);
    for (int i=0; i < cols; i++) {
      columnExpandRatioArray[i]=myRatio;
    }
    realColExpandRatioSum=myRatio * cols;
  }
 else {
    for (int i=0; i < cols; i++) {
      int myRatio=Math.round((getColumnExpandRatio(i) / colSum) * 1000);
      columnExpandRatioArray[i]=myRatio;
      realColExpandRatioSum+=myRatio;
    }
  }
  boolean equallyDividedRows=false;
  int realRowExpandRatioSum=0;
  float rowSum=getExpandRatioSum(rowExpandRatio);
  if (rowSum == 0) {
    equallyDividedRows=true;
    float equalSize=1 / (float)rows;
    int myRatio=Math.round(equalSize * 1000);
    for (int i=0; i < rows; i++) {
      rowExpandRatioArray[i]=myRatio;
    }
    realRowExpandRatioSum=myRatio * rows;
  }
  int index=0;
  for (int cury=0; cury < rows; cury++) {
    target.startTag("gr");
    if (!equallyDividedRows) {
      int myRatio=Math.round((getRowExpandRatio(cury) / rowSum) * 1000);
      rowExpandRatioArray[cury]=myRatio;
      realRowExpandRatioSum+=myRatio;
    }
    for (int curx=0; curx < cols; curx++) {
      if (area != null && (area.row1 == cury) && (area.column1 == curx)) {
        if (emptyCells > 0) {
          target.startTag("gc");
          target.addAttribute("x",curx - emptyCells);
          target.addAttribute("y",cury);
          if (emptyCells > 1) {
            target.addAttribute("w",emptyCells);
          }
          target.endTag("gc");
          emptyCells=0;
        }
        final int cols=(area.column2 - area.column1) + 1;
        final int rows=(area.row2 - area.row1) + 1;
        target.startTag("gc");
        target.addAttribute("x",curx);
        target.addAttribute("y",cury);
        if (cols > 1) {
          target.addAttribute("w",cols);
        }
        if (rows > 1) {
          target.addAttribute("h",rows);
        }
        area.getComponent().paint(target);
        alignmentsArray[index++]=String.valueOf(getComponentAlignment(area.getComponent()).getBitMask());
        target.endTag("gc");
        if (areaiterator.hasNext()) {
          area=(Area)areaiterator.next();
        }
 else {
          area=null;
        }
        if (rows > 1) {
          int spannedx=curx;
          for (int j=1; j <= cols; j++) {
            cellUsed.put(new Integer(spannedx),new Integer(cury + rows - 1));
            spannedx++;
          }
        }
        if (cols > 1) {
          curx+=cols - 1;
        }
      }
 else {
        if (cellUsed.containsKey(new Integer(curx))) {
          final int rowspanDepth=((Integer)cellUsed.get(new Integer(curx))).intValue();
          if (rowspanDepth >= cury) {
            if (emptyCells > 0) {
              target.startTag("gc");
              target.addAttribute("x",curx - emptyCells);
              target.addAttribute("y",cury);
              if (emptyCells > 1) {
                target.addAttribute("w",emptyCells);
              }
              target.endTag("gc");
              emptyCells=0;
            }
          }
 else {
            emptyCells++;
            cellUsed.remove(new Integer(curx));
          }
        }
 else {
          emptyCells++;
        }
      }
    }
    if (emptyCells > 0) {
      target.startTag("gc");
      target.addAttribute("x",cols - emptyCells);
      target.addAttribute("y",cury);
      if (emptyCells > 1) {
        target.addAttribute("w",emptyCells);
      }
      target.endTag("gc");
      emptyCells=0;
    }
    target.endTag("gr");
  }
  if (rowExpandRatioArray.length > 0) {
    rowExpandRatioArray[0]-=realRowExpandRatioSum - 1000;
  }
  if (columnExpandRatioArray.length > 0) {
    columnExpandRatioArray[0]-=realColExpandRatioSum - 1000;
  }
  target.addAttribute("colExpand",columnExpandRatioArray);
  target.addAttribute("rowExpand",rowExpandRatioArray);
  target.addAttribute("alignments",alignmentsArray);
}
