{
  boolean lastReadOnlyState=readonly;
  boolean lastEnabledState=isEnabled();
  parsable=uidl.getBooleanAttribute("parsable");
  super.updateFromUIDL(uidl,client);
  String popupStyleNames=ApplicationConnection.getStyleName(POPUP_PRIMARY_STYLE_NAME,uidl,false);
  popupStyleNames+=" " + VDateField.CLASSNAME + "-"+ resolutionToString(currentResolution);
  popup.setStyleName(popupStyleNames);
  calendar.setDateTimeService(getDateTimeService());
  calendar.setShowISOWeekNumbers(isShowISOWeekNumbers());
  if (calendar.getResolution() != currentResolution) {
    calendar.setResolution(currentResolution);
    if (calendar.getDate() != null) {
      calendar.setDate((Date)getCurrentDate().clone());
      calendar.renderCalendar();
    }
  }
  calendarToggle.setEnabled(enabled);
  if (currentResolution <= RESOLUTION_MONTH) {
    calendar.setFocusChangeListener(new FocusChangeListener(){
      public void focusChanged(      Date date){
        updateValue(date);
        buildDate();
        Date date2=calendar.getDate();
        date2.setYear(date.getYear());
        date2.setMonth(date.getMonth());
      }
    }
);
  }
 else {
    calendar.setFocusChangeListener(null);
  }
  if (currentResolution > RESOLUTION_DAY) {
    calendar.setTimeChangeListener(new TimeChangeListener(){
      public void changed(      int hour,      int min,      int sec,      int msec){
        Date d=getDate();
        if (d == null) {
          d=(Date)calendar.getDate().clone();
        }
        d.setHours(hour);
        d.setMinutes(min);
        d.setSeconds(sec);
        DateTimeService.setMilliseconds(d,msec);
        updateValue(d);
        buildDate();
      }
    }
);
  }
  if (readonly) {
    calendarToggle.addStyleName(CLASSNAME + "-button-readonly");
  }
 else {
    calendarToggle.removeStyleName(CLASSNAME + "-button-readonly");
  }
  if (lastReadOnlyState != readonly || lastEnabledState != isEnabled()) {
    updateWidth();
  }
  calendarToggle.setEnabled(true);
}
