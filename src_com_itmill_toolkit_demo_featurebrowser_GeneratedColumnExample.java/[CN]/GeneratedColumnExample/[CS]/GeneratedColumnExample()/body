{
  final Table table=new Table();
  table.addContainerProperty("date",Date.class,null,"Date",null,null);
  table.addContainerProperty("quantity",Double.class,null,"Quantity (l)",null,null);
  table.addContainerProperty("price",Double.class,null,"Price (???/l)",null,null);
  table.addContainerProperty("total",Double.class,null,"Total (???)",null,null);
  table.addContainerProperty("consumption",Double.class,null,"Consumption (l/day)",null,null);
  table.addContainerProperty("dailycost",Double.class,null,"Daily Cost (???/day)",null,null);
  table.addGeneratedColumn("date",new DateColumnGenerator());
  table.addGeneratedColumn("quantity",new ValueColumnGenerator("%.2f l"));
  table.addGeneratedColumn("price",new PriceColumnGenerator());
  table.addGeneratedColumn("total",new ValueColumnGenerator("%.2f ???"));
  table.addGeneratedColumn("consumption",new ConsumptionColumnGenerator());
  table.addGeneratedColumn("dailycost",new DailyCostColumnGenerator());
  MySimpleIndexedContainer data=new MySimpleIndexedContainer(new FillUp());
  table.setContainerDataSource(data);
  table.setVisibleColumns(new Object[]{"date","quantity","price","total","consumption","dailycost"});
  data.addItem(new BeanItem(new FillUp(19,2,2005,44.96,51.21)));
  data.addItem(new BeanItem(new FillUp(30,3,2005,44.91,53.67)));
  data.addItem(new BeanItem(new FillUp(20,4,2005,42.96,49.06)));
  data.addItem(new BeanItem(new FillUp(23,5,2005,47.37,55.28)));
  data.addItem(new BeanItem(new FillUp(6,6,2005,35.34,41.52)));
  data.addItem(new BeanItem(new FillUp(30,6,2005,16.07,20.00)));
  data.addItem(new BeanItem(new FillUp(2,7,2005,36.40,36.19)));
  data.addItem(new BeanItem(new FillUp(6,7,2005,39.17,50.90)));
  data.addItem(new BeanItem(new FillUp(27,7,2005,43.43,53.03)));
  data.addItem(new BeanItem(new FillUp(17,8,2005,20,29.18)));
  data.addItem(new BeanItem(new FillUp(30,8,2005,46.06,59.09)));
  data.addItem(new BeanItem(new FillUp(22,9,2005,46.11,60.36)));
  data.addItem(new BeanItem(new FillUp(14,10,2005,41.51,50.19)));
  data.addItem(new BeanItem(new FillUp(12,11,2005,35.24,40.00)));
  data.addItem(new BeanItem(new FillUp(28,11,2005,45.26,53.27)));
  final CheckBox editable=new CheckBox("Edit the input values - calculated columns are regenerated");
  editable.setImmediate(true);
  editable.addListener(new ClickListener(){
    public void buttonClick(    ClickEvent event){
      table.setEditable(editable.booleanValue());
      if (editable.booleanValue()) {
        table.removeGeneratedColumn("quantity");
        table.removeGeneratedColumn("total");
      }
 else {
        table.addGeneratedColumn("quantity",new ValueColumnGenerator("%.2f l"));
        table.addGeneratedColumn("total",new ValueColumnGenerator("%.2f ???"));
      }
      table.setVisibleColumns(new Object[]{"date","quantity","price","total","consumption","dailycost"});
    }
  }
);
  table.setFieldFactory(new ImmediateFieldFactory());
  table.setImmediate(true);
  table.setHeight("300px");
  ExpandLayout layout=new ExpandLayout();
  layout.setMargin(true);
  layout.addComponent(new Label("Table with column generators that format and calculate cell values."));
  layout.addComponent(table);
  layout.addComponent(editable);
  layout.addComponent(new Label("Columns displayed in blue are calculated from Quantity and Total. " + "Others are simply formatted."));
  layout.expand(table);
  layout.setSizeUndefined();
  setCompositionRoot(layout);
}
