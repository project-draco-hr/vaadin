{
  final Integer[] columnExpandRatioArray=new Integer[getColumns()];
  final Integer[] rowExpandRatioArray=new Integer[getRows()];
  int realColExpandRatioSum=0;
  float colSum=getExpandRatioSum(columnExpandRatio);
  if (colSum == 0) {
    float equalSize=1 / (float)getColumns();
    int myRatio=Math.round(equalSize * 1000);
    for (int i=0; i < getColumns(); i++) {
      columnExpandRatioArray[i]=myRatio;
    }
    realColExpandRatioSum=myRatio * getColumns();
  }
 else {
    for (int i=0; i < getColumns(); i++) {
      int myRatio=Math.round((getColumnExpandRatio(i) / colSum) * 1000);
      columnExpandRatioArray[i]=myRatio;
      realColExpandRatioSum+=myRatio;
    }
  }
  int realRowExpandRatioSum=0;
  float rowSum=getExpandRatioSum(rowExpandRatio);
  if (rowSum == 0) {
    float equalSize=1 / (float)getRows();
    int myRatio=Math.round(equalSize * 1000);
    for (int i=0; i < getRows(); i++) {
      rowExpandRatioArray[i]=myRatio;
    }
    realRowExpandRatioSum=myRatio * getRows();
  }
 else {
    for (int cury=0; cury < getRows(); cury++) {
      int myRatio=Math.round((getRowExpandRatio(cury) / rowSum) * 1000);
      rowExpandRatioArray[cury]=myRatio;
      realRowExpandRatioSum+=myRatio;
    }
  }
  if (rowExpandRatioArray.length > 0) {
    rowExpandRatioArray[0]-=realRowExpandRatioSum - 1000;
  }
  if (columnExpandRatioArray.length > 0) {
    columnExpandRatioArray[0]-=realColExpandRatioSum - 1000;
  }
  target.addAttribute("colExpand",columnExpandRatioArray);
  target.addAttribute("rowExpand",rowExpandRatioArray);
}
