{
  initWidget(escalator);
  getElement().setTabIndex(0);
  activeCellHandler=new ActiveCellHandler();
  setStylePrimaryName("v-grid");
  escalator.getHeader().setEscalatorUpdater(createHeaderUpdater());
  escalator.getBody().setEscalatorUpdater(createBodyUpdater());
  escalator.getFooter().setEscalatorUpdater(createFooterUpdater());
  header.setGrid(this);
  HeaderRow defaultRow=header.appendRow();
  header.setDefaultRow(defaultRow);
  footer.setGrid(this);
  editorRow.setGrid(this);
  setSelectionMode(SelectionMode.SINGLE);
  escalator.addScrollHandler(new ScrollHandler(){
    @Override public void onScroll(    ScrollEvent event){
      fireEvent(new ScrollEvent());
    }
  }
);
  escalator.addRowVisibilityChangeHandler(new RowVisibilityChangeHandler(){
    @Override public void onRowVisibilityChange(    RowVisibilityChangeEvent event){
      if (dataSource != null) {
        dataSource.ensureAvailability(event.getFirstVisibleRow(),event.getVisibleRowCount());
      }
    }
  }
);
  addSelectionChangeHandler(new SelectionChangeHandler<T>(){
    @Override public void onSelectionChange(    SelectionChangeEvent<T> event){
      refreshBody();
    }
  }
);
  sinkEvents(getHeader().getConsumedEvents());
  sinkEvents(Arrays.asList(BrowserEvents.KEYDOWN,BrowserEvents.KEYUP,BrowserEvents.KEYPRESS));
  addHeaderKeyUpHandler(new HeaderKeyUpHandler(){
    @Override public void onKeyUp(    GridKeyUpEvent event){
      if (event.getNativeKeyCode() != KeyCodes.KEY_ENTER) {
        return;
      }
      final Cell cell=event.getActiveCell();
      final GridColumn<?,T> column=columns.get(cell.getColumn());
      if (event.isShiftKeyDown() && sortOrder != null) {
        final SortOrder so=getSortOrder(column);
        if (so != null) {
          final int idx=sortOrder.indexOf(so);
          sortOrder.set(idx,so.getOpposite());
        }
 else {
          sortOrder.add(new SortOrder(column));
        }
      }
 else {
        if (sortOrder.size() == 1 && sortOrder.get(0).getColumn() == column) {
          sortOrder.set(0,sortOrder.get(0).getOpposite());
        }
 else {
          sortOrder.clear();
          sortOrder.add(new SortOrder(column));
        }
      }
      setSortOrder(sortOrder,SortEventOriginator.USER);
    }
  }
);
}
