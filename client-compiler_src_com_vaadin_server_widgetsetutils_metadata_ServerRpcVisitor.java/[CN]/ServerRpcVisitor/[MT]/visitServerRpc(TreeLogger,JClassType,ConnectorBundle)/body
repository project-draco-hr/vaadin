{
  ClientRpcVisitor.checkGenericType(logger,type);
  bundle.setNeedsProxySupport(type);
  Set<? extends JClassType> superTypes=type.getFlattenedSupertypeHierarchy();
  for (  JClassType subType : superTypes) {
    if (subType.isInterface() != null) {
      JMethod[] methods=subType.getMethods();
      for (      JMethod method : methods) {
        ClientRpcVisitor.checkReturnType(logger,method);
        Delayed delayed=method.getAnnotation(Delayed.class);
        if (delayed != null) {
          bundle.setMethodAttribute(type,method,MethodAttribute.DELAYED);
          if (delayed.lastOnly()) {
            bundle.setMethodAttribute(type,method,MethodAttribute.LAST_ONLY);
          }
        }
        if (method.getAnnotation(BackgroundMessage.class) != null) {
          bundle.setMethodAttribute(type,method,MethodAttribute.BACKGROUND_MESSAGE);
        }
        bundle.setNeedsParamTypes(type,method);
        JType[] parameterTypes=method.getParameterTypes();
        for (        JType paramType : parameterTypes) {
          bundle.setNeedsSerialize(paramType);
        }
      }
    }
  }
}
