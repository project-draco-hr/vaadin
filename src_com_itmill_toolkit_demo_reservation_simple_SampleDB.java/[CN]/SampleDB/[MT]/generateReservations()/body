{
  final int days=30;
  final String descriptions[]={"Picking up guests from airport","Sightseeing with the guests","Moving new servers from A to B","Shopping","Customer meeting","Guests arriving at harbour","Moving furniture","Taking guests to see town"};
  final Container cat=getCategories();
  final Collection cIds=cat.getItemIds();
  for (final Iterator it=cIds.iterator(); it.hasNext(); ) {
    final Object id=it.next();
    final Item ci=cat.getItem(id);
    final String c=(String)ci.getItemProperty(Resource.PROPERTY_ID_CATEGORY).getValue();
    final Container resources=getResources(c);
    final Collection rIds=resources.getItemIds();
    final Calendar cal=Calendar.getInstance();
    cal.set(Calendar.MINUTE,0);
    cal.set(Calendar.SECOND,0);
    cal.set(Calendar.MILLISECOND,0);
    final int hourNow=new Date().getHours();
    for (int i=0; i < days; i++) {
      int r=3;
      for (final Iterator rit=rIds.iterator(); rit.hasNext() && r > 0; r--) {
        final Object rid=rit.next();
        final Item resource=resources.getItem(rid);
        final int s=hourNow - 6 + (int)Math.round(Math.random() * 6.0);
        final int e=s + 1 + (int)Math.round(Math.random() * 4.0);
        final Date start=new Date(cal.getTimeInMillis());
        start.setHours(s);
        final Date end=new Date(cal.getTimeInMillis());
        end.setHours(e);
        try {
          addReservation(resource,"Demo User",start,end,descriptions[(int)Math.floor(Math.random() * descriptions.length)]);
        }
 catch (        ResourceNotAvailableException e1) {
          e1.printStackTrace();
        }
      }
      cal.add(Calendar.DATE,1);
    }
  }
}
