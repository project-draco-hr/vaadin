{
  boolean success=true;
  if (request.getContentLength() > 0) {
    byte[] buffer=new byte[request.getContentLength()];
    ServletInputStream inputStream=request.getInputStream();
    int totalBytesRead=0;
    int bytesRead;
    while ((bytesRead=inputStream.read(buffer,totalBytesRead,MAX_BUFFER_SIZE)) != -1) {
      totalBytesRead+=bytesRead;
    }
    String changes=new String(buffer,"utf-8");
    final String[] bursts=changes.split(VAR_BURST_SEPARATOR);
    for (int bi=0; bi < bursts.length; bi++) {
      final String[] tmp=bursts[bi].split(VAR_RECORD_SEPARATOR);
      final String[][] variableRecords=new String[tmp.length][4];
      for (int i=0; i < tmp.length; i++) {
        variableRecords[i]=tmp[i].split(VAR_FIELD_SEPARATOR);
      }
      for (int i=0; i < variableRecords.length; i++) {
        String[] variable=variableRecords[i];
        String[] nextVariable=null;
        if (i + 1 < variableRecords.length) {
          nextVariable=variableRecords[i + 1];
        }
        final VariableOwner owner=(VariableOwner)idPaintableMap.get(variable[VAR_PID]);
        if (owner != null && owner.isEnabled()) {
          Map m;
          if (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
            m=new HashMap();
            m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
 else {
            m=new SingleValueMap(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
          while (nextVariable != null && variable[VAR_PID].equals(nextVariable[VAR_PID])) {
            i++;
            variable=nextVariable;
            if (i + 1 < variableRecords.length) {
              nextVariable=variableRecords[i + 1];
            }
 else {
              nextVariable=null;
            }
            m.put(variable[VAR_NAME],convertVariableValue(variable[VAR_TYPE].charAt(0),variable[VAR_VALUE]));
          }
          try {
            owner.changeVariables(request,m);
            if (owner instanceof Window && ((Window)owner).getParent() == null) {
              final Boolean close=(Boolean)m.get("close");
              if (close != null && close.booleanValue()) {
                closingWindowName=((Window)owner).getName();
              }
            }
          }
 catch (          Exception e) {
            handleChangeVariablesError(application2,(Component)owner,e,m);
          }
        }
 else {
          String msg="Warning: Ignoring variable change for ";
          if (owner != null) {
            msg+="disabled component " + owner.getClass();
            String caption=((Component)owner).getCaption();
            if (caption != null) {
              msg+=", caption=" + caption;
            }
          }
 else {
            msg+="non-existent component, VAR_PID=" + variable[VAR_PID];
            success=false;
          }
          System.err.println(msg);
          continue;
        }
      }
      if (bi < bursts.length - 1) {
        final PrintWriter outWriter=new PrintWriter(new CharArrayWriter());
        try {
          paintAfterVariablechanges(request,response,applicationServlet,true,outWriter,window);
        }
 catch (        ServletException e) {
        }
      }
    }
  }
  return success;
}
