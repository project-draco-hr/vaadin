{
  boolean repaintAll=(request.getParameter(GET_PARAM_REPAINT_ALL) != null) || request.getSession().isNew();
  final OutputStream out=response.getOutputStream();
  final PrintWriter outWriter=new PrintWriter(new BufferedWriter(new OutputStreamWriter(out,"UTF-8")));
synchronized (application) {
    Window window=null;
    if (application.isRunning()) {
      window=getApplicationWindow(request,application);
      if (window == null) {
        System.err.println("Warning, could not get window for application with request URI " + request.getRequestURI());
        return;
      }
    }
 else {
      endApplication(request,response,application);
      return;
    }
    if (!handleVariables(request,application)) {
      SystemMessages ci=null;
      try {
        Method m=application.getClass().getMethod("getSystemMessages",(Class[])null);
        ci=(Application.SystemMessages)m.invoke(null,(Object[])null);
      }
 catch (      Exception e2) {
        e2.printStackTrace();
      }
      if (ci != null) {
        String msg=ci.getOutOfSyncMessage();
        String cap=ci.getOutOfSyncCaption();
        if (msg != null || cap != null) {
          applicationServlet.criticalNotification(request,response,cap,msg,ci.getOutOfSyncURL());
          return;
        }
      }
      System.err.println("Warning: variable inconsistency - client is probably out-of-sync, repainting all.");
      repaintAll=true;
    }
    if (repaintAll) {
      for (final Iterator it=idPaintableMap.keySet().iterator(); it.hasNext(); ) {
        final Component c=(Component)idPaintableMap.get(it.next());
        if (isChildOf(window,c)) {
          it.remove();
          paintableIdMap.remove(c);
        }
      }
    }
    if (!application.isRunning()) {
      endApplication(request,response,application);
      return;
    }
    response.setContentType("application/json; charset=UTF-8");
    outWriter.print("for(;;);[{");
    outWriter.print("\"changes\":[");
    Window newWindow=getApplicationWindow(request,application);
    if (newWindow != window) {
      window=newWindow;
      repaintAll=true;
    }
    JsonPaintTarget paintTarget=new JsonPaintTarget(this,outWriter,!repaintAll);
    ArrayList paintables;
    if (repaintAll) {
      paintables=new ArrayList();
      paintables.add(window);
      locales=null;
      requireLocale(application.getLocale().toString());
    }
 else {
      for (Iterator it=paintableIdMap.keySet().iterator(); it.hasNext(); ) {
        Component p=(Component)it.next();
        if (p.getApplication() == null) {
          idPaintableMap.remove(paintableIdMap.get(p));
          it.remove();
          dirtyPaintabletSet.remove(p);
          p.removeListener(this);
        }
      }
      paintables=getDirtyComponents(window);
    }
    if (paintables != null) {
      Collections.sort(paintables,new Comparator(){
        public int compare(        Object o1,        Object o2){
          Component c1=(Component)o1;
          Component c2=(Component)o2;
          int d1=0;
          while (c1.getParent() != null) {
            d1++;
            c1=c1.getParent();
          }
          int d2=0;
          while (c2.getParent() != null) {
            d2++;
            c2=c2.getParent();
          }
          if (d1 < d2) {
            return -1;
          }
          if (d1 > d2) {
            return 1;
          }
          return 0;
        }
      }
);
      for (final Iterator i=paintables.iterator(); i.hasNext(); ) {
        final Paintable p=(Paintable)i.next();
        if (p instanceof Window) {
          final Window w=(Window)p;
          if (w.getTerminal() == null) {
            w.setTerminal(application.getMainWindow().getTerminal());
          }
        }
        if (paintTarget.needsToBePainted(p)) {
          paintTarget.startTag("change");
          paintTarget.addAttribute("format","uidl");
          final String pid=getPaintableId(p);
          paintTarget.addAttribute("pid",pid);
          p.paint(paintTarget);
          paintTarget.endTag("change");
        }
        paintablePainted(p);
      }
    }
    paintTarget.close();
    outWriter.print("]");
    outWriter.print(", \"meta\" : {");
    boolean metaOpen=false;
    if (repaintAll) {
      metaOpen=true;
      outWriter.write("\"repaintAll\":true");
    }
    final Paintable f=(Paintable)application.consumeFocus();
    if (f != null) {
      if (metaOpen) {
        outWriter.write(",");
      }
      outWriter.write("\"focus\":\"" + getPaintableId(f) + "\"");
    }
    outWriter.print("}, \"resources\" : {");
    String themeName=window.getTheme();
    if (request.getParameter("theme") != null) {
      themeName=request.getParameter("theme");
    }
    if (themeName == null) {
      themeName="default";
    }
    int resourceIndex=0;
    for (final Iterator i=paintTarget.getPreCachedResources().iterator(); i.hasNext(); ) {
      final String resource=(String)i.next();
      InputStream is=null;
      try {
        is=applicationServlet.getServletContext().getResourceAsStream("/" + ApplicationServlet.THEME_DIRECTORY_PATH + themeName+ "/"+ resource);
      }
 catch (      final Exception e) {
        e.printStackTrace();
      }
      if (is != null) {
        outWriter.print((resourceIndex++ > 0 ? ", " : "") + "\"" + resource+ "\" : ");
        final StringBuffer layout=new StringBuffer();
        try {
          final InputStreamReader r=new InputStreamReader(is,"UTF-8");
          final char[] buffer=new char[20000];
          int charsRead=0;
          while ((charsRead=r.read(buffer)) > 0) {
            layout.append(buffer,0,charsRead);
          }
          r.close();
        }
 catch (        final java.io.IOException e) {
          System.err.println("Resource transfer failed:  " + request.getRequestURI() + ". ("+ e.getMessage()+ ")");
        }
        outWriter.print("\"" + JsonPaintTarget.escapeJSON(layout.toString()) + "\"");
      }
 else {
        System.err.println("CustomLayout " + "/" + ApplicationServlet.THEME_DIRECTORY_PATH + themeName+ "/"+ resource+ " not found!");
      }
    }
    outWriter.print("}");
    printLocaleDeclarations(outWriter);
    outWriter.print("}]");
    outWriter.flush();
    outWriter.close();
  }
  out.flush();
  out.close();
}
