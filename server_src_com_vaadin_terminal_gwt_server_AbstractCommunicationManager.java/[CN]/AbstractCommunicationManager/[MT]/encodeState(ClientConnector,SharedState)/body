{
  Root root=connector.getRoot();
  ConnectorTracker connectorTracker=root.getConnectorTracker();
  Class<? extends SharedState> stateType=connector.getStateType();
  Object diffState=connectorTracker.getDiffState(connector);
  if (diffState == null) {
    diffState=new JSONObject();
    boolean emptyInitialState=JavaScriptConnectorState.class.isAssignableFrom(stateType);
    if (!emptyInitialState) {
      try {
        SharedState referenceState=stateType.newInstance();
        diffState=JsonCodec.encode(referenceState,null,stateType,root.getConnectorTracker());
      }
 catch (      Exception e) {
        getLogger().log(Level.WARNING,"Error creating reference object for state of type " + stateType.getName());
      }
    }
    connectorTracker.setDiffState(connector,diffState);
  }
  JSONObject stateJson=(JSONObject)JsonCodec.encode(state,diffState,stateType,root.getConnectorTracker());
  return stateJson;
}
