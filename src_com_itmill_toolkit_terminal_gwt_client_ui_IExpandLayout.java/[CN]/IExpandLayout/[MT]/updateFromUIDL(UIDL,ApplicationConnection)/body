{
  this.client=client;
  if (client.updateComponent(this,uidl,false))   return;
  if (uidl.hasAttribute("width")) {
    setWidth(uidl.getStringAttribute("width"));
    DOM.setStyleAttribute(DOM.getFirstChild(DOM.getFirstChild(getElement())),"width","100%");
  }
 else {
    setWidth("");
    DOM.setStyleAttribute(DOM.getFirstChild(DOM.getFirstChild(getElement())),"width","");
  }
  if (uidl.hasAttribute("height")) {
    setHeight(uidl.getStringAttribute("height"));
    DOM.setStyleAttribute(margin,"height","100%");
    DOM.setStyleAttribute(DOM.getFirstChild(DOM.getFirstChild(getElement())),"height","100%");
  }
 else {
    setHeight("");
    DOM.setStyleAttribute(margin,"height","");
    DOM.setStyleAttribute(DOM.getFirstChild(DOM.getFirstChild(getElement())),"height","");
  }
  ArrayList uidlWidgets=new ArrayList();
  for (Iterator it=uidl.getChildIterator(); it.hasNext(); ) {
    UIDL cellUidl=(UIDL)it.next();
    Widget child=client.getWidget(cellUidl.getChildUIDL(0));
    uidlWidgets.add(child);
    if (cellUidl.hasAttribute("expanded")) {
      expandedWidget=child;
      expandedWidgetUidl=cellUidl.getChildUIDL(0);
    }
  }
  ArrayList oldWidgets=getPaintables();
  Iterator oldIt=oldWidgets.iterator();
  Iterator newIt=uidlWidgets.iterator();
  Iterator newUidl=uidl.getChildIterator();
  Widget oldChild=null;
  while (newIt.hasNext()) {
    Widget child=(Widget)newIt.next();
    UIDL childUidl=((UIDL)newUidl.next()).getChildUIDL(0);
    if (oldChild == null && oldIt.hasNext()) {
      while (oldIt.hasNext()) {
        oldChild=(Widget)oldIt.next();
        if (uidlWidgets.contains(oldChild))         break;
 else {
          removePaintable((Paintable)oldChild);
          oldChild=null;
        }
      }
    }
    if (oldChild == null) {
      add(child);
    }
 else     if (child == oldChild) {
      oldChild=null;
    }
 else     if (hasChildComponent(child)) {
      removeCaption(child);
      int index=getWidgetIndex(oldChild);
      if (componentToCaption.containsKey(oldChild))       index--;
      remove(child);
      this.insert(child,index);
    }
 else {
      int index=getWidgetIndex(oldChild);
      insert(child,index);
    }
    if (child != expandedWidget)     ((Paintable)child).updateFromUIDL(childUidl,client);
  }
  while (oldIt.hasNext()) {
    oldChild=(Widget)oldIt.next();
    Paintable p=(Paintable)oldChild;
    if (!uidlWidgets.contains(p))     removePaintable(p);
  }
  handleMargins(uidl);
  if (uidlWidgets.size() == 0)   return;
  iLayout();
  ((Paintable)expandedWidget).updateFromUIDL(expandedWidgetUidl,client);
  String[] alignments=uidl.getStringAttribute("alignments").split(",");
  int alignmentIndex=0;
  Iterator it=getPaintables().iterator();
  while (it.hasNext()) {
    int alignment=Integer.parseInt((alignments[alignmentIndex++]));
    String vAlign="top";
    if ((alignment & ALIGNMENT_TOP) == ALIGNMENT_TOP)     vAlign="top";
 else     if ((alignment & ALIGNMENT_BOTTOM) == ALIGNMENT_BOTTOM)     vAlign="bottom";
 else     if ((alignment & ALIGNMENT_VERTICAL_CENTER) == ALIGNMENT_VERTICAL_CENTER)     vAlign="middle";
    String hAlign="";
    if ((alignment & ALIGNMENT_LEFT) == ALIGNMENT_LEFT)     hAlign="left";
 else     if ((alignment & ALIGNMENT_RIGHT) == ALIGNMENT_RIGHT)     hAlign="right";
 else     if ((alignment & ALIGNMENT_HORIZONTAL_CENTER) == ALIGNMENT_HORIZONTAL_CENTER)     hAlign="center";
    Element td=DOM.getParent(((Widget)it.next()).getElement());
    DOM.setStyleAttribute(td,"vertical-align",vAlign);
    DOM.setStyleAttribute(td,"text-align",hAlign);
  }
}
