{
  final int weekColumn=0;
  final int firstWeekdayColumn=1;
  final int headerRow=0;
  setWidget(1,0,days);
  setCellPadding(0);
  setCellSpacing(0);
  getFlexCellFormatter().setColSpan(1,0,5);
  getFlexCellFormatter().setStyleName(1,0,VDateField.CLASSNAME + "-calendarpanel-body");
  days.getFlexCellFormatter().setStyleName(headerRow,weekColumn,"v-week");
  days.setHTML(headerRow,weekColumn,"<strong></strong>");
  days.getFlexCellFormatter().setVisible(headerRow,weekColumn,isShowISOWeekNumbers());
  days.getRowFormatter().setStyleName(headerRow,VDateField.CLASSNAME + "-calendarpanel-weekdays");
  if (isShowISOWeekNumbers()) {
    days.getFlexCellFormatter().setStyleName(headerRow,weekColumn,"v-first");
    days.getFlexCellFormatter().setStyleName(headerRow,firstWeekdayColumn,"");
    days.getRowFormatter().addStyleName(headerRow,VDateField.CLASSNAME + "-calendarpanel-weeknumbers");
  }
 else {
    days.getFlexCellFormatter().setStyleName(headerRow,weekColumn,"");
    days.getFlexCellFormatter().setStyleName(headerRow,firstWeekdayColumn,"v-first");
  }
  days.getFlexCellFormatter().setStyleName(headerRow,firstWeekdayColumn + 6,"v-last");
  final int firstDay=getDateTimeService().getFirstDayOfWeek();
  for (int i=0; i < 7; i++) {
    int day=i + firstDay;
    if (day > 6) {
      day=0;
    }
    if (getResolution() > VDateField.RESOLUTION_MONTH) {
      days.setHTML(headerRow,firstWeekdayColumn + i,"<strong>" + getDateTimeService().getShortDay(day) + "</strong>");
    }
 else {
      days.setHTML(headerRow,firstWeekdayColumn + i,"");
    }
  }
  int dayOfMonthSelected=-1;
  int dayOfMonthToday=-1;
  boolean initiallyNull=value == null;
  if (!initiallyNull && value.getMonth() == focusedDate.getMonth() && value.getYear() == focusedDate.getYear()) {
    dayOfMonthSelected=value.getDate();
  }
  final Date today=new Date();
  if (today.getMonth() == focusedDate.getMonth() && today.getYear() == focusedDate.getYear()) {
    dayOfMonthToday=today.getDate();
  }
  final int startWeekDay=getDateTimeService().getStartWeekDay(focusedDate);
  final int daysInMonth=DateTimeService.getNumberOfDaysInMonth(focusedDate);
  int dayCount=0;
  final Date curr=new Date(focusedDate.getTime());
  for (int weekOfMonth=1; weekOfMonth < 7; weekOfMonth++) {
    boolean weekNumberProcessed[]=new boolean[]{false,false,false,false,false,false,false};
    for (int dayOfWeek=0; dayOfWeek < 7; dayOfWeek++) {
      if (!(weekOfMonth == 1 && dayOfWeek < startWeekDay)) {
        if (dayCount >= daysInMonth) {
          break;
        }
        final int dayOfMonth=++dayCount;
        curr.setDate(dayCount);
        Day day=new Day(dayOfMonth);
        if (dayOfMonthSelected == dayOfMonth) {
          day.addStyleDependentName(CN_SELECTED);
          selectedDay=day;
        }
        if (dayOfMonthToday == dayOfMonth) {
          day.addStyleDependentName(CN_TODAY);
        }
        if (dayOfMonth == focusedDate.getDate()) {
          focusedDay=day;
          focusedRow=weekOfMonth;
          if (hasFocus) {
            day.addStyleDependentName(CN_FOCUSED);
          }
        }
        days.setWidget(weekOfMonth,firstWeekdayColumn + dayOfWeek,day);
        if (!weekNumberProcessed[weekOfMonth]) {
          days.getCellFormatter().setVisible(weekOfMonth,weekColumn,isShowISOWeekNumbers());
          if (isShowISOWeekNumbers()) {
            final String baseCssClass=VDateField.CLASSNAME + "-calendarpanel-weeknumber";
            String weekCssClass=baseCssClass;
            int weekNumber=DateTimeService.getISOWeekNumber(curr);
            days.setHTML(weekOfMonth,0,"<span class=\"" + weekCssClass + "\""+ ">"+ weekNumber+ "</span>");
            weekNumberProcessed[weekOfMonth]=true;
          }
        }
      }
    }
  }
}
