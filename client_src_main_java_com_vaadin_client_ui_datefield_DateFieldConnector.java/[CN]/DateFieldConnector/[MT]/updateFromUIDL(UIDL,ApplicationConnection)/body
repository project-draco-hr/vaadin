{
  String oldLocale=getWidget().getCurrentLocale();
  getWidget().parsable=uidl.getBooleanAttribute("parsable");
  super.updateFromUIDL(uidl,client);
  getWidget().calendar.setDateTimeService(getWidget().getDateTimeService());
  getWidget().calendar.setShowISOWeekNumbers(getWidget().isShowISOWeekNumbers());
  if (getWidget().calendar.getResolution() != getWidget().getCurrentResolution()) {
    boolean hasSelectedDate=false;
    getWidget().calendar.setResolution(getWidget().getCurrentResolution());
    if (getWidget().calendar.getDate() != null && getWidget().getCurrentDate() != null) {
      hasSelectedDate=true;
      getWidget().calendar.setDate((Date)getWidget().getCurrentDate().clone());
    }
    getWidget().calendar.renderCalendar(hasSelectedDate);
  }
  if (!getWidget().getCurrentLocale().equals(oldLocale)) {
    getWidget().calendar.renderCalendar();
  }
  if (getWidget().getCurrentResolution().compareTo(Resolution.MONTH) >= 0) {
    getWidget().calendar.setFocusChangeListener(new FocusChangeListener(){
      @Override public void focusChanged(      Date date){
        getWidget().updateValue(date);
        getWidget().buildDate();
        Date date2=getWidget().calendar.getDate();
        date2.setYear(date.getYear());
        date2.setMonth(date.getMonth());
      }
    }
);
  }
 else {
    getWidget().calendar.setFocusChangeListener(null);
  }
  if (getWidget().isReadonly()) {
    getWidget().calendarToggle.addStyleName(VPopupCalendar.CLASSNAME + "-button-readonly");
  }
 else {
    getWidget().calendarToggle.removeStyleName(VPopupCalendar.CLASSNAME + "-button-readonly");
  }
  getWidget().setDescriptionForAssistiveDevices(getState().descriptionForAssistiveDevices);
  getWidget().setTextFieldTabIndex();
}
