{
  Class<?> targetClass=getClassForType(targetType);
  if (Enum.class.isAssignableFrom(targetClass)) {
    return decodeEnum(targetClass.asSubclass(Enum.class),serializedObject);
  }
  try {
    Object decodedObject=targetClass.newInstance();
    for (    PropertyDescriptor pd : Introspector.getBeanInfo(targetClass).getPropertyDescriptors()) {
      String fieldName=getTransportFieldName(pd);
      if (fieldName == null) {
        continue;
      }
      Object encodedFieldValue=serializedObject.get(fieldName);
      Type fieldType=pd.getReadMethod().getGenericReturnType();
      Object decodedFieldValue=decodeInternalOrCustomType(fieldType,encodedFieldValue,application);
      pd.getWriteMethod().invoke(decodedObject,decodedFieldValue);
    }
    return decodedObject;
  }
 catch (  IllegalArgumentException e) {
    throw new JSONException(e);
  }
catch (  IllegalAccessException e) {
    throw new JSONException(e);
  }
catch (  InvocationTargetException e) {
    throw new JSONException(e);
  }
catch (  InstantiationException e) {
    throw new JSONException(e);
  }
catch (  IntrospectionException e) {
    throw new JSONException(e);
  }
}
