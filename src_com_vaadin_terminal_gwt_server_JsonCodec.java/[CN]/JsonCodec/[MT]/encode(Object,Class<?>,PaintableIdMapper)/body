{
  if (null == value) {
    return combineTypeAndValue(JsonEncoder.VTYPE_UNDEFINED,JSONObject.NULL);
  }
 else   if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.put(array[i]);
    }
    return combineTypeAndValue(JsonEncoder.VTYPE_STRINGARRAY,jsonArray);
  }
 else   if (value instanceof String) {
    return combineTypeAndValue(JsonEncoder.VTYPE_STRING,value);
  }
 else   if (value instanceof Boolean) {
    return combineTypeAndValue(JsonEncoder.VTYPE_BOOLEAN,value);
  }
 else   if (value instanceof Number) {
    return combineTypeAndValue(getTransportType(value),value);
  }
 else   if (value instanceof Object[]) {
    Object[] array=(Object[])value;
    JSONArray jsonArray=encodeArrayContents(array,idMapper);
    return combineTypeAndValue(JsonEncoder.VTYPE_ARRAY,jsonArray);
  }
 else   if (value instanceof Map) {
    Map<String,Object> map=(Map<String,Object>)value;
    JSONObject jsonMap=encodeMapContents(map,idMapper);
    return combineTypeAndValue(JsonEncoder.VTYPE_MAP,jsonMap);
  }
 else   if (value instanceof Paintable) {
    Paintable paintable=(Paintable)value;
    return combineTypeAndValue(JsonEncoder.VTYPE_PAINTABLE,idMapper.getPaintableId(paintable));
  }
 else   if (getTransportType(value) != JsonEncoder.VTYPE_UNDEFINED) {
    return combineTypeAndValue(getTransportType(value),String.valueOf(value));
  }
 else {
    if (valueType == null) {
      valueType=value.getClass();
    }
    return combineTypeAndValue(valueType.getCanonicalName(),encodeObject(value,idMapper));
  }
}
