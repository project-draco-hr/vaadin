{
  if (valueType == null) {
    throw new IllegalArgumentException("type must be defined");
  }
  if (null == value) {
    return encodeNull();
  }
  if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.put(array[i]);
    }
    return jsonArray;
  }
 else   if (value instanceof String) {
    return value;
  }
 else   if (value instanceof Boolean) {
    return value;
  }
 else   if (value instanceof Number) {
    return value;
  }
 else   if (value instanceof Collection) {
    Collection<?> collection=(Collection<?>)value;
    JSONArray jsonArray=encodeCollection(valueType,collection,connectorTracker);
    return jsonArray;
  }
 else   if (value instanceof Object[]) {
    Object[] array=(Object[])value;
    JSONArray jsonArray=encodeArrayContents(array,connectorTracker);
    return jsonArray;
  }
 else   if (value instanceof Map) {
    Object jsonMap=encodeMap(valueType,(Map<?,?>)value,connectorTracker);
    return jsonMap;
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    if (value instanceof Component && !(AbstractCommunicationManager.isVisible((Component)value))) {
      return encodeNull();
    }
    return connector.getConnectorId();
  }
 else   if (value instanceof Enum) {
    return encodeEnum((Enum<?>)value,connectorTracker);
  }
 else   if (value instanceof JSONArray || value instanceof JSONObject) {
    return value;
  }
 else {
    return encodeObject(value,referenceValue,connectorTracker);
  }
}
