{
  if (null == value) {
    return encodeNull();
  }
  if (valueType == null) {
    valueType=value.getClass();
  }
  String internalTransportType=getInternalTransportType(valueType);
  if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.put(array[i]);
    }
    return combineTypeAndValue(JsonEncoder.VTYPE_STRINGARRAY,jsonArray);
  }
 else   if (value instanceof String) {
    return combineTypeAndValue(JsonEncoder.VTYPE_STRING,value);
  }
 else   if (value instanceof Boolean) {
    return combineTypeAndValue(JsonEncoder.VTYPE_BOOLEAN,value);
  }
 else   if (value instanceof Number) {
    return combineTypeAndValue(internalTransportType,value);
  }
 else   if (value instanceof Collection) {
    if (internalTransportType == null) {
      throw new RuntimeException("Unable to serialize unsupported type: " + valueType);
    }
    Collection<?> collection=(Collection<?>)value;
    JSONArray jsonArray=encodeCollection(collection,application);
    return combineTypeAndValue(internalTransportType,jsonArray);
  }
 else   if (value instanceof Object[]) {
    Object[] array=(Object[])value;
    JSONArray jsonArray=encodeArrayContents(array,application);
    return combineTypeAndValue(JsonEncoder.VTYPE_ARRAY,jsonArray);
  }
 else   if (value instanceof Map) {
    Map<Object,Object> map=(Map<Object,Object>)value;
    JSONObject jsonMap=encodeMapContents(map,application);
    if (!map.isEmpty() && map.keySet().iterator().next() instanceof Connector) {
      return combineTypeAndValue(JsonEncoder.VTYPE_MAP_CONNECTOR,jsonMap);
    }
 else {
      return combineTypeAndValue(JsonEncoder.VTYPE_MAP,jsonMap);
    }
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    if (value instanceof Component && !(AbstractCommunicationManager.isVisible((Component)value))) {
      return encodeNull();
    }
    return combineTypeAndValue(JsonEncoder.VTYPE_CONNECTOR,connector.getConnectorId());
  }
 else   if (internalTransportType != null) {
    return combineTypeAndValue(internalTransportType,String.valueOf(value));
  }
 else {
    return combineTypeAndValue(getCustomTransportType(valueType),encodeObject(value,application));
  }
}
