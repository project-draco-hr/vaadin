{
  if (null == value) {
    return combineTypeAndValue(JsonEncoder.VTYPE_NULL,JSONObject.NULL);
  }
  if (valueType == null) {
    valueType=value.getClass();
  }
  String transportType=getTransportType(valueType);
  if (value instanceof String[]) {
    String[] array=(String[])value;
    JSONArray jsonArray=new JSONArray();
    for (int i=0; i < array.length; ++i) {
      jsonArray.put(array[i]);
    }
    return combineTypeAndValue(JsonEncoder.VTYPE_STRINGARRAY,jsonArray);
  }
 else   if (value instanceof String) {
    return combineTypeAndValue(JsonEncoder.VTYPE_STRING,value);
  }
 else   if (value instanceof Boolean) {
    return combineTypeAndValue(JsonEncoder.VTYPE_BOOLEAN,value);
  }
 else   if (value instanceof Number) {
    return combineTypeAndValue(transportType,value);
  }
 else   if (value instanceof Collection) {
    if (transportType == null) {
      throw new RuntimeException("Unable to serialize unsupported type: " + valueType);
    }
    Collection<?> collection=(Collection<?>)value;
    JSONArray jsonArray=encodeCollection(collection,application);
    return combineTypeAndValue(transportType,jsonArray);
  }
 else   if (value instanceof Object[]) {
    Object[] array=(Object[])value;
    JSONArray jsonArray=encodeArrayContents(array,application);
    return combineTypeAndValue(JsonEncoder.VTYPE_ARRAY,jsonArray);
  }
 else   if (value instanceof Map) {
    Map<String,Object> map=(Map<String,Object>)value;
    JSONObject jsonMap=encodeMapContents(map,application);
    return combineTypeAndValue(JsonEncoder.VTYPE_MAP,jsonMap);
  }
 else   if (value instanceof Connector) {
    Connector connector=(Connector)value;
    return combineTypeAndValue(JsonEncoder.VTYPE_CONNECTOR,connector.getConnectorId());
  }
 else   if (transportType != null) {
    return combineTypeAndValue(transportType,String.valueOf(value));
  }
 else {
    return combineTypeAndValue(valueType.getCanonicalName(),encodeObject(value,application));
  }
}
