{
  super("Add reservation");
  cal=Calendar.getInstance();
  addComponent(resourceName);
  start.setResolution(DateField.RESOLUTION_MIN);
  start.setImmediate(true);
  start.setValue(new Date());
  start.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      Date startTime=(Date)start.getValue();
      Date endTime=(Date)end.getValue();
      if (endTime.before(startTime)) {
        cal.setTime(startTime);
        cal.add(Calendar.HOUR_OF_DAY,1);
        end.setValue(cal.getTime());
      }
    }
  }
);
  addComponent(start);
  end.setResolution(DateField.RESOLUTION_MIN);
  end.setImmediate(true);
  end.setValue(new Date());
  end.addListener(new ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      Date startTime=(Date)start.getValue();
      Date endTime=(Date)end.getValue();
      if (endTime.before(startTime)) {
        cal.setTime(endTime);
        cal.add(Calendar.HOUR,-1);
        start.setValue(cal.getTime());
      }
    }
  }
);
  addComponent(end);
  addComponent(desc);
  addComponent(save);
  save.addListener(new ClickListener(){
    public void buttonClick(    ClickEvent event){
      try {
        application.getDb().addReservation(res,application.getUser().toString(),(Date)start.getValue(),(Date)end.getValue(),(String)desc.getValue());
        EditorWindow.this.close();
        refreshReservations();
      }
 catch (      ResourceNotAvailableException e) {
        getWindow().showNotification("Resource is not available at that time " + "or is too close to another reservation.");
      }
    }
  }
);
}
