{
  final Root main=new Root("#1804");
  setMainWindow(main);
  com.vaadin.ui.Select s;
  s=new Select("Select with null selection allowed; required=true");
  s.setNullSelectionAllowed(true);
  s.setRequired(true);
  listOfAllFields.add(s);
  s=new Select("Select with null selection NOT allowed; required=true");
  s.setNullSelectionAllowed(false);
  s.setRequired(true);
  listOfAllFields.add(s);
  s=new Select("Testcase from the ticket #1804");
  s.setNullSelectionAllowed(false);
  s.setPropertyDataSource(new MethodProperty<String>(new TestPojo(),"id"));
  s.addValidator(new EmptyStringValidator("Selection required for test-field"));
  s.setRequired(true);
  listOfAllFields.add(s);
  s=new Select("Testcase from the ticket #1804, but without validator");
  s.setNullSelectionAllowed(false);
  s.setPropertyDataSource(new MethodProperty<String>(new TestPojo(),"id"));
  s.setRequired(true);
  listOfAllFields.add(s);
  s=new Select("Testcase from the ticket #1804, but with required=false");
  s.setNullSelectionAllowed(false);
  s.setPropertyDataSource(new MethodProperty<String>(new TestPojo(),"id"));
  s.addValidator(new EmptyStringValidator("Selection required for test-field"));
  listOfAllFields.add(s);
  s=new Select("Testcase from the ticket #1804, but without validator and with required=false");
  s.setNullSelectionAllowed(false);
  s.setPropertyDataSource(new MethodProperty<String>(new TestPojo(),"id"));
  listOfAllFields.add(s);
  s=new Select("Required=true, custom error message, null selection not allowed");
  s.setRequired(true);
  s.setNullSelectionAllowed(false);
  s.setPropertyDataSource(new MethodProperty<String>(new TestPojo(),"id"));
  s.setValue(null);
  s.setComponentError(new SystemError("Test error message"));
  listOfAllFields.add(s);
  for (Iterator<Select> i=listOfAllFields.iterator(); i.hasNext(); ) {
    s=i.next();
    main.addComponent(s);
    s.addItem("foo");
    s.addItem("");
    s.addItem("bar");
    if (s.isNullSelectionAllowed()) {
      s.addItem("<null>");
      s.setNullSelectionItemId("<null>");
    }
    s.setImmediate(true);
  }
  Button checkValidity=new Button("Check validity of the fields");
  main.addComponent(checkValidity);
  checkValidity.addListener(new Button.ClickListener(){
    public void buttonClick(    ClickEvent event){
      StringBuffer msg=new StringBuffer();
      for (Iterator<Select> i=listOfAllFields.iterator(); i.hasNext(); ) {
        AbstractField<?> af=i.next();
        msg.append("<h1>" + af.getCaption() + "</h1>\n");
        msg.append("Value=" + af.getValue() + "<br/>\n");
        if (af.isValid()) {
          msg.append("VALID\n<hr/>");
        }
 else {
          msg.append("INVALID<br/><i>" + af.getErrorMessage() + "</i><hr/>");
        }
      }
      Window w=new Window("Status of the fields");
      w.setModal(true);
      w.setScrollable(true);
      w.setHeight("80%");
      w.addComponent(new Label(msg.toString(),Label.CONTENT_XHTML));
      main.addWindow(w);
    }
  }
);
}
