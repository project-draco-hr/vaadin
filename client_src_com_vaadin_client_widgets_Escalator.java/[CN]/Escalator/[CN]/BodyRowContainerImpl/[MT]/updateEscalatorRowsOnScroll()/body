{
  if (visualRowOrder.isEmpty()) {
    return;
  }
  boolean rowsWereMoved=false;
  final double topElementPosition;
  final double nextRowBottomOffset;
  SpacerContainer.SpacerImpl topSpacer=spacerContainer.getSpacer(getTopRowLogicalIndex() - 1);
  if (topSpacer != null) {
    topElementPosition=topSpacer.getTop();
    nextRowBottomOffset=topSpacer.getHeight() + getDefaultRowHeight();
  }
 else {
    topElementPosition=getRowTop(visualRowOrder.getFirst());
    nextRowBottomOffset=getDefaultRowHeight();
  }
  final double scrollTop=tBodyScrollTop;
  final double viewportOffset=topElementPosition - scrollTop;
  if (viewportOffset > 0) {
    double rowPx=getRowHeightsSumBetweenPx(scrollTop,topElementPosition);
    int originalRowsToMove=(int)Math.ceil(rowPx / getDefaultRowHeight());
    int rowsToMove=Math.min(originalRowsToMove,visualRowOrder.size());
    final int end=visualRowOrder.size();
    final int start=end - rowsToMove;
    final int logicalRowIndex=getLogicalRowIndex(scrollTop);
    moveAndUpdateEscalatorRows(Range.between(start,end),0,logicalRowIndex);
    setTopRowLogicalIndex(logicalRowIndex);
    rowsWereMoved=true;
  }
 else   if (viewportOffset + nextRowBottomOffset <= 0) {
    double rowPx=getRowHeightsSumBetweenPx(topElementPosition,scrollTop);
    int originalRowsToMove=(int)(rowPx / getDefaultRowHeight());
    int rowsToMove=Math.min(originalRowsToMove,visualRowOrder.size());
    int logicalRowIndex;
    if (rowsToMove < visualRowOrder.size()) {
      logicalRowIndex=getLogicalRowIndex(visualRowOrder.getLast()) + 1;
    }
 else {
      logicalRowIndex=getLogicalRowIndex(scrollTop);
    }
    final int targetVisualIndex=visualRowOrder.size();
    boolean aRowWasLeftBehind=false;
    if (logicalRowIndex + rowsToMove > getRowCount()) {
      rowsToMove--;
      aRowWasLeftBehind=true;
    }
    moveAndUpdateEscalatorRows(Range.between(0,rowsToMove),targetVisualIndex,logicalRowIndex);
    if (aRowWasLeftBehind) {
      final Range strayRow=Range.withOnly(0);
      final int topLogicalIndex=getRowCount() - visualRowOrder.size();
      moveAndUpdateEscalatorRows(strayRow,0,topLogicalIndex);
    }
    final int naiveNewLogicalIndex=getTopRowLogicalIndex() + originalRowsToMove;
    final int maxLogicalIndex=getRowCount() - visualRowOrder.size();
    setTopRowLogicalIndex(Math.min(naiveNewLogicalIndex,maxLogicalIndex));
    rowsWereMoved=true;
  }
  if (rowsWereMoved) {
    fireRowVisibilityChangeEvent();
    if (scroller.touchHandlerBundle.touches == 0) {
      domSorter.reschedule();
    }
  }
}
