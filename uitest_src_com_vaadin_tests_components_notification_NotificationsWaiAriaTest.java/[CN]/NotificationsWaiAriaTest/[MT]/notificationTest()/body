{
  openTestURL();
  TextFieldElement prefix=$(TextFieldElement.class).first();
  TextFieldElement postfix=$(TextFieldElement.class).get(1);
  NativeSelectElement type=$(NativeSelectElement.class).first();
  ButtonElement show=$(ButtonElement.class).first();
  prefix.clear();
  prefix.sendKeys("Prefix:");
  postfix.clear();
  postfix.sendKeys("- press ESC to close");
  type.selectByText(StringToEnumConverter.enumToString(NotificationRole.ALERT,null));
  show.click();
  waitForElementPresent(By.className("v-Notification"));
  NotificationElement notification=$(NotificationElement.class).first();
  String text=notification.getAttribute("role");
  Assert.assertTrue("Expected attribute 'role' to equal 'alert', found " + text,text.equals("alert"));
  text=getHiddenText(notification.findElements(By.className("v-assistive-device-only")).get(0));
  Assert.assertTrue("Expected 'Prefix:', found " + text,text.equals("Prefix:"));
  text=getHiddenText(notification.findElements(By.className("v-assistive-device-only")).get(1));
  Assert.assertTrue("Expected '- press ESC to close', found " + text,text.equals("- press ESC to close"));
  try {
    notification.closeNotification();
  }
 catch (  Exception e) {
  }
  type.selectByText(StringToEnumConverter.enumToString(NotificationRole.STATUS,null));
  show.click();
  waitForElementPresent(By.className("v-Notification"));
  notification=$(NotificationElement.class).first();
  text=notification.getAttribute("role");
  Assert.assertTrue("Expected attribute 'role' to equal 'status', found " + text,text.equals("status"));
  try {
    notification.closeNotification();
  }
 catch (  Exception e) {
  }
  prefix.clear();
  postfix.clear();
  show.click();
  waitForElementPresent(By.className("v-Notification"));
  WebElement element;
  try {
    element=getDriver().findElement(By.vaadin("Root/VNotification[0]/domChild[0]/domChild[0]/domChild[1]"));
  }
 catch (  Exception e) {
    element=null;
  }
  Assert.assertNull("Notification shouldn't have assistive-device-only spans",element);
}
