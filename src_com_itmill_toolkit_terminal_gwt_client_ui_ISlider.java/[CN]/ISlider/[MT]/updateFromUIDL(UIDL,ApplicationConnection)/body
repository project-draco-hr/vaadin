{
  this.client=client;
  if (client.updateComponent(this,uidl,false))   return;
  immediate=uidl.getBooleanAttribute("immediate");
  disabled=uidl.getBooleanAttribute("disabled");
  readonly=uidl.getBooleanAttribute("readonly");
  vertical=uidl.hasAttribute("vertical");
  arrows=uidl.hasAttribute("arrows");
  if (arrows) {
    DOM.setStyleAttribute(smaller,"display","block");
    DOM.setStyleAttribute(bigger,"display","block");
    if (vertical) {
      int arrowSize=Integer.parseInt(DOM.getAttribute(smaller,"offsetWidth"));
      DOM.setStyleAttribute(bigger,"marginLeft",arrowSize + "px");
      DOM.setStyleAttribute(bigger,"marginRight",arrowSize + "px");
    }
  }
  if (vertical)   addStyleName(CLASSNAME + "-vertical");
 else   removeStyleName(CLASSNAME + "-vertical");
  min=uidl.getDoubleAttribute("min");
  max=uidl.getDoubleAttribute("max");
  resolution=uidl.getIntAttribute("resolution");
  value=new Double(uidl.getDoubleVariable("value"));
  handleSize=uidl.getIntAttribute("hsize");
  if (uidl.hasAttribute("size"))   size=uidl.getIntAttribute("size");
  buildBase();
  if (!vertical) {
    Timer delay=new Timer(){
      public void run(){
        buildHandle();
        setValue(value,true);
      }
    }
;
    delay.schedule(100);
  }
 else {
    buildHandle();
    setValue(value,true);
  }
}
