{
  final VMarginInfo margins=new VMarginInfo(uidl.getIntAttribute("margins"));
  Element margin=getElement();
  setStyleName(margin,CLASSNAME + "-" + StyleConstants.MARGIN_TOP,margins.hasTop());
  setStyleName(margin,CLASSNAME + "-" + StyleConstants.MARGIN_RIGHT,margins.hasRight());
  setStyleName(margin,CLASSNAME + "-" + StyleConstants.MARGIN_BOTTOM,margins.hasBottom());
  setStyleName(margin,CLASSNAME + "-" + StyleConstants.MARGIN_LEFT,margins.hasLeft());
  setStyleName(margin,CLASSNAME + "-" + "spacing",uidl.hasAttribute("spacing"));
  int i=0;
  for (final Iterator<?> it=uidl.getChildIterator(); it.hasNext(); i++) {
    prepareCell(i,1);
    final UIDL childUidl=(UIDL)it.next();
    final ComponentConnector childPaintable=client.getPaintable(childUidl);
    Widget childWidget=childPaintable.getWidget();
    Caption caption=widgetToCaption.get(childWidget);
    if (caption == null) {
      caption=new Caption(childPaintable,client);
      caption.addClickHandler(this);
      widgetToCaption.put(childWidget,caption);
    }
    ErrorFlag error=widgetToError.get(childWidget);
    if (error == null) {
      error=new ErrorFlag();
      widgetToError.put(childWidget,error);
    }
    prepareCell(i,COLUMN_WIDGET);
    Widget oldWidget=getWidget(i,COLUMN_WIDGET);
    if (oldWidget == null) {
      setWidget(i,COLUMN_WIDGET,childWidget);
    }
 else     if (oldWidget != childWidget) {
      final ComponentConnector oldPaintable=ConnectorMap.get(client).getConnector(oldWidget);
      client.unregisterPaintable(oldPaintable);
      setWidget(i,COLUMN_WIDGET,childWidget);
    }
    getCellFormatter().setStyleName(i,COLUMN_WIDGET,CLASSNAME + "-contentcell");
    getCellFormatter().setStyleName(i,COLUMN_CAPTION,CLASSNAME + "-captioncell");
    setWidget(i,COLUMN_CAPTION,caption);
    getCellFormatter().setStyleName(i,COLUMN_ERRORFLAG,CLASSNAME + "-errorcell");
    setWidget(i,COLUMN_ERRORFLAG,error);
    childPaintable.updateFromUIDL(childUidl,client);
    if (childPaintable.isRelativeWidth()) {
      getCellFormatter().setWidth(i,COLUMN_WIDGET,"100%");
    }
 else {
      getCellFormatter().setWidth(i,COLUMN_WIDGET,null);
    }
    String rowstyles=CLASSNAME + "-row";
    if (i == 0) {
      rowstyles+=" " + CLASSNAME + "-firstrow";
    }
    if (!it.hasNext()) {
      rowstyles+=" " + CLASSNAME + "-lastrow";
    }
    getRowFormatter().setStyleName(i,rowstyles);
  }
  while (getRowCount() > i) {
    Widget w=getWidget(i,COLUMN_WIDGET);
    final ComponentConnector p=ConnectorMap.get(client).getConnector(w);
    client.unregisterPaintable(p);
    widgetToCaption.remove(w);
    removeRow(i);
  }
  for (  Widget p : widgetToCaption.keySet()) {
    client.handleComponentRelativeSize(p);
  }
}
