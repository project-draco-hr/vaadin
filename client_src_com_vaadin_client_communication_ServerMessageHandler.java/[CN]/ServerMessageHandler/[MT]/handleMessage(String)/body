{
  final Date start=new Date();
  final ValueMap json;
  try {
    json=parseJSONResponse(jsonText);
  }
 catch (  final Exception e) {
    getServerCommunicationHandler().endRequest();
    connection.showCommunicationError(e.getMessage() + " - Original JSON-text:" + jsonText,200);
    return;
  }
  getLogger().info("JSON parsing took " + (new Date().getTime() - start.getTime()) + "ms");
  if (getServerId(json) == -1) {
    getLogger().severe("Response didn't contain a server id. " + "Please verify that the server is up-to-date and that the response data has not been modified in transmission.");
  }
  if (connection.getState() == State.RUNNING) {
    handleJSON(json);
  }
 else   if (connection.getState() == State.INITIALIZING) {
    connection.setApplicationRunning(true);
    connection.executeWhenCSSLoaded(new Command(){
      @Override public void execute(){
        handleJSON(json);
      }
    }
);
  }
 else {
    getLogger().warning("Ignored received message because application has already been stopped");
    return;
  }
}
