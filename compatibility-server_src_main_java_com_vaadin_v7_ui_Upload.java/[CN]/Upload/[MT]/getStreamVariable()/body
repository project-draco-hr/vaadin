{
  if (streamVariable == null) {
    streamVariable=new com.vaadin.server.StreamVariable(){
      private StreamingStartEvent lastStartedEvent;
      @Override public boolean listenProgress(){
        return progressListeners != null && !progressListeners.isEmpty();
      }
      @Override public void onProgress(      StreamingProgressEvent event){
        fireUpdateProgress(event.getBytesReceived(),event.getContentLength());
      }
      @Override public boolean isInterrupted(){
        return interrupted;
      }
      @Override public OutputStream getOutputStream(){
        if (getReceiver() == null) {
          throw new IllegalStateException("Upload cannot be performed without a receiver set");
        }
        OutputStream receiveUpload=getReceiver().receiveUpload(lastStartedEvent.getFileName(),lastStartedEvent.getMimeType());
        lastStartedEvent=null;
        return receiveUpload;
      }
      @Override public void streamingStarted(      StreamingStartEvent event){
        startUpload();
        contentLength=event.getContentLength();
        fireStarted(event.getFileName(),event.getMimeType());
        lastStartedEvent=event;
      }
      @Override public void streamingFinished(      StreamingEndEvent event){
        fireUploadSuccess(event.getFileName(),event.getMimeType(),event.getContentLength());
        endUpload();
      }
      @Override public void streamingFailed(      StreamingErrorEvent event){
        try {
          Exception exception=event.getException();
          if (exception instanceof NoInputStreamException) {
            fireNoInputStream(event.getFileName(),event.getMimeType(),0);
          }
 else           if (exception instanceof NoOutputStreamException) {
            fireNoOutputStream(event.getFileName(),event.getMimeType(),0);
          }
 else {
            fireUploadInterrupted(event.getFileName(),event.getMimeType(),0,exception);
          }
        }
  finally {
          endUpload();
        }
      }
    }
;
  }
  return streamVariable;
}
