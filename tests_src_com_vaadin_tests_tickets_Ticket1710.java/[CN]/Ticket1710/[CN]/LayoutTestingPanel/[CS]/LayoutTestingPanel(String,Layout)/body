{
  super(caption);
  OrderedLayout internalLayout=new OrderedLayout();
  internalLayout.setWidth("100%");
  setLayout(internalLayout);
  testedLayout=layout;
  testPanelLayout.setWidth("100%");
  Panel controlWrapper=new Panel();
  controlWrapper.addComponent(controls);
  controlWrapper.setWidth("100%");
  controlWrapper.setScrollable(true);
  controlWrapper.setStyleName("controls");
  internalLayout.addComponent(controlWrapper);
  Panel testPanel=new Panel(testPanelLayout);
  testPanel.setStyleName("testarea");
  testPanelLayout.addComponent(testedLayout);
  internalLayout.addComponent(testPanel);
  internalLayout.setMargin(true);
  internalLayout.setSpacing(true);
  controls.setSpacing(true);
  controls.setMargin(false);
  controls.addComponent(new Label("width"));
  controls.addComponent(new TextField(new MethodProperty<Float>(testedLayout,"width")));
  controls.addComponent(new Button("%",new MethodProperty<Boolean>(this,"widthPercents")));
  controls.addComponent(new Label("height"));
  controls.addComponent(new TextField(new MethodProperty<Float>(testedLayout,"height")));
  controls.addComponent(new Button("%",new MethodProperty<Boolean>(this,"heightPercents")));
  controls.addComponent(marginLeft);
  controls.addComponent(marginRight);
  controls.addComponent(marginTop);
  controls.addComponent(marginBottom);
  if (testedLayout instanceof Layout.SpacingHandler) {
    controls.addComponent(spacing);
  }
  Property.ValueChangeListener marginSpacingListener=new Property.ValueChangeListener(){
    public void valueChange(    ValueChangeEvent event){
      updateMarginsAndSpacing();
    }
  }
;
  marginBottom.addListener(marginSpacingListener);
  marginTop.addListener(marginSpacingListener);
  marginLeft.addListener(marginSpacingListener);
  marginRight.addListener(marginSpacingListener);
  spacing.addListener(marginSpacingListener);
  updateMarginsAndSpacing();
  addAlignmentControls();
  testedLayout.setStyleName("tested-layout");
  setStyleName("layout-testing-panel");
  for (Iterator i=controls.getComponentIterator(); i.hasNext(); ) {
    ((AbstractComponent)i.next()).setImmediate(true);
  }
}
