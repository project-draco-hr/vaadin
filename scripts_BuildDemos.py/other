import sys, os
from os.path import join, isfile
from fnmatch import fnmatch
from xml.etree.ElementTree import ElementTree
demos = {'dashboard': 'https://github.com/vaadin/dashboard-demo.git', 'parking': 'https://github.com/vaadin/parking-demo.git', 'addressbook': 'https://github.com/vaadin/addressbook.git', 'grid-gwt': 'https://github.com/vaadin/grid-gwt.git', }
if (__name__ == '__main__'):
    try:
        from git import Repo
    except:
        print 'BuildDemos depends on gitpython. Install it with `pip install gitpython`'
        sys.exit(1)
    from BuildHelpers import updateRepositories, mavenValidate, copyWarFiles, getLogFile, removeDir, getArgs, mavenInstall, resultPath, readPomFile
    from DeployHelpers import deployWar
    if (hasattr(getArgs(), 'artifactPath') and (getArgs().artifactPath is not None)):
        version = False
        basePath = getArgs().artifactPath
        poms = []
        for (root, dirs, files) in os.walk(basePath):
            for name in files:
                if fnmatch(name, '*.pom'):
                    poms.append(join(root, name))
        for pom in poms:
            jarFile = pom.replace('.pom', '.jar')
            if isfile(jarFile):
                mavenInstall(pom, jarFile)
            else:
                mavenInstall(pom)
            if ('vaadin-server' in pom):
                (pomXml, nameSpace) = readPomFile(pom)
                for version in pomXml.getroot().findall(('./{%s}version' % nameSpace)):
                    getArgs().version = version.text
    demosFailed = False
    for demo in demos:
        print ('Validating demo %s' % demo)
        try:
            checkout(demo, demos[demo])
            updateRepositories(demo)
            mavenValidate(demo, logFile=getLogFile(demo))
            resultWars = copyWarFiles(demo)
            for war in resultWars:
                try:
                    deployWar(war)
                except Exception as e:
                    print ('War %s failed to deploy: %s' % (war, e))
                    demosFailed = True
            print ('%s demo validation succeeded!' % demo)
        except Exception as e:
            print ('%s demo validation failed: %s' % (demo, e))
            demosFailed = True
        removeDir(demo)
        print ''
    if demosFailed:
        sys.exit(1)
