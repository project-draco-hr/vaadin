{
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  this.client=client;
  uidlId=uidl.getId();
  if (!getItems().isEmpty()) {
    clearItems();
  }
  UIDL options=uidl.getChildUIDL(0);
  if (options.hasAttribute("submenuIcon")) {
    submenuIcon=client.translateToolkitUri(uidl.getChildUIDL(0).getStringAttribute("submenuIcon"));
  }
 else {
    submenuIcon=null;
  }
  collapseItems=options.getBooleanAttribute("collapseItems");
  if (collapseItems) {
    UIDL moreItemUIDL=options.getChildUIDL(0);
    StringBuffer itemHTML=new StringBuffer();
    if (moreItemUIDL.hasAttribute("icon")) {
      itemHTML.append("<img src=\"" + client.translateToolkitUri(moreItemUIDL.getStringAttribute("icon")) + "\" align=\"left\" />");
    }
    itemHTML.append(moreItemUIDL.getStringAttribute("text"));
    moreItem=new CustomMenuItem(itemHTML.toString(),emptyCommand);
  }
  UIDL uidlItems=uidl.getChildUIDL(1);
  Iterator<UIDL> itr=uidlItems.getChildIterator();
  Stack<Iterator<UIDL>> iteratorStack=new Stack<Iterator<UIDL>>();
  Stack<VMenuBar> menuStack=new Stack<VMenuBar>();
  VMenuBar currentMenu=this;
  while (itr.hasNext()) {
    UIDL item=itr.next();
    CustomMenuItem currentItem=null;
    String itemText=item.getStringAttribute("text");
    final int itemId=item.getIntAttribute("id");
    boolean itemHasCommand=item.getBooleanAttribute("command");
    StringBuffer itemHTML=new StringBuffer();
    if (item.hasAttribute("icon")) {
      itemHTML.append("<img src=\"" + client.translateToolkitUri(item.getStringAttribute("icon")) + "\" align=\"left\" />");
    }
    itemHTML.append(itemText);
    if (currentMenu != this && item.getChildCount() > 0 && submenuIcon != null) {
      itemHTML.append("<img src=\"" + submenuIcon + "\" align=\"right\" />");
    }
    Command cmd=null;
    if (itemHasCommand) {
      cmd=new Command(){
        public void execute(){
          hostReference.onMenuClick(itemId);
        }
      }
;
    }
    currentItem=currentMenu.addItem(itemHTML.toString(),cmd);
    if (item.getChildCount() > 0) {
      menuStack.push(currentMenu);
      iteratorStack.push(itr);
      itr=item.getChildIterator();
      currentMenu=new VMenuBar(true);
      currentItem.setSubMenu(currentMenu);
    }
    while (!itr.hasNext() && !iteratorStack.empty()) {
      itr=iteratorStack.pop();
      currentMenu=menuStack.pop();
    }
  }
  if (collapseItems) {
    int topLevelWidth=0;
    int ourWidth=getOffsetWidth();
    int i=0;
    for (; i < getItems().size() && topLevelWidth < ourWidth; i++) {
      CustomMenuItem item=getItems().get(i);
      topLevelWidth+=item.getOffsetWidth();
    }
    if (topLevelWidth > getOffsetWidth()) {
      ArrayList<CustomMenuItem> toBeCollapsed=new ArrayList<CustomMenuItem>();
      VMenuBar collapsed=new VMenuBar(true);
      for (int j=i - 2; j < getItems().size(); j++) {
        toBeCollapsed.add(getItems().get(j));
      }
      for (int j=0; j < toBeCollapsed.size(); j++) {
        CustomMenuItem item=toBeCollapsed.get(j);
        removeItem(item);
        if (item.getSubMenu() != null && submenuIcon != null) {
          StringBuffer itemText=new StringBuffer(item.getHTML());
          itemText.append("<img src=\"");
          itemText.append(submenuIcon);
          itemText.append("\" align=\"right\" />");
          item.setHTML(itemText.toString());
        }
        collapsed.addItem(item);
      }
      moreItem.setSubMenu(collapsed);
      addItem(moreItem);
    }
  }
}
