{
  super.init();
  registerRpc(PageClientRpc.class,new PageClientRpc(){
    @Override public void setTitle(    String title){
      com.google.gwt.user.client.Window.setTitle(title);
    }
    @Override public void reload(){
      Window.Location.reload();
    }
  }
);
  registerRpc(ScrollClientRpc.class,new ScrollClientRpc(){
    @Override public void setScrollTop(    int scrollTop){
      getWidget().getElement().setScrollTop(scrollTop);
    }
    @Override public void setScrollLeft(    int scrollLeft){
      getWidget().getElement().setScrollLeft(scrollLeft);
    }
  }
);
  registerRpc(UIClientRpc.class,new UIClientRpc(){
    @Override public void uiClosed(    final boolean sessionExpired){
      Scheduler.get().scheduleDeferred(new ScheduledCommand(){
        @Override public void execute(){
          if (sessionExpired) {
            getConnection().showSessionExpiredError(null);
          }
 else {
            getState().enabled=false;
            updateEnabledState(getState().enabled);
          }
        }
      }
);
    }
  }
);
  registerRpc(DebugWindowClientRpc.class,new DebugWindowClientRpc(){
    @Override public void reportLayoutProblems(    String json){
      VConsole.printLayoutProblems(getValueMap(json),getConnection());
    }
    private native ValueMap getValueMap(    String json);
  }
);
  getWidget().addResizeHandler(new ResizeHandler(){
    @Override public void onResize(    ResizeEvent event){
      getRpcProxy(UIServerRpc.class).resize(event.getHeight(),event.getWidth(),Window.getClientWidth(),Window.getClientHeight());
      if (getState().immediate || getPageState().hasResizeListeners) {
        getConnection().sendPendingVariableChanges();
      }
    }
  }
);
  getWidget().addScrollHandler(new ScrollHandler(){
    private int lastSentScrollTop=Integer.MAX_VALUE;
    private int lastSentScrollLeft=Integer.MAX_VALUE;
    @Override public void onScroll(    ScrollEvent event){
      Element element=getWidget().getElement();
      int newScrollTop=element.getScrollTop();
      int newScrollLeft=element.getScrollLeft();
      if (newScrollTop != lastSentScrollTop || newScrollLeft != lastSentScrollLeft) {
        lastSentScrollTop=newScrollTop;
        lastSentScrollLeft=newScrollLeft;
        getRpcProxy(UIServerRpc.class).scroll(newScrollTop,newScrollLeft);
      }
    }
  }
);
}
