{
  ConnectorMap paintableMap=ConnectorMap.get(getConnection());
  getWidget().rendering=true;
  getWidget().id=getConnectorId();
  boolean firstPaint=getWidget().connection == null;
  getWidget().connection=client;
  getWidget().immediate=getState().immediate;
  getWidget().resizeLazy=uidl.hasAttribute(UIConstants.RESIZE_LAZY);
  String newTheme=uidl.getStringAttribute("theme");
  if (getWidget().theme != null && !newTheme.equals(getWidget().theme)) {
    getWidget().reloadHostPage();
  }
 else {
    getWidget().theme=newTheme;
  }
  String styles="";
  styles+=getWidget().getStylePrimaryName() + " ";
  if (ComponentStateUtil.hasStyles(getState())) {
    for (    String style : getState().styles) {
      styles+=style + " ";
    }
  }
  if (!client.getConfiguration().isStandalone()) {
    styles+=getWidget().getStylePrimaryName() + "-embedded";
  }
  getWidget().setStyleName(styles.trim());
  getWidget().makeScrollable();
  clickEventHandler.handleEventHandlerRegistration();
  int childIndex=0;
  boolean isClosed=false;
  while (childIndex < uidl.getChildCount() && "open".equals(uidl.getChildUIDL(childIndex).getTag())) {
    final UIDL open=uidl.getChildUIDL(childIndex);
    final String url=client.translateVaadinUri(open.getStringAttribute("src"));
    final String target=open.getStringAttribute("name");
    if (target == null) {
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          VUI.goTo(url);
        }
      }
);
    }
 else     if ("_self".equals(target)) {
      isClosed=true;
      VUI.goTo(url);
    }
 else {
      String options;
      boolean alwaysAsPopup=true;
      if (open.hasAttribute("popup")) {
        alwaysAsPopup=open.getBooleanAttribute("popup");
      }
      if (alwaysAsPopup) {
        if (open.hasAttribute("border")) {
          if (open.getStringAttribute("border").equals("minimal")) {
            options="menubar=yes,location=no,status=no";
          }
 else {
            options="menubar=no,location=no,status=no";
          }
        }
 else {
          options="resizable=yes,menubar=yes,toolbar=yes,directories=yes,location=yes,scrollbars=yes,status=yes";
        }
        if (open.hasAttribute("width")) {
          int w=open.getIntAttribute("width");
          options+=",width=" + w;
        }
        if (open.hasAttribute("height")) {
          int h=open.getIntAttribute("height");
          options+=",height=" + h;
        }
        Window.open(url,target,options);
      }
 else {
        open(url,target);
      }
    }
    childIndex++;
  }
  if (isClosed) {
    getWidget().rendering=false;
    return;
  }
  UIDL childUidl;
  while ((childUidl=uidl.getChildUIDL(childIndex++)) != null) {
    String tag=childUidl.getTag().intern();
    if (tag == "actions") {
      if (getWidget().actionHandler == null) {
        getWidget().actionHandler=new ShortcutActionHandler(getWidget().id,client);
      }
      getWidget().actionHandler.updateActionMap(childUidl);
    }
 else     if (tag == "notifications") {
      for (final Iterator<?> it=childUidl.getChildIterator(); it.hasNext(); ) {
        final UIDL notification=(UIDL)it.next();
        VNotification.showNotification(client,notification);
      }
    }
  }
  if (uidl.hasAttribute("focused")) {
    Scheduler.get().scheduleDeferred(new Command(){
      @Override public void execute(){
        ComponentConnector paintable=(ComponentConnector)uidl.getPaintableAttribute("focused",getConnection());
        final Widget toBeFocused=paintable.getWidget();
        if (toBeFocused instanceof com.google.gwt.user.client.ui.Focusable) {
          final com.google.gwt.user.client.ui.Focusable toBeFocusedWidget=(com.google.gwt.user.client.ui.Focusable)toBeFocused;
          toBeFocusedWidget.setFocus(true);
        }
 else         if (toBeFocused instanceof Focusable) {
          ((Focusable)toBeFocused).focus();
        }
 else {
          VConsole.log("Could not focus component");
        }
      }
    }
);
  }
  if (firstPaint) {
    Window.addWindowClosingHandler(getWidget());
    Window.addResizeHandler(getWidget());
  }
  if (uidl.hasAttribute("scrollTo")) {
    final ComponentConnector connector=(ComponentConnector)uidl.getPaintableAttribute("scrollTo",getConnection());
    scrollIntoView(connector);
  }
  if (uidl.hasAttribute(UIConstants.LOCATION_VARIABLE)) {
    String location=uidl.getStringAttribute(UIConstants.LOCATION_VARIABLE);
    int fragmentIndex=location.indexOf('#');
    if (fragmentIndex >= 0) {
      getWidget().currentFragment=URL.decodePathSegment(location.substring(fragmentIndex + 1));
    }
    if (!getWidget().currentFragment.equals(History.getToken())) {
      History.newItem(getWidget().currentFragment,true);
    }
  }
  if (firstPaint) {
    Scheduler.get().scheduleDeferred(new ScheduledCommand(){
      @Override public void execute(){
        getWidget().sendClientResized();
      }
    }
);
  }
  getWidget().rendering=false;
}
