{
  if (!hasFilters) {
    filteredRoots=null;
    filteredChildren=null;
    filteredParent=null;
    return super.doFilterContainer(hasFilters);
  }
  filteredRoots=new LinkedList<>();
  filteredChildren=new HashMap<>();
  filteredParent=new HashMap<>();
  if (includeParentsWhenFiltering) {
    HashSet<Object> includedItems=new HashSet<>();
    for (    Object rootId : roots) {
      if (filterIncludingParents(rootId,includedItems)) {
        filteredRoots.add(rootId);
        addFilteredChildrenRecursively(rootId,includedItems);
      }
    }
    filterOverride=includedItems;
    super.doFilterContainer(hasFilters);
    filterOverride=null;
    return true;
  }
 else {
    super.doFilterContainer(hasFilters);
    LinkedHashSet<Object> filteredItemIds=new LinkedHashSet<>(getItemIds());
    for (    Object itemId : filteredItemIds) {
      Object itemParent=parent.get(itemId);
      if (itemParent == null || !filteredItemIds.contains(itemParent)) {
        filteredRoots.add(itemId);
      }
 else {
        addFilteredChild(itemParent,itemId);
      }
    }
    return true;
  }
}
