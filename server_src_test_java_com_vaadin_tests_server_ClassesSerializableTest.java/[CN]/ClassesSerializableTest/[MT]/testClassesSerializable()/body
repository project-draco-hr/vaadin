{
  List<String> rawClasspathEntries=getRawClasspathEntries();
  List<String> classes=new ArrayList<String>();
  for (  String location : rawClasspathEntries) {
    classes.addAll(findServerClasses(location));
  }
  ArrayList<Class<?>> nonSerializableClasses=new ArrayList<Class<?>>();
  for (  String className : classes) {
    Class<?> cls=Class.forName(className);
    if (cls.isAnnotation() || cls.isSynthetic()) {
      continue;
    }
    if (isTestClass(cls)) {
      continue;
    }
    if (!Serializable.class.isAssignableFrom(cls)) {
      if (cls.getSuperclass() == Object.class && cls.getInterfaces().length == 1) {
        Class<?> iface=cls.getInterfaces()[0];
        if (iface == Runnable.class) {
          continue;
        }
 else         if (iface == Comparator.class) {
          continue;
        }
      }
      nonSerializableClasses.add(cls);
    }
  }
  if (!nonSerializableClasses.isEmpty()) {
    String nonSerializableString="";
    Iterator<Class<?>> it=nonSerializableClasses.iterator();
    while (it.hasNext()) {
      Class c=it.next();
      nonSerializableString+=", " + c.getName();
      if (c.isAnonymousClass()) {
        nonSerializableString+="(super: ";
        nonSerializableString+=c.getSuperclass().getName();
        nonSerializableString+=", interfaces: ";
        for (        Class i : c.getInterfaces()) {
          nonSerializableString+=i.getName();
          nonSerializableString+=",";
        }
        nonSerializableString+=")";
      }
    }
    Assert.fail("Serializable not implemented by the following classes and interfaces: " + nonSerializableString);
  }
}
