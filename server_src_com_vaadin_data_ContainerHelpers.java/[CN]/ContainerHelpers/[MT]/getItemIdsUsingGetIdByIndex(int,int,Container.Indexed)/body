{
  if (container == null) {
    throw new IllegalArgumentException("The given container cannot be null!");
  }
  if (startIndex < 0) {
    throw new IndexOutOfBoundsException("Start index cannot be negative! startIndex=" + startIndex);
  }
  if (startIndex > container.size()) {
    throw new IndexOutOfBoundsException("Start index exceeds container size! startIndex=" + startIndex + " containerLastItemIndex="+ (container.size() - 1));
  }
  if (numberOfIds < 1) {
    if (numberOfIds == 0) {
      return Collections.emptyList();
    }
    throw new IllegalArgumentException("Cannot get negative amount of items! numberOfItems=" + numberOfIds);
  }
  int endIndex=startIndex + numberOfIds;
  if (endIndex > container.size()) {
    throw new RangeOutOfContainerBoundsException("Cannot get all requested item ids from container. " + "Container size might have changed, recalculate numberOfIds " + "based on the actual container size!",startIndex,numberOfIds,container.size());
  }
  ArrayList<Object> rangeOfIds=new ArrayList<Object>();
  for (int i=startIndex; i < endIndex; i++) {
    Object idByIndex=container.getIdByIndex(i);
    if (idByIndex == null) {
      throw new RuntimeException("Unable to get item id for index: " + i + " from container using Container.Indexed#getIdByIndex() "+ "even though container.size() > endIndex. "+ "Returned item id was null. "+ "Check your container implementation!");
    }
    rangeOfIds.add(idByIndex);
  }
  return Collections.unmodifiableList(rangeOfIds);
}
