{
  Profiler.enter("JsonDecoder.decodeObject");
  JSONSerializer<Object> serializer=(JSONSerializer<Object>)type.findSerializer();
  if (serializer != null) {
    if (target != null && serializer instanceof DiffJSONSerializer<?>) {
      DiffJSONSerializer<Object> diffSerializer=(DiffJSONSerializer<Object>)serializer;
      diffSerializer.update(target,type,jsonValue,connection);
      Profiler.leave("JsonDecoder.decodeObject");
      return target;
    }
 else {
      Object object=serializer.deserialize(type,jsonValue,connection);
      Profiler.leave("JsonDecoder.decodeObject");
      return object;
    }
  }
 else {
    try {
      Profiler.enter("JsonDecoder.decodeObject meta data processing");
      JsArrayObject<Property> properties=type.getPropertiesAsArray();
      if (target == null) {
        target=type.createInstance();
      }
      JSONObject jsonObject=jsonValue.isObject();
      int size=properties.size();
      for (int i=0; i < size; i++) {
        Property property=properties.get(i);
        JSONValue encodedPropertyValue=jsonObject.get(property.getName());
        if (encodedPropertyValue == null) {
          continue;
        }
        Type propertyType=property.getType();
        Object propertyReference;
        if (needsReferenceValue(propertyType)) {
          propertyReference=property.getValue(target);
        }
 else {
          propertyReference=null;
        }
        Profiler.leave("JsonDecoder.decodeObject meta data processing");
        Object decodedValue=decodeValue(propertyType,encodedPropertyValue,propertyReference,connection);
        Profiler.enter("JsonDecoder.decodeObject meta data processing");
        property.setValue(target,decodedValue);
      }
      Profiler.leave("JsonDecoder.decodeObject meta data processing");
      Profiler.leave("JsonDecoder.decodeObject");
      return target;
    }
 catch (    NoDataException e) {
      Profiler.leave("JsonDecoder.decodeObject meta data processing");
      Profiler.leave("JsonDecoder.decodeObject");
      throw new RuntimeException("Can not deserialize " + type.getSignature(),e);
    }
  }
}
