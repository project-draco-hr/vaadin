{
  int row=0, column=0;
  final ArrayList oldWidgetWrappers=new ArrayList();
  for (final Iterator iterator=iterator(); iterator.hasNext(); ) {
    oldWidgetWrappers.add(iterator.next());
  }
  clear();
  final int[] alignments=uidl.getIntArrayAttribute("alignments");
  int alignmentIndex=0;
  for (final Iterator i=uidl.getChildIterator(); i.hasNext(); ) {
    final UIDL r=(UIDL)i.next();
    if ("gr".equals(r.getTag())) {
      column=0;
      for (final Iterator j=r.getChildIterator(); j.hasNext(); ) {
        final UIDL c=(UIDL)j.next();
        if ("gc".equals(c.getTag())) {
          prepareCell(row,column);
          int w;
          if (c.hasAttribute("w")) {
            w=c.getIntAttribute("w");
          }
 else {
            w=1;
          }
          FlexCellFormatter formatter=(FlexCellFormatter)getCellFormatter();
          formatter.setColSpan(row,column,w);
          String styleNames=CLASSNAME + "-cell";
          if (column == 0) {
            styleNames+=" " + CLASSNAME + "-firstcol";
          }
          if (row == 0) {
            styleNames+=" " + CLASSNAME + "-firstrow";
          }
          formatter.setStyleName(row,column,styleNames);
          int h;
          if (c.hasAttribute("h")) {
            h=c.getIntAttribute("h");
          }
 else {
            h=1;
          }
          ((FlexCellFormatter)getCellFormatter()).setRowSpan(row,column,h);
          final UIDL u=c.getChildUIDL(0);
          if (u != null) {
            AlignmentInfo alignmentInfo=new AlignmentInfo(alignments[alignmentIndex++]);
            VerticalAlignmentConstant va;
            if (alignmentInfo.isBottom()) {
              va=HasVerticalAlignment.ALIGN_BOTTOM;
            }
 else             if (alignmentInfo.isTop()) {
              va=HasVerticalAlignment.ALIGN_TOP;
            }
 else {
              va=HasVerticalAlignment.ALIGN_MIDDLE;
            }
            HorizontalAlignmentConstant ha;
            if (alignmentInfo.isLeft()) {
              ha=HasHorizontalAlignment.ALIGN_LEFT;
            }
 else             if (alignmentInfo.isHorizontalCenter()) {
              ha=HasHorizontalAlignment.ALIGN_CENTER;
            }
 else {
              ha=HasHorizontalAlignment.ALIGN_RIGHT;
            }
            formatter.setAlignment(row,column,ha,va);
            final Paintable child=client.getPaintable(u);
            CaptionWrapper wr;
            if (widgetToCaptionWrapper.containsKey(child)) {
              wr=(CaptionWrapper)widgetToCaptionWrapper.get(child);
              oldWidgetWrappers.remove(wr);
            }
 else {
              wr=new CaptionWrapper(child,client);
              widgetToCaptionWrapper.put(child,wr);
            }
            setWidget(row,column,wr);
            DOM.setStyleAttribute(wr.getElement(),"textAlign",alignmentInfo.getHorizontalAlignment());
            if (!u.getBooleanAttribute("cached")) {
              child.updateFromUIDL(u,client);
            }
          }
          column+=w;
        }
      }
      row++;
    }
  }
  for (final Iterator it=oldWidgetWrappers.iterator(); it.hasNext(); ) {
    final CaptionWrapper w=(CaptionWrapper)it.next();
    client.unregisterPaintable(w.getPaintable());
    widgetToCaptionWrapper.remove(w.getPaintable());
  }
}
