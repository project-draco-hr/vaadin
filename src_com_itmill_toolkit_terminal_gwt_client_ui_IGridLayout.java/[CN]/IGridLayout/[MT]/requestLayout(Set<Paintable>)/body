{
  boolean needsLayout=false;
  int offsetHeight=canvas.getOffsetHeight();
  int offsetWidth=canvas.getOffsetWidth();
  if ("".equals(width) || "".equals(height)) {
    needsLayout=true;
  }
  for (  Paintable paintable : child) {
    Cell cell=paintableToCell.get(paintable);
    if (!cell.hasRelativeHeight() || !cell.hasRelativeWidth()) {
      int width=cell.getWidth();
      int allocated=columnWidths[cell.col];
      for (int i=1; i < cell.colspan; i++) {
        allocated+=spacingPixels + columnWidths[cell.col + i];
      }
      if (allocated < width) {
        needsLayout=true;
        int neededExtraSpace=width - allocated;
        int spaceForColunms=neededExtraSpace / cell.colspan;
        for (int i=0; i < cell.colspan; i++) {
          int col=cell.col + i;
          columnWidths[col]+=spaceForColunms;
          neededExtraSpace-=spaceForColunms;
        }
        if (neededExtraSpace > 0) {
          for (int i=0; i < cell.colspan; i++) {
            int col=cell.col + i;
            columnWidths[col]+=1;
            neededExtraSpace-=1;
            if (neededExtraSpace == 0) {
              break;
            }
          }
        }
      }
      int height=cell.getHeight();
      allocated=rowHeights[cell.row];
      for (int i=1; i < cell.rowspan; i++) {
        allocated+=spacingPixels + rowHeights[cell.row + i];
      }
      if (allocated < height) {
        needsLayout=true;
        int neededExtraSpace=height - allocated;
        int spaceForColunms=neededExtraSpace / cell.rowspan;
        for (int i=0; i < cell.rowspan; i++) {
          int row=cell.row + i;
          rowHeights[row]+=spaceForColunms;
          neededExtraSpace-=spaceForColunms;
        }
        if (neededExtraSpace > 0) {
          for (int i=0; i < cell.rowspan; i++) {
            int row=cell.row + i;
            rowHeights[row]+=1;
            neededExtraSpace-=1;
            if (neededExtraSpace == 0) {
              break;
            }
          }
        }
      }
    }
  }
  if (needsLayout) {
    expandColumns();
    expandRows();
    layoutCells();
    for (    Paintable paintable : child) {
      Cell cell=paintableToCell.get(paintable);
      if (cell.hasRelativeHeight() || cell.hasRelativeWidth()) {
        client.handleComponentRelativeSize((Widget)paintable);
      }
    }
  }
  if (canvas.getOffsetHeight() != offsetHeight || canvas.getOffsetWidth() != offsetWidth) {
    return false;
  }
 else {
    return true;
  }
}
