{
  ApplicationConnection.getConsole().log("IGridLayout.requestLayout()");
  boolean needsLayout=false;
  int offsetHeight=canvas.getOffsetHeight();
  int offsetWidth=canvas.getOffsetWidth();
  if ("".equals(width) || "".equals(height)) {
    needsLayout=true;
  }
  ArrayList<Integer> dirtyColumns=new ArrayList<Integer>();
  ArrayList<Integer> dirtyRows=new ArrayList<Integer>();
  for (  Paintable paintable : changedChildren) {
    Cell cell=paintableToCell.get(paintable);
    if (!cell.hasRelativeHeight() || !cell.hasRelativeWidth()) {
      cell.cc.setWidth("");
      cell.cc.setHeight("");
      cell.cc.updateWidgetSize();
      int width=cell.cc.getWidgetSize().getWidth() + cell.cc.getCaptionWidthAfterComponent();
      int allocated=columnWidths[cell.col];
      for (int i=1; i < cell.colspan; i++) {
        allocated+=spacingPixels + columnWidths[cell.col + i];
      }
      if (allocated < width) {
        needsLayout=true;
        int neededExtraSpace=width - allocated;
        int spaceForColunms=neededExtraSpace / cell.colspan;
        for (int i=0; i < cell.colspan; i++) {
          int col=cell.col + i;
          columnWidths[col]+=spaceForColunms;
          neededExtraSpace-=spaceForColunms;
        }
        if (neededExtraSpace > 0) {
          for (int i=0; i < cell.colspan; i++) {
            int col=cell.col + i;
            columnWidths[col]+=1;
            neededExtraSpace-=1;
            if (neededExtraSpace == 0) {
              break;
            }
          }
        }
      }
 else       if (allocated != width) {
        dirtyColumns.add(cell.col);
      }
      int height=cell.cc.getWidgetSize().getHeight() + cell.cc.getCaptionHeightAboveComponent();
      allocated=rowHeights[cell.row];
      for (int i=1; i < cell.rowspan; i++) {
        allocated+=spacingPixels + rowHeights[cell.row + i];
      }
      if (allocated < height) {
        needsLayout=true;
        int neededExtraSpace=height - allocated;
        int spaceForColunms=neededExtraSpace / cell.rowspan;
        for (int i=0; i < cell.rowspan; i++) {
          int row=cell.row + i;
          rowHeights[row]+=spaceForColunms;
          neededExtraSpace-=spaceForColunms;
        }
        if (neededExtraSpace > 0) {
          for (int i=0; i < cell.rowspan; i++) {
            int row=cell.row + i;
            rowHeights[row]+=1;
            neededExtraSpace-=1;
            if (neededExtraSpace == 0) {
              break;
            }
          }
        }
      }
 else       if (allocated != height) {
        dirtyRows.add(cell.row);
      }
    }
  }
  if (dirtyColumns.size() > 0) {
    for (    Integer colIndex : dirtyColumns) {
      int colW=0;
      for (int i=0; i < rowHeights.length; i++) {
        Cell cell=cells[colIndex][i];
        if (cell != null && cell.getChildUIDL() != null && !cell.hasRelativeWidth()) {
          int width=cell.cc.getWidgetSize().getWidth() + cell.cc.getCaptionWidthAfterComponent();
          if (width > colW) {
            colW=width;
          }
        }
      }
      minColumnWidths[colIndex]=colW;
    }
    needsLayout=true;
    columnWidths=cloneArray(minColumnWidths);
    distributeColSpanWidths();
  }
  if (dirtyRows.size() > 0) {
    needsLayout=true;
    for (    Integer rowIndex : dirtyRows) {
      int rowH=minRowHeights[rowIndex]=0;
      for (int i=0; i < columnWidths.length; i++) {
        Cell cell=cells[i][rowIndex];
        if (cell != null && cell.getChildUIDL() != null && !cell.hasRelativeHeight()) {
          int h=cell.cc.getWidgetSize().getHeight() + cell.cc.getCaptionHeightAboveComponent();
          if (h > rowH) {
            rowH=h;
          }
        }
      }
      minRowHeights[rowIndex]=rowH;
    }
    rowHeights=cloneArray(minRowHeights);
    distributeRowSpanHeights();
  }
  if (needsLayout) {
    expandColumns();
    expandRows();
    layoutCells();
    for (int i=0; i < cells.length; i++) {
      for (int j=0; j < cells[i].length; j++) {
        Cell cell=cells[i][j];
        if (cell.hasRelativeHeight() || cell.hasRelativeWidth()) {
          client.handleComponentRelativeSize(cell.cc.getWidget());
        }
      }
    }
  }
  if (canvas.getOffsetHeight() != offsetHeight || canvas.getOffsetWidth() != offsetWidth) {
    return false;
  }
 else {
    return true;
  }
}
