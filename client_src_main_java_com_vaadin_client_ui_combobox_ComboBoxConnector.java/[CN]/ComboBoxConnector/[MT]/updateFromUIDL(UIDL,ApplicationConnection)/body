{
  getWidget().client=client;
  getWidget().paintableId=uidl.getId();
  getWidget().readonly=isReadOnly();
  getWidget().updateReadOnly();
  if (!isRealUpdate(uidl)) {
    return;
  }
  boolean noTextInput=uidl.hasAttribute(ComboBoxConstants.ATTR_NO_TEXT_INPUT) && uidl.getBooleanAttribute(ComboBoxConstants.ATTR_NO_TEXT_INPUT);
  getWidget().setTextInputEnabled(!noTextInput);
  getWidget().tb.setTabIndex(getState().tabIndex);
  if (uidl.hasAttribute("filteringmode")) {
    getWidget().filteringmode=FilteringMode.valueOf(uidl.getStringAttribute("filteringmode"));
  }
  getWidget().immediate=getState().immediate;
  getWidget().nullSelectionAllowed=uidl.hasAttribute("nullselect");
  getWidget().nullSelectItem=uidl.hasAttribute("nullselectitem") && uidl.getBooleanAttribute("nullselectitem");
  getWidget().currentPage=uidl.getIntVariable("page");
  if (uidl.hasAttribute("pagelength")) {
    getWidget().pageLength=uidl.getIntAttribute("pagelength");
  }
  if (uidl.hasAttribute(ComboBoxConstants.ATTR_INPUTPROMPT)) {
    getWidget().inputPrompt=uidl.getStringAttribute(ComboBoxConstants.ATTR_INPUTPROMPT);
  }
 else {
    getWidget().inputPrompt="";
  }
  if (uidl.hasAttribute("suggestionPopupWidth")) {
    getWidget().suggestionPopupWidth=uidl.getStringAttribute("suggestionPopupWidth");
  }
 else {
    getWidget().suggestionPopupWidth=null;
  }
  getWidget().suggestionPopup.updateStyleNames(uidl,getState());
  getWidget().allowNewItem=uidl.hasAttribute("allownewitem");
  getWidget().lastNewItemString=null;
  final UIDL options=uidl.getChildUIDL(0);
  if (uidl.hasAttribute("totalMatches")) {
    getWidget().totalMatches=uidl.getIntAttribute("totalMatches");
  }
 else {
    getWidget().totalMatches=0;
  }
  List<FilterSelectSuggestion> newSuggestions=new ArrayList<FilterSelectSuggestion>();
  for (final Iterator<?> i=options.getChildIterator(); i.hasNext(); ) {
    final UIDL optionUidl=(UIDL)i.next();
    final FilterSelectSuggestion suggestion=getWidget().new FilterSelectSuggestion(optionUidl);
    newSuggestions.add(suggestion);
  }
  boolean suggestionsChanged=!getWidget().initDone || !newSuggestions.equals(getWidget().currentSuggestions);
  boolean popupOpenAndCleared=false;
  oldSuggestionTextMatchTheOldSelection=false;
  if (suggestionsChanged) {
    oldSuggestionTextMatchTheOldSelection=isWidgetsCurrentSelectionTextInTextBox();
    getWidget().currentSuggestions.clear();
    if (!getWidget().waitingForFilteringResponse) {
      getWidget().currentSuggestion=null;
      getWidget().suggestionPopup.menu.clearItems();
      popupOpenAndCleared=getWidget().suggestionPopup.isAttached();
    }
    for (    FilterSelectSuggestion suggestion : newSuggestions) {
      getWidget().currentSuggestions.add(suggestion);
    }
  }
  if (uidl.hasVariable("selected")) {
    String[] selectedKeys=uidl.getStringArrayVariable("selected");
    if (selectedKeys.length > 0 && !selectedKeys[0].equals("")) {
      performSelection(selectedKeys[0]);
    }
 else     if (!getWidget().waitingForFilteringResponse && uidl.hasAttribute("selectedCaption")) {
      getWidget().tb.setText(uidl.getStringAttribute("selectedCaption"));
    }
 else {
      resetSelection();
    }
  }
  if ((getWidget().waitingForFilteringResponse && getWidget().lastFilter.toLowerCase().equals(uidl.getStringVariable("filter"))) || popupOpenAndCleared) {
    getWidget().suggestionPopup.showSuggestions(getWidget().currentSuggestions,getWidget().currentPage,getWidget().totalMatches);
    getWidget().waitingForFilteringResponse=false;
    if (!getWidget().popupOpenerClicked && getWidget().selectPopupItemWhenResponseIsReceived != VFilterSelect.Select.NONE) {
      Scheduler.get().scheduleDeferred(new ScheduledCommand(){
        @Override public void execute(){
          navigateItemAfterPageChange();
        }
      }
);
    }
    if (getWidget().updateSelectionWhenReponseIsReceived) {
      getWidget().suggestionPopup.menu.doPostFilterSelectedItemAction();
    }
  }
  getWidget().updateSuggestionPopupMinWidth();
  getWidget().popupOpenerClicked=false;
  if (!getWidget().initDone) {
    getWidget().updateRootWidth();
  }
  if (getWidget().focused) {
    getWidget().addStyleDependentName("focus");
  }
  getWidget().initDone=true;
}
