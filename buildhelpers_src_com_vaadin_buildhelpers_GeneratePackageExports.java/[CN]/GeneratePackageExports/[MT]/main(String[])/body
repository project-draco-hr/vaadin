{
  if (args.length < 2) {
    System.err.println("Invalid number of parameters\n" + "Usage: java -cp .. GenerateManifest <package.jar> <accepted package prefixes>\n" + "Use -Dvaadin.version to specify the version to be used for the packages");
    System.exit(1);
  }
  String vaadinVersion=System.getProperty("vaadin.version");
  String jarFilename=args[0];
  JarFile jar=null;
  try {
    jar=new JarFile(jarFilename);
  }
 catch (  IOException e) {
    System.err.println("Unable to open JAR '" + jarFilename + "'");
    System.exit(1);
  }
  List<String> acceptedPackagePrefixes=new ArrayList<String>();
  for (int i=1; i < args.length; i++) {
    acceptedPackagePrefixes.add(args[i]);
  }
  HashSet<String> packages=getPackages(jar,acceptedPackagePrefixes);
  if (packages.isEmpty()) {
    return;
  }
  String exportPackage=sortAndJoinPackages(packages,vaadinVersion);
  Manifest oldMF=null;
  try {
    oldMF=jar.getManifest();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Attributes mainAttributes=oldMF.getMainAttributes();
  String existingExportPackage=mainAttributes.getValue(EXPORT_PACKAGE_ATTRIBUTE);
  if (existingExportPackage != null) {
    exportPackage=existingExportPackage + "," + exportPackage;
  }
  try {
    jar.close();
  }
 catch (  IOException e) {
    System.err.println("Unable to close JAR '" + jarFilename + "'");
  }
  ManifestWriter manifest=new ManifestWriter();
  manifest.writeAttribute(EXPORT_PACKAGE_ATTRIBUTE,exportPackage);
  int status=manifest.updateJar(jarFilename);
  if (status != 0) {
    System.exit(status);
  }
}
