{
  if (isMultiSelect()) {
    target.addAttribute("selectmode","multi");
  }
  if (isNewItemsAllowed()) {
    target.addAttribute("allownewitem",true);
  }
  if (isNullSelectionAllowed()) {
    target.addAttribute("nullselect",true);
    if (getNullSelectionItemId() != null) {
      target.addAttribute("nullselectitem",true);
    }
  }
  String[] selectedKeys;
  if (isMultiSelect()) {
    selectedKeys=new String[((Set<?>)getValue()).size()];
  }
 else {
    selectedKeys=new String[(getValue() == null && getNullSelectionItemId() == null ? 0 : 1)];
  }
  getCaptionChangeListener().clear();
  target.startTag("options");
  int keyIndex=0;
  final Collection<?> ids=getItemIds();
  if (isNullSelectionAllowed() && getNullSelectionItemId() != null && !ids.contains(getNullSelectionItemId())) {
    final Object id=getNullSelectionItemId();
    target.startTag("so");
    paintItem(target,id);
    if (isSelected(id)) {
      selectedKeys[keyIndex++]=itemIdMapper.key(id);
    }
    target.endTag("so");
  }
  final Iterator<?> i=getItemIds().iterator();
  while (i.hasNext()) {
    final Object id=i.next();
    if (!isNullSelectionAllowed() && id != null && id.equals(getNullSelectionItemId())) {
      continue;
    }
    final String key=itemIdMapper.key(id);
    getCaptionChangeListener().addNotifierForItem(id);
    target.startTag("so");
    paintItem(target,id);
    if (isSelected(id) && keyIndex < selectedKeys.length) {
      selectedKeys[keyIndex++]=key;
    }
    target.endTag("so");
  }
  target.endTag("options");
  target.addVariable(this,"selected",selectedKeys);
  if (isNewItemsAllowed()) {
    target.addVariable(this,"newitem","");
  }
}
