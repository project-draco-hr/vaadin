{
  naviTree=new Tree();
  naviTree.setItemStyleGenerator(new ItemStyleGenerator(){
    @Override public String getStyle(    Object itemId){
      Class<?> cls=(Class<?>)itemId;
      if (!isAbstract(cls)) {
        return "blue";
      }
      return null;
    }
  }
);
  HierarchicalContainer hc=new HierarchicalContainer();
  naviTree.setContainerDataSource(hc);
  DefaultItemSorter sorter=new DefaultItemSorter(){
    @SuppressWarnings("rawtypes") @Override public int compare(    Object o1,    Object o2){
      if (o1 instanceof Class && o2 instanceof Class && o1 != null && o2 != null) {
        Class<?> c1=(Class)o1;
        Class<?> c2=(Class)o2;
        boolean a1=isAbstract(c1);
        boolean a2=isAbstract(c2);
        if (a1 && !a2) {
          return 1;
        }
 else         if (!a1 && a2) {
          return -1;
        }
      }
      return super.compare(o1,o2);
    }
  }
;
  hc.setItemSorter(sorter);
  naviTree.addContainerProperty(CAPTION,String.class,"");
  naviTree.setItemCaptionPropertyId(CAPTION);
  for (  Class<? extends AbstractComponentTest> cls : tests.keySet()) {
    addTreeItem(cls);
  }
  hc.sort(new Object[]{CAPTION},new boolean[]{true});
  naviTree.setSelectable(false);
  for (  Object o : naviTree.rootItemIds()) {
    expandAndSetChildrenAllowed(o);
  }
  naviTree.addListener(new ItemClickListener(){
    @Override public void itemClick(    ItemClickEvent event){
      Class<?> cls=(Class<?>)event.getItemId();
      if (!isAbstract(cls)) {
        String url=baseUrl + cls.getName() + "?restartApplication";
        if (event.getButton() == ItemClickEvent.BUTTON_LEFT) {
          openEmbedded(url);
          naviTree.setValue(event.getItemId());
        }
 else         if (event.getButton() == ItemClickEvent.BUTTON_RIGHT) {
          openInNewTab(url);
        }
      }
    }
  }
);
  return naviTree;
}
