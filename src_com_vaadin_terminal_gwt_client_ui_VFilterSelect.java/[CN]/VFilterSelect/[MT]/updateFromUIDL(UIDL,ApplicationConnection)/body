{
  paintableId=uidl.getId();
  this.client=client;
  readonly=uidl.hasAttribute("readonly");
  enabled=!uidl.hasAttribute("disabled");
  tb.setEnabled(enabled);
  updateReadOnly();
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  boolean noTextInput=uidl.hasAttribute(ATTR_NO_TEXT_INPUT) && uidl.getBooleanAttribute(ATTR_NO_TEXT_INPUT);
  setTextInputEnabled(!noTextInput);
  if (uidl.hasAttribute("tabindex")) {
    tb.setTabIndex(uidl.getIntAttribute("tabindex"));
  }
  if (uidl.hasAttribute("filteringmode")) {
    filteringmode=uidl.getIntAttribute("filteringmode");
  }
  immediate=uidl.hasAttribute("immediate");
  nullSelectionAllowed=uidl.hasAttribute("nullselect");
  nullSelectItem=uidl.hasAttribute("nullselectitem") && uidl.getBooleanAttribute("nullselectitem");
  currentPage=uidl.getIntVariable("page");
  if (uidl.hasAttribute("pagelength")) {
    pageLength=uidl.getIntAttribute("pagelength");
  }
  if (uidl.hasAttribute(ATTR_INPUTPROMPT)) {
    inputPrompt=uidl.getStringAttribute(ATTR_INPUTPROMPT);
  }
 else {
    inputPrompt="";
  }
  suggestionPopup.updateStyleNames(uidl);
  allowNewItem=uidl.hasAttribute("allownewitem");
  lastNewItemString=null;
  currentSuggestions.clear();
  if (!waitingForFilteringResponse) {
    currentSuggestion=null;
    suggestionPopup.menu.clearItems();
  }
  final UIDL options=uidl.getChildUIDL(0);
  if (uidl.hasAttribute("totalMatches")) {
    totalMatches=uidl.getIntAttribute("totalMatches");
  }
 else {
    totalMatches=0;
  }
  String captions=Util.escapeHTML(inputPrompt);
  for (final Iterator<?> i=options.getChildIterator(); i.hasNext(); ) {
    final UIDL optionUidl=(UIDL)i.next();
    final FilterSelectSuggestion suggestion=new FilterSelectSuggestion(optionUidl);
    currentSuggestions.add(suggestion);
    if (optionUidl.hasAttribute("selected")) {
      if (!waitingForFilteringResponse || popupOpenerClicked) {
        String newSelectedOptionKey=Integer.toString(suggestion.getOptionKey());
        if (!newSelectedOptionKey.equals(selectedOptionKey) || suggestion.getReplacementString().equals(tb.getText())) {
          setPromptingOff(suggestion.getReplacementString());
          selectedOptionKey=newSelectedOptionKey;
        }
      }
      currentSuggestion=suggestion;
      setSelectedItemIcon(suggestion.getIconUri());
    }
    if (captions.length() > 0) {
      captions+="|";
    }
    captions+=Util.escapeHTML(suggestion.getReplacementString());
  }
  if ((!waitingForFilteringResponse || popupOpenerClicked) && uidl.hasVariable("selected") && uidl.getStringArrayVariable("selected").length == 0) {
    if (!waitingForFilteringResponse || !popupOpenerClicked) {
      if (!focused) {
        prompting=false;
        setPromptingOn();
      }
 else {
        tb.setValue("");
      }
    }
    selectedOptionKey=null;
  }
  if (waitingForFilteringResponse && lastFilter.toLowerCase().equals(uidl.getStringVariable("filter"))) {
    suggestionPopup.showSuggestions(currentSuggestions,currentPage,totalMatches);
    waitingForFilteringResponse=false;
    if (!popupOpenerClicked && selectPopupItemWhenResponseIsReceived != Select.NONE) {
      if (selectPopupItemWhenResponseIsReceived == Select.LAST) {
        suggestionPopup.menu.selectLastItem();
      }
 else {
        suggestionPopup.menu.selectFirstItem();
      }
      MenuItem activeMenuItem=suggestionPopup.menu.getSelectedItem();
      suggestionPopup.menu.setKeyboardSelectedItem(activeMenuItem);
      setTextboxText(activeMenuItem.getText());
      tb.setSelectionRange(lastFilter.length(),activeMenuItem.getText().length() - lastFilter.length());
      selectPopupItemWhenResponseIsReceived=Select.NONE;
    }
    if (updateSelectionWhenReponseIsReceived) {
      suggestionPopup.menu.doPostFilterSelectedItemAction();
    }
  }
  suggestionPopupMinWidth=minWidth(captions);
  popupOpenerClicked=false;
  if (!initDone) {
    updateRootWidth();
  }
  if (focused) {
    addStyleDependentName("focus");
  }
  initDone=true;
}
