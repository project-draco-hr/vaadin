{
  Widget component=paintable.getWidgetForPaintable();
  String pid=paintableMap.getPid(paintable);
  if (pid == null) {
    VConsole.error("Trying to update an unregistered component: " + Util.getSimpleName(component));
    return true;
  }
  if (uidl.getBooleanAttribute("cached")) {
    return true;
  }
  paintableMap.registerEventListenersFromUIDL(pid,uidl);
  boolean visible=!uidl.getBooleanAttribute("invisible");
  boolean wasVisible=component.isVisible();
  component.setVisible(visible);
  if (wasVisible != visible) {
    if (wasVisible && manageCaption) {
      final Container parent=Util.getLayout(component);
      if (parent != null) {
        parent.updateCaption(paintable,uidl);
      }
    }
  }
  if (configuration.useDebugIdInDOM() && uidl.getId().startsWith("PID_S")) {
    DOM.setElementProperty(component.getElement(),"id",uidl.getId().substring(5));
  }
  if (!visible) {
    paintableMap.setOffsetSize(paintable,null);
    return true;
  }
  boolean enabled=!uidl.getBooleanAttribute("disabled");
  if (uidl.hasAttribute("tabindex") && component instanceof Focusable) {
    ((Focusable)component).setTabIndex(uidl.getIntAttribute("tabindex"));
  }
  if (component instanceof FocusWidget) {
    FocusWidget fw=(FocusWidget)component;
    fw.setEnabled(enabled);
  }
  StringBuffer styleBuf=new StringBuffer();
  final String primaryName=component.getStylePrimaryName();
  styleBuf.append(primaryName);
  if (!enabled) {
    styleBuf.append(" ");
    styleBuf.append(DISABLED_CLASSNAME);
  }
  if (uidl.getBooleanAttribute("readonly")) {
    styleBuf.append(" ");
    styleBuf.append("v-readonly");
  }
  if (uidl.hasAttribute("style")) {
    final String[] styles=uidl.getStringAttribute("style").split(" ");
    for (int i=0; i < styles.length; i++) {
      styleBuf.append(" ");
      styleBuf.append(primaryName);
      styleBuf.append("-");
      styleBuf.append(styles[i]);
      styleBuf.append(" ");
      styleBuf.append(styles[i]);
    }
  }
  if (uidl.hasAttribute("modified") && component instanceof Field) {
    styleBuf.append(" ");
    styleBuf.append(MODIFIED_CLASSNAME);
  }
  TooltipInfo tooltipInfo=paintableMap.getTooltipInfo(paintable,null);
  if (uidl.hasAttribute(ATTRIBUTE_DESCRIPTION)) {
    tooltipInfo.setTitle(uidl.getStringAttribute(ATTRIBUTE_DESCRIPTION));
  }
 else {
    tooltipInfo.setTitle(null);
  }
  if (uidl.hasAttribute(ATTRIBUTE_ERROR)) {
    tooltipInfo.setErrorUidl(uidl.getErrors());
    styleBuf.append(" ");
    styleBuf.append(primaryName);
    styleBuf.append(ERROR_CLASSNAME_EXT);
  }
 else {
    tooltipInfo.setErrorUidl(null);
  }
  if (uidl.hasAttribute("required")) {
    styleBuf.append(" ");
    styleBuf.append(primaryName);
    styleBuf.append(REQUIRED_CLASSNAME_EXT);
  }
  component.setStyleName(styleBuf.toString());
  if (manageCaption) {
    final Container parent=Util.getLayout(component);
    if (parent != null) {
      parent.updateCaption(paintable,uidl);
    }
  }
  updateComponentSize(paintable,uidl);
  return false;
}
