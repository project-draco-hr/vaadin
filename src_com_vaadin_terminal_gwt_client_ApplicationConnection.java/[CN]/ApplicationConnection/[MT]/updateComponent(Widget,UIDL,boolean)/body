{
  String pid=getPid(component.getElement());
  if (pid == null) {
    VConsole.error("Trying to update an unregistered component: " + Util.getSimpleName(component));
    return true;
  }
  ComponentDetail componentDetail=idToPaintableDetail.get(pid);
  if (componentDetail == null) {
    VConsole.error("ComponentDetail not found for " + Util.getSimpleName(component) + " with PID "+ pid+ ". This should not happen.");
    return true;
  }
  if (uidl.getBooleanAttribute("cached")) {
    return true;
  }
  componentDetail.registerEventListenersFromUIDL(uidl);
  boolean visible=!uidl.getBooleanAttribute("invisible");
  boolean wasVisible=component.isVisible();
  component.setVisible(visible);
  if (wasVisible != visible) {
    if (wasVisible && manageCaption) {
      final Container parent=Util.getLayout(component);
      if (parent != null) {
        parent.updateCaption((Paintable)component,uidl);
      }
    }
  }
  String id=uidl.getId();
  if (configuration.useDebugIdInDOM() && id.startsWith("PID_")) {
    DOM.setElementProperty(component.getElement(),"id",id.substring(id.indexOf('S') + 1));
  }
  if (!visible) {
    componentDetail.setOffsetSize(null);
    return true;
  }
  if (!widgetSet.isCorrectImplementation(component,uidl,configuration)) {
    final Widget w=(Widget)widgetSet.createWidget(uidl,configuration);
    if (w.getClass() != component.getClass()) {
      final Container parent=Util.getLayout(component);
      if (parent != null) {
        parent.replaceChildComponent(component,w);
        unregisterPaintable((Paintable)component);
        registerPaintable(uidl.getId(),(Paintable)w);
        ((Paintable)w).updateFromUIDL(uidl,this);
        return true;
      }
    }
  }
  boolean enabled=!uidl.getBooleanAttribute("disabled");
  if (uidl.hasAttribute("tabindex") && component instanceof Focusable) {
    ((Focusable)component).setTabIndex(uidl.getIntAttribute("tabindex"));
  }
  if (component instanceof FocusWidget) {
    FocusWidget fw=(FocusWidget)component;
    fw.setEnabled(enabled);
  }
  TooltipInfo tooltipInfo=componentDetail.getTooltipInfo(null);
  if (uidl.hasAttribute(ATTRIBUTE_DESCRIPTION)) {
    tooltipInfo.setTitle(uidl.getStringAttribute(ATTRIBUTE_DESCRIPTION));
  }
 else {
    tooltipInfo.setTitle(null);
  }
  if (uidl.hasAttribute(ATTRIBUTE_ERROR)) {
    tooltipInfo.setErrorUidl(uidl.getErrors());
  }
 else {
    tooltipInfo.setErrorUidl(null);
  }
  component.setStyleName(getStyleName(component.getStylePrimaryName(),uidl,component instanceof Field));
  if (manageCaption) {
    final Container parent=Util.getLayout(component);
    if (parent != null) {
      parent.updateCaption((Paintable)component,uidl);
    }
  }
  updateComponentSize(componentDetail,uidl);
  return false;
}
