{
  startRequest();
  final String rd=uidl_security_key + VAR_BURST_SEPARATOR + requestData;
  console.log("Making UIDL Request with params: " + rd);
  String uri=getAppUri() + "UIDL" + configuration.getPathInfo();
  if (repaintAll) {
    int clientHeight=Window.getClientHeight();
    int clientWidth=Window.getClientWidth();
    com.google.gwt.dom.client.Element pe=view.getElement().getParentElement();
    int offsetHeight=pe.getOffsetHeight();
    int offsetWidth=pe.getOffsetWidth();
    int screenWidth=BrowserInfo.get().getScreenWidth();
    int screenHeight=BrowserInfo.get().getScreenHeight();
    String token=History.getToken();
    uri+="?repaintAll=1&" + "sh=" + screenHeight + "&sw="+ screenWidth+ "&cw="+ clientWidth+ "&ch="+ clientHeight+ "&vw="+ offsetWidth+ "&vh="+ offsetHeight+ "&fr="+ token;
    if (analyzeLayouts) {
      uri+="&analyzeLayouts=1";
    }
  }
  if (windowName != null && windowName.length() > 0) {
    uri+=(repaintAll ? "&" : "?") + "windowName=" + windowName;
  }
  if (!forceSync) {
    boolean success=false;
    final RequestBuilder rb=new RequestBuilder(RequestBuilder.POST,uri);
    rb.setHeader("Content-Type","text/plain;charset=utf-8");
    try {
      rb.sendRequest(rd,new RequestCallback(){
        public void onError(        Request request,        Throwable exception){
          showCommunicationError(exception.getMessage());
          endRequest();
          if (!applicationRunning) {
            ApplicationConfiguration.startNextApplication();
          }
        }
        public void onResponseReceived(        Request request,        Response response){
          console.log("Server visit took " + String.valueOf((new Date()).getTime() - requestStartTime.getTime()) + "ms");
switch (response.getStatusCode()) {
case 0:
            showCommunicationError("Invalid status code 0 (server down?)");
          return;
case 503:
        int delay=Integer.parseInt(response.getHeader("Retry-After"));
      console.log("503, retrying in " + delay + "msec");
    (new Timer(){
      @Override public void run(){
        activeRequests--;
        makeUidlRequest(requestData,repaintAll,forceSync,analyzeLayouts);
      }
    }
).schedule(delay);
  return;
}
if ("init".equals(uidl_security_key)) {
String key=response.getHeader(UIDL_SECURITY_HEADER);
if (null != key) {
  uidl_security_key=key;
}
}
if (applicationRunning) {
handleReceivedJSONMessage(response);
}
 else {
applicationRunning=true;
handleWhenCSSLoaded(response);
ApplicationConfiguration.startNextApplication();
}
}
int cssWaits=0;
static final int MAX_CSS_WAITS=20;
private void handleWhenCSSLoaded(final Response response){
int heightOfLoadElement=DOM.getElementPropertyInt(loadElement,"offsetHeight");
if (heightOfLoadElement == 0 && cssWaits < MAX_CSS_WAITS) {
(new Timer(){
  @Override public void run(){
    handleWhenCSSLoaded(response);
  }
}
).schedule(50);
console.log("Assuming CSS loading is not complete, " + "postponing render phase. " + "(.v-loading-indicator height == 0)");
cssWaits++;
}
 else {
handleReceivedJSONMessage(response);
if (cssWaits >= MAX_CSS_WAITS) {
  console.error("CSS files may have not loaded properly.");
}
}
}
}
);
}
 catch (final RequestException e) {
ClientExceptionHandler.displayError(e);
endRequest();
}
}
 else {
syncSendForce(((HTTPRequestImpl)GWT.create(HTTPRequestImpl.class)).createXmlHTTPRequest(),uri + "&" + PARAM_UNLOADBURST+ "=1",rd);
}
}
