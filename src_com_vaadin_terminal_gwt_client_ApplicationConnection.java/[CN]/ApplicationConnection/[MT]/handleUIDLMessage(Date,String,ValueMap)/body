{
  VConsole.log("Handling message from server");
  if (json.containsKey("redirect")) {
    String url=json.getValueMap("redirect").getString("url");
    VConsole.log("redirecting to " + url);
    redirect(url);
    return;
  }
  if (json.containsKey(UIDL_SECURITY_TOKEN_ID)) {
    uidlSecurityKey=json.getString(UIDL_SECURITY_TOKEN_ID);
  }
  if (json.containsKey("resources")) {
    ValueMap resources=json.getValueMap("resources");
    JsArrayString keyArray=resources.getKeyArray();
    int l=keyArray.length();
    for (int i=0; i < l; i++) {
      String key=keyArray.get(i);
      resourcesMap.put(key,resources.getAsString(key));
    }
  }
  if (json.containsKey("typeMappings")) {
    configuration.addComponentMappings(json.getValueMap("typeMappings"),widgetSet);
  }
  Command c=new Command(){
    public void execute(){
      VConsole.dirUIDL(json,configuration);
      if (json.containsKey("locales")) {
        VConsole.log(" * Handling locales");
        JsArray<ValueMap> valueMapArray=json.getJSValueMapArray("locales");
        LocaleService.addLocales(valueMapArray);
      }
      boolean repaintAll=false;
      ValueMap meta=null;
      if (json.containsKey("meta")) {
        VConsole.log(" * Handling meta information");
        meta=json.getValueMap("meta");
        if (meta.containsKey("repaintAll")) {
          repaintAll=true;
          view.getWidget().clear();
          getConnectorMap().clear();
          if (meta.containsKey("invalidLayouts")) {
            validatingLayouts=true;
            zeroWidthComponents=new HashSet<ComponentConnector>();
            zeroHeightComponents=new HashSet<ComponentConnector>();
          }
        }
        if (meta.containsKey("timedRedirect")) {
          final ValueMap timedRedirect=meta.getValueMap("timedRedirect");
          redirectTimer=new Timer(){
            @Override public void run(){
              redirect(timedRedirect.getString("url"));
            }
          }
;
          sessionExpirationInterval=timedRedirect.getInt("interval");
        }
      }
      if (redirectTimer != null) {
        redirectTimer.schedule(1000 * sessionExpirationInterval);
      }
      componentCaptionSizeChanges.clear();
      Duration updateDuration=new Duration();
      createConnectorsIfNeeded(json);
      updateConnectorState(json);
      Collection<ConnectorHierarchyChangedEvent> pendingHierarchyChangeEvents=updateConnectorHierarchy(json);
      VConsole.log(" * Sending state change events");
      sendHierarchyChangeEvents(pendingHierarchyChangeEvents);
      updateVaadin6StyleConnectors(json);
      handleRpcInvocations(json);
      if (json.containsKey("dd")) {
        VDragAndDropManager.get().handleServerResponse(json.getValueMap("dd"));
      }
      unregisterRemovedConnectors();
      VConsole.log("updateFromUidl: " + updateDuration.elapsedMillis() + " ms");
      doLayout(false);
      if (meta != null) {
        if (meta.containsKey("appError")) {
          ValueMap error=meta.getValueMap("appError");
          String html="";
          if (error.containsKey("caption") && error.getString("caption") != null) {
            html+="<h1>" + error.getAsString("caption") + "</h1>";
          }
          if (error.containsKey("message") && error.getString("message") != null) {
            html+="<p>" + error.getAsString("message") + "</p>";
          }
          String url=null;
          if (error.containsKey("url")) {
            url=error.getString("url");
          }
          if (html.length() != 0) {
            VNotification n=VNotification.createNotification(1000 * 60 * 45);
            n.addEventListener(new NotificationRedirect(url));
            n.show(html,VNotification.CENTERED_TOP,VNotification.STYLE_SYSTEM);
          }
 else {
            redirect(url);
          }
          applicationRunning=false;
        }
        if (validatingLayouts) {
          VConsole.printLayoutProblems(meta,ApplicationConnection.this,zeroHeightComponents,zeroWidthComponents);
          zeroHeightComponents=null;
          zeroWidthComponents=null;
          validatingLayouts=false;
        }
      }
      final long prosessingTime=(new Date().getTime()) - start.getTime();
      VConsole.log(" Processing time was " + String.valueOf(prosessingTime) + "ms for "+ jsonText.length()+ " characters of JSON");
      VConsole.log("Referenced paintables: " + connectorMap.size());
      endRequest();
    }
    private void unregisterRemovedConnectors(){
      int unregistered=0;
      List<ServerConnector> currentConnectors=new ArrayList<ServerConnector>(connectorMap.getConnectors());
      for (      ServerConnector c : currentConnectors) {
        if (c instanceof ComponentConnector) {
          ComponentConnector cc=(ComponentConnector)c;
          if (cc.getParent() == null && !(cc instanceof RootConnector)) {
            connectorMap.unregisterConnector(cc);
            unregistered++;
          }
 else           if (cc.getParent() != null && !cc.getParent().getChildren().contains(cc)) {
            VConsole.error("ERROR: Connector is connected to a parent but the parent does not contain the connector");
          }
        }
      }
      VConsole.log("* Unregistered " + unregistered + " connectors");
    }
    private void createConnectorsIfNeeded(    ValueMap json){
      VConsole.log(" * Creating connectors (if needed)");
      if (!json.containsKey("types")) {
        return;
      }
      ValueMap types=json.getValueMap("types");
      JsArrayString keyArray=types.getKeyArray();
      for (int i=0; i < keyArray.length(); i++) {
        try {
          String connectorId=keyArray.get(i);
          String connectorType=types.getString(connectorId);
          ServerConnector connector=connectorMap.getConnector(connectorId);
          if (connector != null) {
            continue;
          }
          if (!connectorType.equals(configuration.getEncodedWindowTag())) {
            getConnector(connectorId,connectorType);
          }
 else {
            connectorMap.registerConnector(connectorId,view);
            view.doInit(connectorId,ApplicationConnection.this);
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
    }
    private void updateVaadin6StyleConnectors(    ValueMap json){
      JsArray<ValueMap> changes=json.getJSValueMapArray("changes");
      int length=changes.length();
      VConsole.log(" * Passing UIDL to Vaadin 6 style connectors");
      for (int i=0; i < length; i++) {
        try {
          final UIDL change=changes.get(i).cast();
          final UIDL uidl=change.getChildUIDL(0);
          String connectorId=uidl.getId();
          final ComponentConnector paintable=(ComponentConnector)connectorMap.getConnector(connectorId);
          if (paintable != null) {
            paintable.updateFromUIDL(uidl,ApplicationConnection.this);
          }
 else {
            VConsole.error("Received update for " + uidl.getTag() + ", but there is no such paintable ("+ connectorId+ ") rendered.");
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
    }
    private void sendHierarchyChangeEvents(    Collection<ConnectorHierarchyChangedEvent> pendingHierarchyChangeEvents){
      if (pendingHierarchyChangeEvents.isEmpty()) {
        return;
      }
      VConsole.log(" * Sending hierarchy change events");
      for (      ConnectorHierarchyChangedEvent event : pendingHierarchyChangeEvents) {
        event.getParent().connectorHierarchyChanged(event);
      }
    }
    private void updateConnectorState(    ValueMap json){
      VConsole.log(" * Updating connector states");
      if (!json.containsKey("state")) {
        return;
      }
      ValueMap states=json.getValueMap("state");
      JsArrayString keyArray=states.getKeyArray();
      for (int i=0; i < keyArray.length(); i++) {
        try {
          String connectorId=keyArray.get(i);
          ServerConnector paintable=connectorMap.getConnector(connectorId);
          if (null != paintable) {
            JSONArray stateDataAndType=new JSONArray(states.getJavaScriptObject(connectorId));
            Object state=JsonDecoder.decodeValue(stateDataAndType,connectorMap,ApplicationConnection.this);
            paintable.setState((SharedState)state);
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
    }
    /** 
 * Updates the connector hierarchy and returns a list of events that
 * should be fired after update of the hierarchy and the state is
 * done.
 * @param jsonThe JSON containing the hierarchy information
 * @return A collection of events that should be fired when update
 * of hierarchy and state is complete
 */
    private Collection<ConnectorHierarchyChangedEvent> updateConnectorHierarchy(    ValueMap json){
      List<ConnectorHierarchyChangedEvent> events=new LinkedList<ConnectorHierarchyChangedEvent>();
      VConsole.log(" * Updating connector hierarchy");
      if (!json.containsKey("hierarchy")) {
        return events;
      }
      ValueMap hierarchies=json.getValueMap("hierarchy");
      JsArrayString hierarchyKeys=hierarchies.getKeyArray();
      for (int i=0; i < hierarchyKeys.length(); i++) {
        try {
          String connectorId=hierarchyKeys.get(i);
          ServerConnector connector=connectorMap.getConnector(connectorId);
          if (!(connector instanceof ComponentContainerConnector)) {
            VConsole.error("Retrieved a hierarchy update for a connector (" + connectorId + ") that is not a ComponentContainerConnector");
            continue;
          }
          ComponentContainerConnector ccc=(ComponentContainerConnector)connector;
          JsArrayString childConnectorIds=hierarchies.getJSStringArray(connectorId);
          int childConnectorSize=childConnectorIds.length();
          List<ServerConnector> newChildren=new ArrayList<ServerConnector>();
          for (int connectorIndex=0; connectorIndex < childConnectorSize; connectorIndex++) {
            String childConnectorId=childConnectorIds.get(connectorIndex);
            ComponentConnector childConnector=(ComponentConnector)connectorMap.getConnector(childConnectorId);
            if (childConnector == null) {
              VConsole.error("Hierarchy claims that " + childConnectorId + " is a child for "+ connectorId+ " ("+ connector.getClass().getName()+ ") but no connector with id "+ childConnectorId+ " has been registered");
              continue;
            }
            newChildren.add(childConnector);
            if (childConnector.getParent() != ccc) {
              childConnector.setParent(ccc);
            }
          }
          List<ComponentConnector> oldChildren=ccc.getChildren();
          boolean actuallyChanged=!Util.collectionsEquals(oldChildren,newChildren);
          if (!actuallyChanged) {
            continue;
          }
          ConnectorHierarchyChangedEvent event=GWT.create(ConnectorHierarchyChangedEvent.class);
          event.setOldChildren(oldChildren);
          event.setParent(ccc);
          ccc.setChildren((List)newChildren);
          events.add(event);
          for (          ComponentConnector oldChild : oldChildren) {
            if (oldChild.getParent() != ccc) {
              continue;
            }
            if (!newChildren.contains(oldChild)) {
              oldChild.setParent(null);
            }
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
      return events;
    }
    private void handleRpcInvocations(    ValueMap json){
      if (json.containsKey("rpc")) {
        VConsole.log(" * Performing server to client RPC calls");
        JSONArray rpcCalls=new JSONArray(json.getJavaScriptObject("rpc"));
        int rpcLength=rpcCalls.size();
        for (int i=0; i < rpcLength; i++) {
          try {
            JSONArray rpcCall=(JSONArray)rpcCalls.get(i);
            MethodInvocation invocation=parseMethodInvocation(rpcCall);
            VConsole.log("Server to client RPC call: " + invocation);
            rpcManager.applyInvocation(invocation,getConnectorMap());
          }
 catch (          final Throwable e) {
            VConsole.error(e);
          }
        }
      }
    }
  }
;
  ApplicationConfiguration.runWhenWidgetsLoaded(c);
}
