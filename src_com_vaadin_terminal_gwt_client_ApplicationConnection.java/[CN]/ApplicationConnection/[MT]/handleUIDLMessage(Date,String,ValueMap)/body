{
  VConsole.log("Handling message from server");
  if (json.containsKey("redirect")) {
    String url=json.getValueMap("redirect").getString("url");
    VConsole.log("redirecting to " + url);
    redirect(url);
    return;
  }
  if (json.containsKey(UIDL_SECURITY_TOKEN_ID)) {
    uidlSecurityKey=json.getString(UIDL_SECURITY_TOKEN_ID);
  }
  if (json.containsKey("resources")) {
    ValueMap resources=json.getValueMap("resources");
    JsArrayString keyArray=resources.getKeyArray();
    int l=keyArray.length();
    for (int i=0; i < l; i++) {
      String key=keyArray.get(i);
      resourcesMap.put(key,resources.getAsString(key));
    }
  }
  if (json.containsKey("typeMappings")) {
    configuration.addComponentMappings(json.getValueMap("typeMappings"),widgetSet);
  }
  Command c=new Command(){
    public void execute(){
      VConsole.dirUIDL(json,configuration);
      if (json.containsKey("locales")) {
        VConsole.log(" * Handling locales");
        JsArray<ValueMap> valueMapArray=json.getJSValueMapArray("locales");
        LocaleService.addLocales(valueMapArray);
      }
      boolean repaintAll=false;
      ValueMap meta=null;
      if (json.containsKey("meta")) {
        VConsole.log(" * Handling meta information");
        meta=json.getValueMap("meta");
        if (meta.containsKey("repaintAll")) {
          repaintAll=true;
          view.getWidget().clear();
          getConnectorMap().clear();
          if (meta.containsKey("invalidLayouts")) {
            validatingLayouts=true;
            zeroWidthComponents=new HashSet<ComponentConnector>();
            zeroHeightComponents=new HashSet<ComponentConnector>();
          }
        }
        if (meta.containsKey("timedRedirect")) {
          final ValueMap timedRedirect=meta.getValueMap("timedRedirect");
          redirectTimer=new Timer(){
            @Override public void run(){
              redirect(timedRedirect.getString("url"));
            }
          }
;
          sessionExpirationInterval=timedRedirect.getInt("interval");
        }
      }
      if (redirectTimer != null) {
        redirectTimer.schedule(1000 * sessionExpirationInterval);
      }
      JsArray<ValueMap> changes=json.getJSValueMapArray("changes");
      ArrayList<ComponentConnector> updatedComponentConnectors=new ArrayList<ComponentConnector>();
      componentCaptionSizeChanges.clear();
      Duration updateDuration=new Duration();
      int length=changes.length();
      VConsole.log(" * Creating connectors (if needed)");
      for (int i=0; i < length; i++) {
        try {
          final UIDL change=changes.get(i).cast();
          final UIDL uidl=change.getChildUIDL(0);
          Connector paintable=connectorMap.getConnector(uidl.getId());
          if (null == paintable && !uidl.getTag().equals(configuration.getEncodedWindowTag())) {
            getConnector(uidl.getId(),uidl.getTag());
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
      VConsole.log(" * Updating connector states");
      ValueMap states=json.getValueMap("state");
      JsArrayString keyArray=states.getKeyArray();
      for (int i=0; i < keyArray.length(); i++) {
        try {
          String connectorId=keyArray.get(i);
          Connector paintable=connectorMap.getConnector(connectorId);
          if (null != paintable) {
            JSONArray stateDataAndType=new JSONArray(states.getJavaScriptObject(connectorId));
            Object state=JsonDecoder.convertValue(stateDataAndType,connectorMap);
            paintable.setState((SharedState)state);
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
      VConsole.log(" * Passing UIDL to Vaadin 6 style connectors");
      for (int i=0; i < length; i++) {
        try {
          final UIDL change=changes.get(i).cast();
          final UIDL uidl=change.getChildUIDL(0);
          String connectorId=uidl.getId();
          if (!connectorMap.hasConnector(connectorId) && uidl.getTag().equals(configuration.getEncodedWindowTag())) {
            connectorMap.registerConnector(connectorId,view);
            view.doInit(connectorId,ApplicationConnection.this);
          }
          final ComponentConnector paintable=(ComponentConnector)connectorMap.getConnector(connectorId);
          if (paintable != null) {
            paintable.updateFromUIDL(uidl,ApplicationConnection.this);
            updatedComponentConnectors.add(paintable);
          }
 else {
            VConsole.error("Received update for " + uidl.getTag() + ", but there is no such paintable ("+ connectorId+ ") rendered.");
          }
        }
 catch (        final Throwable e) {
          VConsole.error(e);
        }
      }
      if (json.containsKey("dd")) {
        VDragAndDropManager.get().handleServerResponse(json.getValueMap("dd"));
      }
      VConsole.log("updateFromUidl: " + updateDuration.elapsedMillis() + " ms");
      doLayout(false);
      if (meta != null) {
        if (meta.containsKey("appError")) {
          ValueMap error=meta.getValueMap("appError");
          String html="";
          if (error.containsKey("caption") && error.getString("caption") != null) {
            html+="<h1>" + error.getAsString("caption") + "</h1>";
          }
          if (error.containsKey("message") && error.getString("message") != null) {
            html+="<p>" + error.getAsString("message") + "</p>";
          }
          String url=null;
          if (error.containsKey("url")) {
            url=error.getString("url");
          }
          if (html.length() != 0) {
            VNotification n=VNotification.createNotification(1000 * 60 * 45);
            n.addEventListener(new NotificationRedirect(url));
            n.show(html,VNotification.CENTERED_TOP,VNotification.STYLE_SYSTEM);
          }
 else {
            redirect(url);
          }
          applicationRunning=false;
        }
        if (validatingLayouts) {
          VConsole.printLayoutProblems(meta,ApplicationConnection.this,zeroHeightComponents,zeroWidthComponents);
          zeroHeightComponents=null;
          zeroWidthComponents=null;
          validatingLayouts=false;
        }
      }
      if (repaintAll) {
        connectorMap.purgeUnregistryBag(false);
      }
 else {
        connectorMap.purgeUnregistryBag(true);
      }
      final long prosessingTime=(new Date().getTime()) - start.getTime();
      VConsole.log(" Processing time was " + String.valueOf(prosessingTime) + "ms for "+ jsonText.length()+ " characters of JSON");
      VConsole.log("Referenced paintables: " + connectorMap.size());
      endRequest();
    }
  }
;
  ApplicationConfiguration.runWhenWidgetsLoaded(c);
}
