{
  final Date start=new Date();
  String jsonText=response.getText();
  jsonText=jsonText.substring(9,jsonText.length() - 1);
  ValueMap json;
  try {
    json=parseJSONResponse(jsonText);
  }
 catch (  final Exception e) {
    endRequest();
    showCommunicationError(e.getMessage() + " - Original JSON-text:");
    console.log(jsonText);
    return;
  }
  ApplicationConnection.getConsole().log("JSON parsing took " + (new Date().getTime() - start.getTime()));
  if (json.containsKey("redirect")) {
    String url=json.getValueMap("redirect").getString("url");
    console.log("redirecting to " + url);
    redirect(url);
    return;
  }
  if (json.containsKey("resources")) {
    ValueMap resources=json.getValueMap("resources");
    JsArrayString keyArray=resources.getKeyArray();
    int l=keyArray.length();
    for (int i=0; i < l; i++) {
      String key=keyArray.get(i);
      resourcesMap.put(key,resources.getAsString(key));
    }
  }
  if (json.containsKey("typeMappings")) {
    configuration.addComponentMappings(json.getValueMap("typeMappings"),widgetSet);
  }
  if (json.containsKey("locales")) {
    JsArray<ValueMap> valueMapArray=json.getJSValueMapArray("locales");
    LocaleService.addLocales(valueMapArray);
  }
  ValueMap meta=null;
  if (json.containsKey("meta")) {
    meta=json.getValueMap("meta");
    if (meta.containsKey("repaintAll")) {
      view.clear();
      idToPaintableDetail.clear();
      if (meta.containsKey("invalidLayouts")) {
        validatingLayouts=true;
        zeroWidthComponents=new HashSet<Paintable>();
        zeroHeightComponents=new HashSet<Paintable>();
      }
    }
    if (meta.containsKey("timedRedirect")) {
      final ValueMap timedRedirect=meta.getValueMap("timedRedirect");
      redirectTimer=new Timer(){
        @Override public void run(){
          redirect(timedRedirect.getString("url"));
        }
      }
;
      sessionExpirationInterval=timedRedirect.getInt("interval");
    }
  }
  if (redirectTimer != null) {
    redirectTimer.schedule(1000 * sessionExpirationInterval);
  }
  JsArray<ValueMap> changes=json.getJSValueMapArray("changes");
  ArrayList<Paintable> updatedWidgets=new ArrayList<Paintable>();
  relativeSizeChanges.clear();
  componentCaptionSizeChanges.clear();
  int length=changes.length();
  for (int i=0; i < length; i++) {
    try {
      final UIDL change=changes.get(i).cast();
      try {
        console.dirUIDL(change);
      }
 catch (      final Exception e) {
        ClientExceptionHandler.displayError(e);
      }
      final UIDL uidl=change.getChildUIDL(0);
      final Paintable paintable=getPaintable(uidl.getId());
      if (paintable != null) {
        paintable.updateFromUIDL(uidl,this);
        updatedWidgets.add(idToPaintableDetail.get(uidl.getId()).getComponent());
      }
 else {
        if (!uidl.getTag().equals("0")) {
          ClientExceptionHandler.displayError("Received update for " + uidl.getTag() + ", but there is no such paintable ("+ uidl.getId()+ ") rendered.");
        }
 else {
          view.updateFromUIDL(uidl,this);
        }
      }
    }
 catch (    final Throwable e) {
      ClientExceptionHandler.displayError(e);
    }
  }
  Set<Paintable> sizeUpdatedWidgets=new HashSet<Paintable>();
  updatedWidgets.addAll(relativeSizeChanges);
  sizeUpdatedWidgets.addAll(componentCaptionSizeChanges);
  for (  Paintable paintable : updatedWidgets) {
    ComponentDetail detail=idToPaintableDetail.get(getPid(paintable));
    Widget widget=(Widget)paintable;
    Size oldSize=detail.getOffsetSize();
    Size newSize=new Size(widget.getOffsetWidth(),widget.getOffsetHeight());
    if (oldSize == null || !oldSize.equals(newSize)) {
      sizeUpdatedWidgets.add(paintable);
      detail.setOffsetSize(newSize);
    }
  }
  Util.componentSizeUpdated(sizeUpdatedWidgets);
  if (meta != null) {
    if (meta.containsKey("appError")) {
      ValueMap error=meta.getValueMap("appError");
      String html="";
      if (error.containsKey("caption") && error.getString("caption") != null) {
        html+="<h1>" + error.getAsString("caption") + "</h1>";
      }
      if (error.containsKey("message") && error.getString("message") != null) {
        html+="<p>" + error.getAsString("message") + "</p>";
      }
      String url=null;
      if (error.containsKey("url")) {
        url=error.getString("url");
      }
      if (html.length() != 0) {
        VNotification n=new VNotification(1000 * 60 * 45);
        n.addEventListener(new NotificationRedirect(url));
        n.show(html,VNotification.CENTERED_TOP,VNotification.STYLE_SYSTEM);
      }
 else {
        redirect(url);
      }
      applicationRunning=false;
    }
    if (validatingLayouts) {
      getConsole().printLayoutProblems(meta,this,zeroHeightComponents,zeroWidthComponents);
      zeroHeightComponents=null;
      zeroWidthComponents=null;
      validatingLayouts=false;
    }
  }
  final long prosessingTime=(new Date().getTime()) - start.getTime();
  console.log(" Processing time was " + String.valueOf(prosessingTime) + "ms for "+ jsonText.length()+ " characters of JSON");
  console.log("Referenced paintables: " + idToPaintableDetail.size());
  endRequest();
}
