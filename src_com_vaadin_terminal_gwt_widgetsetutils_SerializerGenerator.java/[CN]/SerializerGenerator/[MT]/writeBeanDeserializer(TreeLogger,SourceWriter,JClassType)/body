{
  String beanQualifiedSourceName=beanType.getQualifiedSourceName();
  sourceWriter.println(JSONObject.class.getName() + " json = (" + JSONObject.class.getName()+ ")jsonValue;");
  for (  JMethod method : getSetters(beanType)) {
    String setterName=method.getName();
    String fieldName=setterName.substring(3);
    JType setterParameterType=method.getParameterTypes()[0];
    logger.log(Type.DEBUG,"* Processing field " + fieldName + " in "+ beanQualifiedSourceName+ " ("+ beanType.getName()+ ")");
    sourceWriter.println("if (json.containsKey(\"" + fieldName + "\")) {");
    sourceWriter.indent();
    String jsonFieldName="json_" + fieldName;
    sourceWriter.println("JSONValue " + jsonFieldName + " = json.get(\""+ fieldName+ "\");");
    String fieldType;
    String getterName="get" + fieldName;
    JPrimitiveType primitiveType=setterParameterType.isPrimitive();
    if (primitiveType != null) {
      fieldType=primitiveType.getQualifiedBoxedSourceName();
      if (primitiveType == JPrimitiveType.BOOLEAN) {
        getterName="is" + fieldName;
      }
    }
 else {
      fieldType=setterParameterType.getQualifiedSourceName();
    }
    sourceWriter.println(fieldType + " referenceValue = target." + getterName+ "();");
    sourceWriter.print("target." + setterName + "(("+ fieldType+ ") "+ JsonDecoder.class.getName()+ ".decodeValue(");
    GeneratedRpcMethodProviderGenerator.writeTypeCreator(sourceWriter,setterParameterType);
    sourceWriter.println(", " + jsonFieldName + ", referenceValue, connection));");
    sourceWriter.outdent();
    sourceWriter.println("}");
  }
}
