{
  if (DOM.eventGetType(event) == Event.ONLOAD) {
    Util.notifyParentOfSizeChange(this,true);
  }
  if (!isEnabled()) {
    return;
  }
  int type=DOM.eventGetType(event);
switch (type) {
case Event.ONCLICK:
    boolean isPhantomClickPossible=BrowserInfo.get().isSafari() && BrowserInfo.get().isTouchDevice() && BrowserInfo.get().getBrowserMajorVersion() == 8;
  long clickTime=isPhantomClickPossible ? System.currentTimeMillis() : 0;
if (disallowNextClick || isPhantomClickPossible && (clickTime - lastClickTime < 100)) {
  event.stopPropagation();
  disallowNextClick=false;
  return;
}
lastClickTime=clickTime;
break;
case Event.ONMOUSEDOWN:
if (DOM.isOrHasChild(getElement(),DOM.eventGetTarget(event))) {
setHovering(true);
}
if (event.getButton() == Event.BUTTON_LEFT) {
mousedownX=event.getClientX();
mousedownY=event.getClientY();
disallowNextClick=true;
clickPending=true;
setFocus(true);
DOM.setCapture(getElement());
isCapturing=true;
addStyleName(CLASSNAME_PRESSED);
}
break;
case Event.ONMOUSEUP:
if (isCapturing) {
isCapturing=false;
DOM.releaseCapture(getElement());
if (isHovering() && event.getButton() == Event.BUTTON_LEFT) {
disallowNextClick=false;
}
removeStyleName(CLASSNAME_PRESSED);
}
break;
case Event.ONMOUSEMOVE:
clickPending=false;
if (isCapturing) {
DOM.eventPreventDefault(event);
}
break;
case Event.ONMOUSEOVER:
if (isCapturing && isTargetInsideButton(event)) {
setHovering(true);
addStyleName(CLASSNAME_PRESSED);
}
break;
case Event.ONMOUSEOUT:
if (isTargetInsideButton(event)) {
if (clickPending && Math.abs(mousedownX - event.getClientX()) < MOVE_THRESHOLD && Math.abs(mousedownY - event.getClientY()) < MOVE_THRESHOLD) {
onClick();
break;
}
clickPending=false;
setHovering(false);
removeStyleName(CLASSNAME_PRESSED);
}
break;
case Event.ONBLUR:
if (isFocusing) {
isFocusing=false;
}
break;
case Event.ONLOSECAPTURE:
if (isCapturing) {
isCapturing=false;
}
break;
}
super.onBrowserEvent(event);
if ((event.getTypeInt() & Event.KEYEVENTS) != 0) {
switch (type) {
case Event.ONKEYDOWN:
if (event.getKeyCode() == 32) {
isFocusing=true;
event.preventDefault();
event.stopPropagation();
}
 else if (event.getKeyCode() == KeyCodes.KEY_ENTER) {
event.stopPropagation();
}
break;
case Event.ONKEYUP:
if (isFocusing && event.getKeyCode() == 32) {
isFocusing=false;
onClick();
event.stopPropagation();
event.preventDefault();
}
break;
case Event.ONKEYPRESS:
if (event.getKeyCode() == KeyCodes.KEY_ENTER) {
onClick();
event.stopPropagation();
event.preventDefault();
}
break;
}
}
}
