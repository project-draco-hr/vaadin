{
  if (!onePermutation) {
    ArtifactSet toReturn=new ArtifactSet(artifacts);
    List<FileInfo> scssFiles=new ArrayList<FileInfo>();
    String tempFolderName=new Date().getTime() + File.separator;
    File tempFolder=createTempDir(tempFolderName);
    for (    EmittedArtifact resource : artifacts.find(EmittedArtifact.class)) {
      String partialPath=resource.getPartialPath();
      if (partialPath.endsWith(".scss")) {
        String fileName=partialPath;
        File path=tempFolder;
        int separatorIndex=fileName.lastIndexOf(File.separator);
        if (-1 != separatorIndex) {
          fileName=fileName.substring(separatorIndex + 1);
          String filePath=partialPath.substring(0,separatorIndex);
          path=createTempDir(tempFolderName + filePath);
        }
        File tempfile=new File(path,fileName);
        try {
          boolean fileCreated=tempfile.createNewFile();
          if (fileCreated) {
            writeFromInputStream(resource.getContents(logger),tempfile);
            scssFiles.add(new FileInfo(tempfile,partialPath));
            toReturn.remove(resource);
          }
 else {
            logger.log(TreeLogger.WARN,"Duplicate file " + tempfile.getPath());
          }
        }
 catch (        IOException e) {
          logger.log(TreeLogger.ERROR,"Could not write temporary file " + fileName,e);
        }
      }
    }
    logger.log(TreeLogger.INFO,"Processing " + scssFiles.size() + " Sass file(s)");
    for (    FileInfo fileInfo : scssFiles) {
      logger.log(TreeLogger.INFO,"   " + fileInfo.originalScssPath + " -> "+ fileInfo.getOriginalCssPath());
      try {
        ScssStylesheet scss=ScssStylesheet.get(fileInfo.getAbsolutePath());
        if (!fileInfo.isMixin()) {
          scss.compile();
          InputStream is=new ByteArrayInputStream(scss.toString().getBytes());
          toReturn.add(this.emitInputStream(logger,is,fileInfo.getOriginalCssPath()));
        }
        fileInfo.getFile().delete();
      }
 catch (      CSSException e) {
        logger.log(TreeLogger.ERROR,"SCSS compilation failed for " + fileInfo.getOriginalCssPath(),e);
      }
catch (      IOException e) {
        logger.log(TreeLogger.ERROR,"Could not write CSS file for " + fileInfo.getOriginalCssPath(),e);
      }
catch (      Exception e) {
        logger.log(TreeLogger.ERROR,"SCSS compilation failed for " + fileInfo.getOriginalCssPath(),e);
      }
    }
    return toReturn;
  }
  return artifacts;
}
