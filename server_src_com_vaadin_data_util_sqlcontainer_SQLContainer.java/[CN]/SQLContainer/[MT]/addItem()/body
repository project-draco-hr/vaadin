{
  Object emptyKey[]=new Object[queryDelegate.getPrimaryKeyColumns().size()];
  RowId itemId=new TemporaryRowId(emptyKey);
  List<ColumnProperty> itemProperties=new ArrayList<ColumnProperty>();
  for (  String propertyId : propertyIds) {
    ColumnProperty cp=new ColumnProperty(propertyId,propertyReadOnly.get(propertyId),propertyPersistable.get(propertyId),propertyNullable.get(propertyId),propertyPrimaryKey.get(propertyId),null,getType(propertyId));
    itemProperties.add(cp);
  }
  RowItem newRowItem=new RowItem(this,itemId,itemProperties);
  if (autoCommit) {
    try {
      if (queryDelegate instanceof TableQuery) {
        itemId=((TableQuery)queryDelegate).storeRowImmediately(newRowItem);
      }
 else {
        queryDelegate.beginTransaction();
        queryDelegate.storeRow(newRowItem);
        queryDelegate.commit();
      }
      refresh();
      if (notificationsEnabled) {
        CacheFlushNotifier.notifyOfCacheFlush(this);
      }
      getLogger().log(Level.FINER,"Row added to DB...");
      return itemId;
    }
 catch (    SQLException e) {
      getLogger().log(Level.WARNING,"Failed to add row to DB. Rolling back.",e);
      try {
        queryDelegate.rollback();
      }
 catch (      SQLException ee) {
        getLogger().log(Level.SEVERE,"Failed to roll back row addition",e);
      }
      return null;
    }
  }
 else {
    addedItems.add(newRowItem);
    fireContentsChange();
    return itemId;
  }
}
