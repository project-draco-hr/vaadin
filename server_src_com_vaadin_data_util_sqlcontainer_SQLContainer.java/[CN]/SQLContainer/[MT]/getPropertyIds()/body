{
  propertyIds.clear();
  propertyTypes.clear();
  delegate.setFilters(null);
  delegate.setOrderBy(null);
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  try {
    delegate.beginTransaction();
    rs=delegate.getResults(0,1);
    rsmd=rs.getMetaData();
    boolean resultExists=rs.next();
    Class<?> type=null;
    for (int i=1; i <= rsmd.getColumnCount(); i++) {
      if (!isColumnIdentifierValid(rsmd.getColumnLabel(i))) {
        continue;
      }
      String colName=rsmd.getColumnLabel(i);
      if (!propertyIds.contains(colName)) {
        propertyIds.add(colName);
      }
      if (resultExists && rs.getObject(i) != null) {
        type=rs.getObject(i).getClass();
      }
 else {
        try {
          type=Class.forName(rsmd.getColumnClassName(i));
        }
 catch (        Exception e) {
          getLogger().log(Level.WARNING,"Class not found",e);
          type=Object.class;
        }
      }
      boolean readOnly=rsmd.isAutoIncrement(i) || rsmd.isReadOnly(i);
      boolean persistable=!rsmd.isReadOnly(i);
      if (delegate instanceof TableQuery) {
        if (rsmd.getColumnLabel(i).equals(((TableQuery)delegate).getVersionColumn())) {
          readOnly=true;
        }
      }
      propertyReadOnly.put(colName,readOnly);
      propertyPersistable.put(colName,persistable);
      propertyNullable.put(colName,rsmd.isNullable(i) == ResultSetMetaData.columnNullable);
      propertyPrimaryKey.put(colName,delegate.getPrimaryKeyColumns().contains(rsmd.getColumnLabel(i)));
      propertyTypes.put(colName,type);
    }
    rs.getStatement().close();
    rs.close();
    delegate.commit();
    getLogger().log(Level.FINER,"Property IDs fetched.");
  }
 catch (  SQLException e) {
    getLogger().log(Level.WARNING,"Failed to fetch property ids, rolling back",e);
    try {
      delegate.rollback();
    }
 catch (    SQLException e1) {
      getLogger().log(Level.SEVERE,"Failed to roll back",e1);
    }
    try {
      if (rs != null) {
        if (rs.getStatement() != null) {
          rs.getStatement().close();
        }
        rs.close();
      }
    }
 catch (    SQLException e1) {
      getLogger().log(Level.WARNING,"Failed to close session",e1);
    }
    throw e;
  }
}
