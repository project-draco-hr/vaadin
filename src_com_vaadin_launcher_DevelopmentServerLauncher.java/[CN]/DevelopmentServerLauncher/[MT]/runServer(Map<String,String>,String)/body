{
  assignDefault(serverArgs,"webroot","WebContent");
  assignDefault(serverArgs,"httpPort","" + serverPort);
  assignDefault(serverArgs,"context","");
  int port=serverPort;
  try {
    port=Integer.parseInt(serverArgs.get("httpPort"));
  }
 catch (  NumberFormatException e) {
  }
  System.out.println("-------------------------------------------------\n" + "Starting Vaadin in " + mode + ".\n"+ "Running in http://localhost:"+ serverPort+ "\n-------------------------------------------------\n");
  final Server server=new Server();
  final Connector connector=new SelectChannelConnector();
  connector.setPort(port);
  if (serverArgs.containsKey("withssl")) {
    final SslSocketConnector sslConnector=new SslSocketConnector();
    sslConnector.setPort(8444);
    sslConnector.setTruststore(KEYSTORE);
    sslConnector.setTrustPassword("password");
    sslConnector.setKeystore(KEYSTORE);
    sslConnector.setKeyPassword("password");
    sslConnector.setPassword("password");
    server.setConnectors(new Connector[]{connector,sslConnector});
  }
 else {
    server.setConnectors(new Connector[]{connector});
  }
  final WebAppContext webappcontext=new WebAppContext();
  String path=DevelopmentServerLauncher.class.getPackage().getName().replace(".",File.separator);
  webappcontext.setDefaultsDescriptor(path + File.separator + "jetty-webdefault.xml");
  webappcontext.setContextPath(serverArgs.get("context"));
  webappcontext.setWar(serverArgs.get("webroot"));
  server.setHandler(webappcontext);
  try {
    server.start();
  }
 catch (  Exception e) {
    server.stop();
    throw e;
  }
  return "http://localhost:" + port + serverArgs.get("context");
}
