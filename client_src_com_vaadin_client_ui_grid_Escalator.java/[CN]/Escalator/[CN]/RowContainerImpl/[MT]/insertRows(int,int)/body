{
  if (offset < 0 || offset > getRowCount()) {
    throw new IndexOutOfBoundsException("The given offset (" + offset + ") was outside of the current number of rows (0.."+ getRowCount()+ ")");
  }
  if (numberOfRows < 1) {
    throw new IllegalArgumentException("Number of rows must be 1 or greater (was " + numberOfRows + ")");
  }
  rows+=numberOfRows;
  Node referenceNode;
  if (root.getChildCount() != 0 && offset != 0) {
    referenceNode=root.getChild(offset - 1);
  }
 else {
    referenceNode=null;
  }
  for (int row=offset; row < offset + numberOfRows; row++) {
    final Element tr=DOM.createTR();
    for (int col=0; col < columnConfiguration.getColumnCount(); col++) {
      final Element cellElem=createCellElement();
      paintCell(cellElem,row,col);
      tr.appendChild(cellElem);
    }
    recalculateRowWidth(tr);
    tr.addClassName(CLASS_NAME + "-row");
    position.set(tr,0,row * ROW_HEIGHT_PX);
    if (referenceNode != null) {
      root.insertAfter(tr,referenceNode);
    }
 else {
      root.insertFirst(tr);
    }
    referenceNode=tr;
  }
  refreshRowPositions(offset + numberOfRows,getRowCount());
  recalculateSectionHeight();
}
