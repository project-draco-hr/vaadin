{
  if (visualSourceRange.isEmpty()) {
    return;
  }
  if (visualSourceRange.getStart() < 0) {
    throw new IllegalArgumentException("Logical source start must be 0 or greater (was " + visualSourceRange.getStart() + ")");
  }
 else   if (logicalTargetIndex < 0) {
    throw new IllegalArgumentException("Logical target must be 0 or greater");
  }
 else   if (visualTargetIndex < 0) {
    throw new IllegalArgumentException("Visual target must be 0 or greater");
  }
 else   if (visualTargetIndex > root.getChildCount()) {
    throw new IllegalArgumentException("Visual target must not be greater than the number of escalator rows");
  }
 else   if (logicalTargetIndex + visualSourceRange.length() > getRowCount()) {
    final int logicalEndIndex=logicalTargetIndex + visualSourceRange.length() - 1;
    throw new IllegalArgumentException("Logical target leads to rows outside of the data range (" + logicalTargetIndex + ".."+ logicalEndIndex+ ")");
  }
  final int adjustedVisualTargetIndex;
  if (visualSourceRange.getStart() < visualTargetIndex) {
    adjustedVisualTargetIndex=visualTargetIndex - visualSourceRange.length();
  }
 else {
    adjustedVisualTargetIndex=visualTargetIndex;
  }
  if (visualSourceRange.getStart() != adjustedVisualTargetIndex) {
    final List<Element> removedRows=new ArrayList<Element>(visualSourceRange.length());
    for (int i=0; i < visualSourceRange.length(); i++) {
      final Element tr=visualRowOrder.remove(visualSourceRange.getStart());
      removedRows.add(tr);
    }
    visualRowOrder.addAll(adjustedVisualTargetIndex,removedRows);
  }
{
    final ListIterator<Element> iter=visualRowOrder.listIterator(adjustedVisualTargetIndex);
    for (int logicalIndex=logicalTargetIndex; logicalIndex < logicalTargetIndex + visualSourceRange.length(); logicalIndex++) {
      final Element tr=iter.next();
      refreshRow(tr,logicalIndex);
    }
  }
{
    int newRowTop=logicalTargetIndex * getDefaultRowHeight();
    final ListIterator<Element> iter=visualRowOrder.listIterator(adjustedVisualTargetIndex);
    for (int i=0; i < visualSourceRange.length(); i++) {
      final Element tr=iter.next();
      setRowPosition(tr,0,newRowTop);
      newRowTop+=getDefaultRowHeight();
    }
  }
}
