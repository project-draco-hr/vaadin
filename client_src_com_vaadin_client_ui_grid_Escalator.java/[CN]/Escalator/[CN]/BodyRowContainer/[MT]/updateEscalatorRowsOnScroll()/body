{
  final int topRowPos=getRowTop(visualRowOrder.getFirst());
  final int scrollTop=tBodyScrollTop;
  final int viewportOffset=topRowPos - scrollTop;
  if (viewportOffset > 0) {
    int rowsToMove=(int)Math.ceil((double)viewportOffset / (double)ROW_HEIGHT_PX);
    rowsToMove=Math.min(rowsToMove,root.getChildCount());
    final int end=root.getChildCount();
    final int start=end - rowsToMove;
    final int logicalRowIndex=scrollTop / ROW_HEIGHT_PX;
    moveAndUpdateEscalatorRows(Range.between(start,end),0,logicalRowIndex);
  }
 else   if (viewportOffset + ROW_HEIGHT_PX <= 0) {
    int rowsToMove=Math.abs(viewportOffset / ROW_HEIGHT_PX);
    rowsToMove=Math.min(rowsToMove,root.getChildCount());
    int logicalRowIndex;
    if (rowsToMove < root.getChildCount()) {
      logicalRowIndex=getLogicalRowIndex(visualRowOrder.getLast()) + 1;
    }
 else {
      logicalRowIndex=scrollTop / ROW_HEIGHT_PX;
    }
    final int targetVisualIndex=root.getChildCount();
    boolean aRowWasLeftBehind=false;
    if (logicalRowIndex + rowsToMove > getRowCount()) {
      rowsToMove--;
      aRowWasLeftBehind=true;
    }
    moveAndUpdateEscalatorRows(Range.between(0,rowsToMove),targetVisualIndex,logicalRowIndex);
    if (aRowWasLeftBehind) {
      final Range strayRow=Range.withOnly(0);
      final int topLogicalIndex=getLogicalRowIndex(visualRowOrder.get(1)) - 1;
      moveAndUpdateEscalatorRows(strayRow,0,topLogicalIndex);
    }
  }
}
