{
  final NodeList<Node> childNodes=root.getChildNodes();
  for (int row=0; row < childNodes.getLength(); row++) {
    final int rowHeight=getDefaultRowHeight();
    final Element tr=getTrByVisualIndex(row);
    Node referenceCell;
    if (offset != 0) {
      referenceCell=tr.getChild(offset - 1);
    }
 else {
      referenceCell=null;
    }
    for (int col=offset; col < offset + numberOfColumns; col++) {
      final int colWidth=columnConfiguration.getColumnWidthActual(col);
      final Element cellElem=createCellElement(rowHeight,colWidth);
      referenceCell=insertAfterReferenceAndUpdateIt(tr,cellElem,referenceCell);
    }
  }
  reapplyRowWidths();
  if (frozen) {
    for (int col=offset; col < offset + numberOfColumns; col++) {
      setColumnFrozen(col,true);
    }
  }
  scroller.recalculateScrollbarsForVirtualViewport();
  int pixelsToInsertedColumn=columnConfiguration.getCalculatedColumnsWidth(Range.withLength(0,offset));
  final boolean columnsWereAddedToTheLeftOfViewport=scroller.lastScrollLeft > pixelsToInsertedColumn;
  if (columnsWereAddedToTheLeftOfViewport) {
    int insertedColumnsWidth=columnConfiguration.getCalculatedColumnsWidth(Range.withLength(offset,numberOfColumns));
    horizontalScrollbar.setScrollPos(scroller.lastScrollLeft + insertedColumnsWidth);
  }
  if (getRowCount() > 0 && getColumnConfiguration().getColumnCount() > 1) {
    refreshRows(0,getRowCount());
  }
}
