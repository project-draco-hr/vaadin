{
  table=new Table();
  table.addContainerProperty("foo",String.class,"foo");
  table.addContainerProperty("red",String.class,"red");
  table.addContainerProperty("icon",Resource.class,null);
  table.setSelectable(true);
  table.setRowHeaderMode(RowHeaderMode.ICON_ONLY);
  table.setItemIconPropertyId("icon");
  table.setId("testable-table");
  addComponent(table);
  for (int i=0; i < 5; i++) {
    addItemAfter(i + "foo",null);
  }
  table.addGeneratedColumn("Label",new ColumnGenerator(){
    private static final long serialVersionUID=-5042109683675242407L;
    @Override public Component generateCell(    Table source,    Object itemId,    Object columnId){
      Item item=source.getItem(itemId);
      return new Label("" + item.getItemProperty("foo").getValue());
    }
  }
);
  table.addGeneratedColumn("textField",new ColumnGenerator(){
    private static final long serialVersionUID=-5042109683675242407L;
    @Override public Component generateCell(    Table source,    Object itemId,    Object columnId){
      Item item=source.getItem(itemId);
      TextField textfield=new TextField();
      textfield.setValue(String.valueOf(item.getItemProperty("foo").getValue()));
      return textfield;
    }
  }
);
  table.addGeneratedColumn("readOnlyTextField",new ColumnGenerator(){
    private static final long serialVersionUID=-5042109683675242407L;
    @Override public Component generateCell(    Table source,    Object itemId,    Object columnId){
      Item item=source.getItem(itemId);
      TextField textfield=new TextField();
      textfield.setValue(String.valueOf(item.getItemProperty("foo").getValue()));
      textfield.setReadOnly(true);
      return textfield;
    }
  }
);
  table.addGeneratedColumn("embedded",new ColumnGenerator(){
    private static final long serialVersionUID=-5042109683675242407L;
    @Override public Component generateCell(    Table source,    Object itemId,    Object columnId){
      Embedded embedded=new Embedded(null,new ThemeResource("../runo/icons/16/ok.png"));
      return embedded;
    }
  }
);
  table.setDragMode(TableDragMode.ROW);
  table.setDropHandler(new DropHandler(){
    @Override public AcceptCriterion getAcceptCriterion(){
      return AcceptAll.get();
    }
    @Override public void drop(    DragAndDropEvent event){
      DataBoundTransferable t=(DataBoundTransferable)event.getTransferable();
      Object dragged=t.getItemId();
      AbstractSelectTargetDetails dropData=((AbstractSelectTargetDetails)event.getTargetDetails());
      Object target=dropData.getItemIdOver();
      if (dragged == target || target == null) {
        return;
      }
      IndexedContainer container=(IndexedContainer)table.getContainerDataSource();
      container.removeItem(dragged);
      addItemAfter(dragged,target);
    }
  }
);
}
