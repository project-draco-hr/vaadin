{
  return "<p>Millstone component framework supports both transactional and " + "continuous terminals. This means that either the events from the " + "terminal are sent together as transactions or the events are "+ "passed immediately when the user initiates them through the user "+ "interface. </p>"+ "<p>WebAdapter converts the Millstone applications to web-environment "+ "by transferring the events as HTTP-parameters and drawing the "+ "pages after the components have received and handled the events. "+ "In the web-environment the web browser is always the active party that "+ "starts the transaction. This is problematic when the server should "+ "notify the user about changes without HTTP-request initiated by the "+ "user.</p>"+ "<h3>WebAdapter Solution</h3>"+ "<p>Millstone solves the problem by combining component frameworks "+ "ability to automatically notify terminal adapter about all visual "+ "changes to HTTP-protocols ability to handle very long and slow "+ "page downloads. WebAdapter provides the web browser with "+ "possibility to keep special server command stream open all the time. "+ "All the visual updates that happen in components causes the "+ "WebAdapter to automatically creates JavaScript that updates the "+ "corresponding web browser window and to send the script immediately "+ "to browser for execution.</p>"+ "<p>The mechanism is fairly complicated, but using the mechanism in "+ "any Millstone application is trivial. Application just needs "+ "to make sure that WebBrowser opens a hidden iframe to location: "+ "<code>?SERVER_COMMANDS=1</code>.</p>"+ "<p>See the example of the usage on Demo-tab to get better understanding "+ "of the mechanism. If you read the example's source code, you will notice that "+ "the program does not contain any support for sending events to client, as "+ "it is completely automatic.</p>";
}
