{
  for (  Class<?> c : new Class<?>[]{Byte.class,Short.class,Integer.class,Long.class}) {
    DesignToStringConverter<?> conv=new DesignToStringConverter(c);
    converterMap.put(c,conv);
    try {
      converterMap.put((Class<?>)c.getField("TYPE").get(null),conv);
    }
 catch (    Exception e) {
      ;
    }
  }
  LegacyConverter<String,Boolean> booleanConverter=new LegacyConverter<String,Boolean>(){
    @Override public Boolean convertToModel(    String value,    Class<? extends Boolean> targetType,    Locale locale) throws LegacyConverter.ConversionException {
      return !value.equalsIgnoreCase("false");
    }
    @Override public String convertToPresentation(    Boolean value,    Class<? extends String> targetType,    Locale locale) throws LegacyConverter.ConversionException {
      if (value.booleanValue()) {
        return "";
      }
 else {
        return "false";
      }
    }
    @Override public Class<Boolean> getModelType(){
      return Boolean.class;
    }
    @Override public Class<String> getPresentationType(){
      return String.class;
    }
  }
;
  converterMap.put(Boolean.class,booleanConverter);
  converterMap.put(boolean.class,booleanConverter);
  final DecimalFormatSymbols symbols=new DecimalFormatSymbols(new Locale("en_US"));
  final DecimalFormat fmt=new DecimalFormat("0.###",symbols);
  fmt.setGroupingUsed(false);
  LegacyConverter<String,?> floatConverter=new LegacyStringToFloatConverter(){
    @Override protected NumberFormat getFormat(    Locale locale){
      return fmt;
    }
  }
;
  converterMap.put(Float.class,floatConverter);
  converterMap.put(float.class,floatConverter);
  LegacyConverter<String,?> doubleConverter=new LegacyStringToDoubleConverter(){
    @Override protected NumberFormat getFormat(    Locale locale){
      return fmt;
    }
  }
;
  converterMap.put(Double.class,doubleConverter);
  converterMap.put(double.class,doubleConverter);
  final DecimalFormat bigDecimalFmt=new DecimalFormat("0.###",symbols);
  bigDecimalFmt.setGroupingUsed(false);
  bigDecimalFmt.setParseBigDecimal(true);
  converterMap.put(BigDecimal.class,new LegacyStringToBigDecimalConverter(){
    @Override protected NumberFormat getFormat(    Locale locale){
      return bigDecimalFmt;
    }
  }
);
  converterMap.put(String.class,new LegacyConverter<String,String>(){
    @Override public String convertToModel(    String value,    Class<? extends String> targetType,    Locale locale) throws LegacyConverter.ConversionException {
      return value;
    }
    @Override public String convertToPresentation(    String value,    Class<? extends String> targetType,    Locale locale) throws LegacyConverter.ConversionException {
      return value;
    }
    @Override public Class<String> getModelType(){
      return String.class;
    }
    @Override public Class<String> getPresentationType(){
      return String.class;
    }
  }
);
  LegacyConverter<String,Character> charConverter=new DesignToStringConverter<Character>(Character.class){
    @Override public Character convertToModel(    String value,    Class<? extends Character> targetType,    Locale locale) throws LegacyConverter.ConversionException {
      return value.charAt(0);
    }
  }
;
  converterMap.put(Character.class,charConverter);
  converterMap.put(char.class,charConverter);
  converterMap.put(Date.class,new DesignDateConverter());
  converterMap.put(ShortcutAction.class,new DesignShortcutActionConverter());
  converterMap.put(Resource.class,new DesignResourceConverter());
  converterMap.put(TimeZone.class,new DesignTimeZoneConverter());
}
