{
  if (component == null) {
    throw new NullPointerException("Component must not be null");
  }
  if (components.contains(component)) {
    throw new IllegalArgumentException("Component is already in the container");
  }
  final Area area=new Area(component,column1,row1,column2,row2);
  if (column2 < column1 || row2 < row1) {
    throw new IllegalArgumentException("Illegal coordinates for the component");
  }
  if (column1 < 0 || row1 < 0 || column2 >= getColumns() || row2 >= getRows()) {
    throw new OutOfBoundsException(area);
  }
  checkExistingOverlaps(area);
  final Iterator<Component> i=components.iterator();
  final Map<Connector,ChildComponentData> childDataMap=getState().childData;
  int index=0;
  boolean done=false;
  while (!done && i.hasNext()) {
    final ChildComponentData existingArea=childDataMap.get(i.next());
    if ((existingArea.row1 >= row1 && existingArea.column1 > column1) || existingArea.row1 > row1) {
      components.add(index,component);
      done=true;
    }
    index++;
  }
  if (!done) {
    components.addLast(component);
  }
  childDataMap.put(component,area.childData);
  try {
    super.addComponent(component);
  }
 catch (  IllegalArgumentException e) {
    childDataMap.remove(component);
    components.remove(component);
    throw e;
  }
  if (cursorX >= column1 && cursorX <= column2 && cursorY >= row1 && cursorY <= row2) {
    cursorX=column2 + 1;
    if (cursorX >= getColumns()) {
      cursorX=0;
      cursorY=(column1 == 0 ? row2 : row1) + 1;
    }
 else {
      cursorY=row1;
    }
  }
  markAsDirty();
}
