{
  Validate.notNull(req,"Request must not be null");
  String protocol=req.url().getProtocol();
  Validate.isTrue(protocol.equals("http") || protocol.equals("https"),"Only http & https protocols supported");
  if (req.method() == Connection.Method.GET && req.data().size() > 0)   serialiseRequestUrl(req);
  HttpURLConnection conn=createConnection(req);
  conn.connect();
  if (req.method() == Connection.Method.POST)   writePost(req.data(),conn.getOutputStream());
  int status=conn.getResponseCode();
  boolean needsRedirect=false;
  if (status != HttpURLConnection.HTTP_OK) {
    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)     needsRedirect=true;
 else     if (!req.ignoreHttpErrors())     throw new IOException(status + " error loading URL " + req.url().toString());
  }
  Response res=new Response(previousResponse);
  res.setupFromConnection(conn,previousResponse);
  if (needsRedirect && req.followRedirects()) {
    req.method(Method.GET);
    req.data().clear();
    req.url(new URL(req.url(),res.header("Location")));
    for (    Map.Entry<String,String> cookie : res.cookies.entrySet()) {
      req.cookie(cookie.getKey(),cookie.getValue());
    }
    return execute(req,res);
  }
  res.req=req;
  InputStream bodyStream=null;
  InputStream dataStream=null;
  try {
    dataStream=conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();
    bodyStream=res.hasHeader("Content-Encoding") && res.header("Content-Encoding").equalsIgnoreCase("gzip") ? new BufferedInputStream(new GZIPInputStream(dataStream)) : new BufferedInputStream(dataStream);
    res.byteData=DataUtil.readToByteBuffer(bodyStream);
    res.charset=DataUtil.getCharsetFromContentType(res.contentType);
  }
  finally {
    if (bodyStream != null)     bodyStream.close();
    if (dataStream != null)     dataStream.close();
  }
  res.executed=true;
  return res;
}
