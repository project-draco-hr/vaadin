{
  Class beanClass=instance.getClass();
  if (Character.isLowerCase(beanPropertyName.charAt(0))) {
    char[] buf=beanPropertyName.toCharArray();
    buf[0]=Character.toUpperCase(buf[0]);
    beanPropertyName=new String(buf);
  }
  getMethod=null;
  try {
    getMethod=beanClass.getMethod("get" + beanPropertyName,new Class[]{});
  }
 catch (  java.lang.NoSuchMethodException ignored) {
    try {
      getMethod=beanClass.getMethod("is" + beanPropertyName,new Class[]{});
    }
 catch (    java.lang.NoSuchMethodException ignoredAsWell) {
      try {
        getMethod=beanClass.getMethod("are" + beanPropertyName,new Class[]{});
      }
 catch (      java.lang.NoSuchMethodException e) {
        throw new MethodProperty.MethodException("Bean property " + beanPropertyName + " can not be found");
      }
    }
  }
  type=getMethod.getReturnType();
  setMethod=null;
  try {
    setMethod=beanClass.getMethod("set" + beanPropertyName,new Class[]{type});
  }
 catch (  java.lang.NoSuchMethodException skipped) {
  }
  if (type.isPrimitive()) {
    if (type.equals(Boolean.TYPE))     type=Boolean.class;
 else     if (type.equals(Integer.TYPE))     type=Integer.class;
 else     if (type.equals(Float.TYPE))     type=Float.class;
 else     if (type.equals(Double.TYPE))     type=Double.class;
 else     if (type.equals(Byte.TYPE))     type=Byte.class;
 else     if (type.equals(Character.TYPE))     type=Character.class;
 else     if (type.equals(Short.TYPE))     type=Short.class;
 else     if (type.equals(Long.TYPE))     type=Long.class;
  }
  setArguments(new Object[]{},new Object[]{null},0);
  this.readOnly=(setMethod == null);
  this.instance=instance;
}
