{
  if (client.updateComponent(this,uidl,true))   return;
  this.client=client;
  if (uidl.hasAttribute("partialUpdate")) {
    handleUpdate(uidl);
    return;
  }
  this.paintableId=uidl.getId();
  clear();
  for (Iterator i=uidl.getChildIterator(); i.hasNext(); ) {
    UIDL childUidl=(UIDL)i.next();
    if ("actions".equals(childUidl.getTag())) {
      updateActionMap(childUidl);
      continue;
    }
    TreeNode childTree=new TreeNode();
    addItem(childTree);
    childTree.updateFromUIDL(childUidl,client);
  }
  String selectMode=uidl.getStringAttribute("selectmode");
  selectable=selectMode != null;
  multiselect="multi".equals(selectMode);
  addTreeListener(new TreeListener(){
    public void onTreeItemStateChanged(    TreeItem item){
      if (item instanceof TreeNode) {
        TreeNode tn=(TreeNode)item;
        if (item.getState()) {
          if (!tn.isChildrenLoaded()) {
            String key=tn.key;
            ITree.this.client.updateVariable(paintableId,"expand",new String[]{key},true);
          }
        }
 else {
        }
      }
    }
    public void onTreeItemSelected(    TreeItem item){
      if (!selectable)       return;
      item.setSelected(true);
      String key=((TreeNode)item).key;
      if (key != null) {
        if (!multiselect)         selectedIds.clear();
        if (selectedIds.contains(key))         selectedIds.remove(key);
 else         selectedIds.add(key);
        ITree.this.client.updateVariable(ITree.this.paintableId,"selected",selectedIds.toArray(),true);
      }
    }
  }
);
  selectedIds=uidl.getStringArrayVariableAsSet("selected");
}
