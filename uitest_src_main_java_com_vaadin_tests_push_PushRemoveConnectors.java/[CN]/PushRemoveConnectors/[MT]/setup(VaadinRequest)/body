{
  final CheckBox pollingEnabled=new CheckBox("Polling enabled");
  pollingEnabled.addValueChangeListener(new ValueChangeListener(){
    @Override public void valueChange(    ValueChangeEvent event){
      setPollInterval(pollingEnabled.getValue() ? 1000 : -1);
    }
  }
);
  Button start=new Button("start");
  start.setId(START);
  start.addClickListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      task=threadPool.scheduleAtFixedRate(new Runnable(){
        @Override public void run(){
          access(new Runnable(){
            public void run(){
              populate();
              log("Serialized session size: " + getSessionSize());
            }
          }
);
        }
      }
,1,1,TimeUnit.SECONDS);
    }
  }
);
  Button stop=new Button("stop");
  stop.setId(STOP);
  stop.addClickListener(new ClickListener(){
    @Override public void buttonClick(    ClickEvent event){
      if (task != null) {
        task.cancel(true);
        task=null;
      }
    }
  }
);
  verticalLayout=new HorizontalLayout();
  populate();
  addComponents(pollingEnabled,start,stop,verticalLayout);
}
