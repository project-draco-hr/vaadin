{
  rendering=true;
  showColFooters=uidl.getBooleanAttribute("colfooters");
  tFoot.setVisible(showColFooters);
  if (client.updateComponent(this,uidl,true)) {
    rendering=false;
    return;
  }
  rowRequestHandler.cancel();
  enabled=!uidl.hasAttribute("disabled");
  this.client=client;
  paintableId=uidl.getStringAttribute("id");
  immediate=uidl.getBooleanAttribute("immediate");
  final int newTotalRows=uidl.getIntAttribute("totalrows");
  if (newTotalRows != totalRows) {
    if (scrollBody != null) {
      if (totalRows == 0) {
        tHead.clear();
        tFoot.clear();
      }
      initializedAndAttached=false;
      initialContentReceived=false;
      isNewBody=true;
    }
    totalRows=newTotalRows;
  }
  dragmode=uidl.hasAttribute("dragmode") ? uidl.getIntAttribute("dragmode") : 0;
  multiselectmode=uidl.hasAttribute("multiselectmode") ? uidl.getIntAttribute("multiselectmode") : MULTISELECT_MODE_DEFAULT;
  setCacheRate(uidl.hasAttribute("cr") ? uidl.getDoubleAttribute("cr") : CACHE_RATE_DEFAULT);
  recalcWidths=uidl.hasAttribute("recalcWidths");
  if (recalcWidths) {
    tHead.clear();
    tFoot.clear();
  }
  if (uidl.hasAttribute("pagelength")) {
    pageLength=uidl.getIntAttribute("pagelength");
  }
 else {
    pageLength=totalRows;
  }
  firstvisible=uidl.hasVariable("firstvisible") ? uidl.getIntVariable("firstvisible") : 0;
  if (firstvisible != lastRequestedFirstvisible && scrollBody != null) {
    firstRowInViewPort=firstvisible;
    scrollBodyPanel.setScrollPosition((int)(firstvisible * scrollBody.getRowHeight()));
  }
  showRowHeaders=uidl.getBooleanAttribute("rowheaders");
  showColHeaders=uidl.getBooleanAttribute("colheaders");
  if (uidl.hasVariable("sortascending")) {
    sortAscending=uidl.getBooleanVariable("sortascending");
    sortColumn=uidl.getStringVariable("sortcolumn");
  }
  if (uidl.hasVariable("selected")) {
    final Set<String> selectedKeys=uidl.getStringArrayVariableAsSet("selected");
    for (    String string : selectedKeys) {
      VScrollTableRow row=getRenderedRowByKey(string);
      if (row != null && !row.isSelected()) {
        row.toggleSelection(false);
      }
    }
  }
  if (uidl.hasAttribute("selectmode")) {
    if (uidl.getBooleanAttribute("readonly")) {
      selectMode=Table.SELECT_MODE_NONE;
    }
 else     if (uidl.getStringAttribute("selectmode").equals("multi")) {
      selectMode=Table.SELECT_MODE_MULTI;
    }
 else     if (uidl.getStringAttribute("selectmode").equals("single")) {
      selectMode=Table.SELECT_MODE_SINGLE;
    }
 else {
      selectMode=Table.SELECT_MODE_NONE;
    }
  }
  if (uidl.hasVariable("columnorder")) {
    columnReordering=true;
    columnOrder=uidl.getStringArrayVariable("columnorder");
  }
  if (uidl.hasVariable("collapsedcolumns")) {
    tHead.setColumnCollapsingAllowed(true);
    collapsedColumns=uidl.getStringArrayVariableAsSet("collapsedcolumns");
  }
 else {
    tHead.setColumnCollapsingAllowed(false);
  }
  UIDL rowData=null;
  UIDL ac=null;
  for (final Iterator it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL c=(UIDL)it.next();
    if (c.getTag().equals("rows")) {
      rowData=c;
    }
 else     if (c.getTag().equals("actions")) {
      updateActionMap(c);
    }
 else     if (c.getTag().equals("visiblecolumns")) {
      tHead.updateCellsFromUIDL(c);
      tFoot.updateCellsFromUIDL(c);
    }
 else     if (c.getTag().equals("-ac")) {
      ac=c;
    }
  }
  if (ac == null) {
    if (dropHandler != null) {
      dropHandler=null;
    }
  }
 else {
    if (dropHandler == null) {
      dropHandler=new VScrollTableDropHandler();
    }
    dropHandler.updateAcceptRules(ac);
  }
  updateHeader(uidl.getStringArrayAttribute("vcolorder"));
  updateFooter(uidl.getStringArrayAttribute("vcolorder"));
  if (!recalcWidths && initializedAndAttached) {
    updateBody(rowData,uidl.getIntAttribute("firstrow"),uidl.getIntAttribute("rows"));
    if (headerChangedDuringUpdate) {
      lazyAdjustColumnWidths.schedule(1);
    }
 else {
      DeferredCommand.addCommand(new Command(){
        public void execute(){
          Util.runWebkitOverflowAutoFix(scrollBodyPanel.getElement());
        }
      }
);
    }
  }
 else {
    if (scrollBody != null) {
      scrollBody.removeFromParent();
      lazyUnregistryBag.add(scrollBody);
    }
    scrollBody=createScrollBody();
    scrollBody.renderInitialRows(rowData,uidl.getIntAttribute("firstrow"),uidl.getIntAttribute("rows"));
    scrollBodyPanel.add(scrollBody);
    initialContentReceived=true;
    if (isAttached()) {
      sizeInit();
    }
    scrollBody.restoreRowVisibility();
  }
  if (selectMode == Table.SELECT_MODE_NONE) {
    scrollBody.addStyleName(CLASSNAME + "-body-noselection");
  }
 else {
    scrollBody.removeStyleName(CLASSNAME + "-body-noselection");
  }
  hideScrollPositionAnnotation();
  purgeUnregistryBag();
  if (selectFirstItemInNextRender) {
    selectFirstRenderedRow(false);
    selectFirstItemInNextRender=false;
  }
  if (focusFirstItemInNextRender) {
    selectFirstRenderedRow(true);
    focusFirstItemInNextRender=false;
  }
  if (selectLastItemInNextRender) {
    selectLastRenderedRow(false);
    selectLastItemInNextRender=false;
  }
  if (focusLastItemInNextRender) {
    selectLastRenderedRow(true);
    focusLastItemInNextRender=false;
  }
  if (focusedRow != null) {
    setRowFocus(getRenderedRowByKey(focusedRow.getKey()));
  }
  rendering=false;
  headerChangedDuringUpdate=false;
}
