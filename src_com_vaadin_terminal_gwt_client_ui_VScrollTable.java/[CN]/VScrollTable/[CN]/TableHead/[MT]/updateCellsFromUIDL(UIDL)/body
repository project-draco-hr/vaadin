{
  Iterator<?> it=uidl.getChildIterator();
  HashSet<String> updated=new HashSet<String>();
  while (it.hasNext()) {
    final UIDL col=(UIDL)it.next();
    final String cid=col.getStringAttribute("cid");
    updated.add(cid);
    String caption=buildCaptionHtmlSnippet(col);
    HeaderCell c=getHeaderCell(cid);
    if (c == null) {
      c=new HeaderCell(cid,caption);
      availableCells.put(cid,c);
      if (initializedAndAttached) {
        initializedAndAttached=false;
        initialContentReceived=false;
        isNewBody=true;
      }
    }
 else {
      c.setText(caption);
    }
    if (col.hasAttribute("sortable")) {
      c.setSortable(true);
      if (cid.equals(sortColumn)) {
        c.setSorted(true);
      }
 else {
        c.setSorted(false);
      }
    }
 else {
      c.setSortable(false);
    }
    if (col.hasAttribute("align")) {
      c.setAlign(col.getStringAttribute("align").charAt(0));
    }
 else {
      c.setAlign(ALIGN_LEFT);
    }
    if (col.hasAttribute("width")) {
      final String widthStr=col.getStringAttribute("width");
      int width=Integer.parseInt(widthStr);
      if (width < c.getMinWidth()) {
        width=c.getMinWidth();
      }
      c.setWidth(width,true);
    }
 else     if (recalcWidths) {
      c.setUndefinedWidth();
    }
    if (col.hasAttribute("er")) {
      c.setExpandRatio(col.getFloatAttribute("er"));
    }
    if (col.hasAttribute("collapsed")) {
      if (c.isAttached()) {
        c.removeFromParent();
        headerChangedDuringUpdate=true;
      }
    }
  }
  for (Iterator<String> cit=availableCells.keySet().iterator(); cit.hasNext(); ) {
    String cid=cit.next();
    if (!updated.contains(cid)) {
      removeCell(cid);
      cit.remove();
    }
  }
}
