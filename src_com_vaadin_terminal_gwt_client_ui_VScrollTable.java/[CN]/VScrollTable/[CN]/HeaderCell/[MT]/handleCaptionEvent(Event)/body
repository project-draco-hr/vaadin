{
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
    if (columnReordering) {
      dragging=true;
      moved=false;
      colIndex=getColIndexByKey(cid);
      DOM.setCapture(getElement());
      headerX=tHead.getAbsoluteLeft();
      DOM.eventPreventDefault(event);
    }
  break;
case Event.ONMOUSEUP:
if (columnReordering) {
  dragging=false;
  DOM.releaseCapture(getElement());
  if (moved) {
    hideFloatingCopy();
    tHead.removeSlotFocus();
    if (closestSlot != colIndex && closestSlot != (colIndex + 1)) {
      if (closestSlot > colIndex) {
        reOrderColumn(cid,closestSlot - 1);
      }
 else {
        reOrderColumn(cid,closestSlot);
      }
    }
  }
}
if (!moved) {
if (sortable) {
  if (sortColumn.equals(cid)) {
    client.updateVariable(paintableId,"sortascending",!sortAscending,false);
  }
 else {
    client.updateVariable(paintableId,"sortcolumn",cid,false);
  }
  scrollBodyPanel.setScrollPosition(0);
  firstvisible=0;
  rowRequestHandler.setReqFirstRow(0);
  rowRequestHandler.setReqRows((int)(2 * pageLength * cache_rate + pageLength));
  rowRequestHandler.deferRowFetch();
}
fireHeaderClickedEvent(event);
break;
}
fireHeaderClickedEvent(event);
break;
case Event.ONMOUSEMOVE:
if (dragging) {
if (!moved) {
createFloatingCopy();
moved=true;
}
final int x=DOM.eventGetClientX(event) + DOM.getElementPropertyInt(tHead.hTableWrapper,"scrollLeft");
int slotX=headerX;
closestSlot=colIndex;
int closestDistance=-1;
int start=0;
if (showRowHeaders) {
start++;
}
final int visibleCellCount=tHead.getVisibleCellCount();
for (int i=start; i <= visibleCellCount; i++) {
if (i > 0) {
final String colKey=getColKeyByIndex(i - 1);
slotX+=getColWidth(colKey);
}
final int dist=Math.abs(x - slotX);
if (closestDistance == -1 || dist < closestDistance) {
closestDistance=dist;
closestSlot=i;
}
}
tHead.focusSlot(closestSlot);
updateFloatingCopysPosition(DOM.eventGetClientX(event),-1);
}
break;
default :
break;
}
}
