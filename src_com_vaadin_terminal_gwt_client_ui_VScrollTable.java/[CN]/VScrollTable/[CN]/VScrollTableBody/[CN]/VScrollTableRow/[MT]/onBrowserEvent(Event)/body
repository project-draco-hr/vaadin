{
  if (enabled) {
    final int type=event.getTypeInt();
    final Element targetTdOrTr=getEventTargetTdOrTr(event);
    if (type == Event.ONCONTEXTMENU) {
      showContextMenu(event);
      event.stopPropagation();
      return;
    }
    boolean targetCellOrRowFound=targetTdOrTr != null;
switch (type) {
case Event.ONDBLCLICK:
      if (targetCellOrRowFound) {
        handleClickEvent(event,targetTdOrTr);
      }
    break;
case Event.ONMOUSEUP:
  if (targetCellOrRowFound) {
    mDown=false;
    handleClickEvent(event,targetTdOrTr);
    if (event.getButton() == Event.BUTTON_LEFT && isSelectable()) {
      if ((event.getCtrlKey() || event.getMetaKey()) && event.getShiftKey() && selectMode == SELECT_MODE_MULTI && multiselectmode == MULTISELECT_MODE_DEFAULT) {
        toggleShiftSelection(false);
        setRowFocus(this);
      }
 else       if ((event.getCtrlKey() || event.getMetaKey()) && selectMode == SELECT_MODE_MULTI && multiselectmode == MULTISELECT_MODE_DEFAULT) {
        boolean wasSelected=isSelected();
        toggleSelection();
        setRowFocus(this);
        selectionRangeStart=this;
        if (wasSelected) {
          removeRowFromUnsentSelectionRanges(this);
        }
      }
 else       if ((event.getCtrlKey() || event.getMetaKey() && selectMode == SELECT_MODE_SINGLE)) {
        if (!isSelected() || (isSelected() && nullSelectionAllowed)) {
          if (!isSelected()) {
            deselectAll();
          }
          toggleSelection();
          setRowFocus(this);
        }
      }
 else       if (event.getShiftKey() && selectMode == SELECT_MODE_MULTI && multiselectmode == MULTISELECT_MODE_DEFAULT) {
        toggleShiftSelection(true);
      }
 else {
        boolean currentlyJustThisRowSelected=selectedRowKeys.size() == 1 && selectedRowKeys.contains(getKey());
        if (!currentlyJustThisRowSelected) {
          if (multiselectmode == MULTISELECT_MODE_DEFAULT) {
            deselectAll();
          }
          toggleSelection();
        }
 else         if ((selectMode == SELECT_MODE_SINGLE || multiselectmode == MULTISELECT_MODE_SIMPLE) && nullSelectionAllowed) {
          toggleSelection();
        }
        selectionRangeStart=this;
        setRowFocus(this);
      }
      if (BrowserInfo.get().isIE()) {
        ((Element)event.getEventTarget().cast()).setPropertyJSO("onselectstart",null);
      }
      sendSelectedRows();
    }
  }
break;
case Event.ONTOUCHEND:
case Event.ONTOUCHCANCEL:
if (touchStart != null) {
Util.simulateClickFromTouchEvent(touchStart,this);
touchStart=null;
}
if (contextTouchTimeout != null) {
contextTouchTimeout.cancel();
}
break;
case Event.ONTOUCHMOVE:
if (isSignificantMove(event)) {
if (dragmode != 0 && touchStart != null && (TouchScrollDelegate.getActiveScrollDelegate() == null)) {
startRowDrag(touchStart,type,targetTdOrTr);
}
if (contextTouchTimeout != null) {
contextTouchTimeout.cancel();
}
touchStart=null;
}
break;
case Event.ONTOUCHSTART:
touchStart=event;
Touch touch=event.getChangedTouches().get(0);
touchStartX=touch.getClientX();
touchStartY=touch.getClientY();
touchStart.preventDefault();
if (dragmode != 0 || actionKeys != null) {
new Timer(){
@Override public void run(){
TouchScrollDelegate activeScrollDelegate=TouchScrollDelegate.getActiveScrollDelegate();
if (activeScrollDelegate != null && !activeScrollDelegate.isMoved()) {
activeScrollDelegate.stopScrolling();
}
 else {
touchStart=null;
}
}
}
.schedule(TOUCHSCROLL_TIMEOUT);
if (contextTouchTimeout == null && actionKeys != null) {
contextTouchTimeout=new Timer(){
@Override public void run(){
if (touchStart != null) {
showContextMenu(touchStart);
touchStart=null;
}
}
}
;
}
contextTouchTimeout.cancel();
contextTouchTimeout.schedule(TOUCH_CONTEXT_MENU_TIMEOUT);
}
break;
case Event.ONMOUSEDOWN:
if (targetCellOrRowFound) {
setRowFocus(this);
ensureFocus();
if (dragmode != 0 && (event.getButton() == NativeEvent.BUTTON_LEFT)) {
startRowDrag(event,type,targetTdOrTr);
}
 else if (event.getCtrlKey() || event.getShiftKey() || event.getMetaKey() && selectMode == SELECT_MODE_MULTI && multiselectmode == MULTISELECT_MODE_DEFAULT) {
event.preventDefault();
if (BrowserInfo.get().isIE()) {
((Element)event.getEventTarget().cast()).setPropertyJSO("onselectstart",applyDisableTextSelectionIEHack());
}
event.stopPropagation();
}
}
break;
case Event.ONMOUSEOUT:
if (targetCellOrRowFound) {
mDown=false;
}
break;
default :
break;
}
}
super.onBrowserEvent(event);
}
