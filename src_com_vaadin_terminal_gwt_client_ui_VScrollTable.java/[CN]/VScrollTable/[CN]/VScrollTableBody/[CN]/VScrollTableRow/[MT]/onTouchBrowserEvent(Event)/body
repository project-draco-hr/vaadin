{
  VConsole.log("-- START ONTOUCHBROWSEREVENT");
  if (enabled) {
    final Element targetTdOrTr=getEventTargetTdOrTr(event);
    final int type=event.getTypeInt();
switch (type) {
case Event.ONCONTEXTMENU:
      showContextMenu(event);
    if (enabled && (actionKeys != null || client.hasEventListeners(VScrollTable.this,ITEM_CLICK_EVENT_ID))) {
      event.stopPropagation();
      event.preventDefault();
    }
  break;
case Event.ONTOUCHSTART:
touchStart=event;
isDragging=false;
wasSignificantMove=false;
Touch touch=event.getChangedTouches().get(0);
touchStartX=touch.getClientX();
touchStartY=touch.getClientY();
if (dragmode != 0) {
if (dragTouchTimeout == null) {
dragTouchTimeout=new Timer(){
@Override public void run(){
if (touchStart != null) {
VConsole.log("DRAGGING");
isDragging=true;
}
}
}
;
VConsole.log("START DRAG TIMEOUT");
dragTouchTimeout.schedule(TOUCHSCROLL_TIMEOUT);
}
}
if (actionKeys != null) {
if (contextTouchTimeout == null) {
contextTouchTimeout=new Timer(){
@Override public void run(){
if (touchStart != null) {
VConsole.log("SHOW CONTEXT");
showContextMenu(touchStart);
event.preventDefault();
touchStart=null;
}
}
}
;
VConsole.log("START CONTEXT TIMEOUT");
contextTouchTimeout.cancel();
contextTouchTimeout.schedule(TOUCH_CONTEXT_MENU_TIMEOUT);
}
}
break;
case Event.ONTOUCHMOVE:
if (isSignificantMove(event)) {
wasSignificantMove=true;
if (contextTouchTimeout != null) {
contextTouchTimeout.cancel();
}
if (!isDragging && dragTouchTimeout != null) {
VConsole.log("CANCEL DRAG TIMEOUT");
dragTouchTimeout.cancel();
dragTouchTimeout=null;
}
if (isDragging) {
if (dragmode != 0 && touchStart != null) {
event.preventDefault();
event.stopPropagation();
VConsole.log("START DRAG");
startRowDrag(touchStart,type,targetTdOrTr);
}
isDragging=false;
}
touchStart=null;
}
break;
case Event.ONTOUCHEND:
case Event.ONTOUCHCANCEL:
VConsole.log("ONTOUCHEND");
if (contextTouchTimeout != null) {
VConsole.log("CANCEL CONTEXT TIMEOUT");
contextTouchTimeout.cancel();
}
if (dragTouchTimeout != null) {
VConsole.log("CANCEL DRAG TIMEOUT");
dragTouchTimeout.cancel();
}
if (touchStart != null) {
event.preventDefault();
event.stopPropagation();
touchStart=null;
}
isDragging=false;
VConsole.log("END ONTOUCHEND");
break;
case Event.ONMOUSEDOWN:
VConsole.log("ONMOUSEDOWN");
if (targetTdOrTr != null) {
setRowFocus(this);
ensureFocus();
if (dragmode != 0 && (event.getButton() == NativeEvent.BUTTON_LEFT)) {
startRowDrag(event,event.getTypeInt(),targetTdOrTr);
}
 else {
event.stopPropagation();
}
event.preventDefault();
}
break;
case Event.ONMOUSEOUT:
VConsole.log("ONMOUSEOUT");
break;
case Event.ONMOUSEUP:
VConsole.log("ONMOUSEUP");
if (targetTdOrTr != null) {
if (isSelectable()) {
boolean currentlyJustThisRowSelected=selectedRowKeys.size() == 1 && selectedRowKeys.contains(getKey());
if (!currentlyJustThisRowSelected) {
if (isSingleSelectMode() || isMultiSelectModeDefault()) {
deselectAll();
}
toggleSelection();
}
 else if ((isSingleSelectMode() || isMultiSelectModeSimple()) && nullSelectionAllowed) {
toggleSelection();
}
selectionRangeStart=this;
setRowFocus(this);
event.preventDefault();
event.stopPropagation();
}
}
break;
case Event.ONDBLCLICK:
if (targetTdOrTr != null) {
handleClickEvent(event,targetTdOrTr,true);
}
break;
default :
}
}
VConsole.log("-- SUPER ONBROWSEREVENT");
super.onBrowserEvent(event);
VConsole.log("-- END ONTOUCHBROWSEREVENT");
}
