{
  final Class beanClass=instance.getClass();
  if (Character.isLowerCase(beanPropertyName.charAt(0))) {
    final char[] buf=beanPropertyName.toCharArray();
    buf[0]=Character.toUpperCase(buf[0]);
    beanPropertyName=new String(buf);
  }
  getMethod=null;
  try {
    getMethod=beanClass.getMethod("get" + beanPropertyName,new Class[]{});
  }
 catch (  final java.lang.NoSuchMethodException ignored) {
    try {
      getMethod=beanClass.getMethod("is" + beanPropertyName,new Class[]{});
    }
 catch (    final java.lang.NoSuchMethodException ignoredAsWell) {
      try {
        getMethod=beanClass.getMethod("are" + beanPropertyName,new Class[]{});
      }
 catch (      final java.lang.NoSuchMethodException e) {
        throw new MethodException(this,"Bean property " + beanPropertyName + " can not be found");
      }
    }
  }
  Class<?> returnType=getMethod.getReturnType();
  setMethod=null;
  try {
    setMethod=beanClass.getMethod("set" + beanPropertyName,new Class[]{returnType});
  }
 catch (  final java.lang.NoSuchMethodException skipped) {
  }
  if (returnType.isPrimitive()) {
    if (returnType.equals(Boolean.TYPE)) {
      type=(Class<T>)Boolean.class;
    }
 else     if (returnType.equals(Integer.TYPE)) {
      type=(Class<T>)Integer.class;
    }
 else     if (returnType.equals(Float.TYPE)) {
      type=(Class<T>)Float.class;
    }
 else     if (returnType.equals(Double.TYPE)) {
      type=(Class<T>)Double.class;
    }
 else     if (returnType.equals(Byte.TYPE)) {
      type=(Class<T>)Byte.class;
    }
 else     if (returnType.equals(Character.TYPE)) {
      type=(Class<T>)Character.class;
    }
 else     if (returnType.equals(Short.TYPE)) {
      type=(Class<T>)Short.class;
    }
 else     if (returnType.equals(Long.TYPE)) {
      type=(Class<T>)Long.class;
    }
 else {
      throw new MethodException(this,"Bean property " + beanPropertyName + " getter return type must not be void");
    }
  }
 else {
    type=(Class<T>)returnType;
  }
  setArguments(new Object[]{},new Object[]{null},0);
  readOnly=(setMethod == null);
  this.instance=instance;
}
