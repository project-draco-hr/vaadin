{
  this.client=client;
  id=uidl.getId();
  if (client.updateComponent(this,uidl,true)) {
    return;
  }
  long start=System.currentTimeMillis();
  HashSet<Widget> previousChildren=new HashSet<Widget>();
  for (  Widget child : this) {
    if (!(child instanceof VCaption)) {
      previousChildren.add(child);
    }
  }
  for (final Iterator<Object> it=uidl.getChildIterator(); it.hasNext(); ) {
    final UIDL childUIDL=(UIDL)it.next();
    final VPaintableWidget child=client.getPaintable(childUIDL);
    Widget widget=child.getWidgetForPaintable();
    if (widget.getParent() != this) {
      DivElement wrapper=Document.get().createDivElement();
      wrapper.getStyle().setPosition(Position.ABSOLUTE);
      getElement().appendChild(wrapper);
      add(widget,wrapper);
    }
    if (!childUIDL.getBooleanAttribute("cached")) {
      child.updateFromUIDL(childUIDL,client);
      client.getMeasuredSize(child).setDirty(true);
    }
    previousChildren.remove(widget);
  }
  for (  Widget widget : previousChildren) {
    Element wrapper=getWrapper(widget);
    VCaption caption=captions.remove(widget);
    if (caption != null) {
      remove(caption);
    }
    remove(widget);
    getElement().removeChild(wrapper);
    client.unregisterPaintable((VPaintableWidget)widget);
  }
  int bitMask=uidl.getIntAttribute("margins");
  if (activeMarginsInfo == null || activeMarginsInfo.getBitMask() != bitMask) {
    activeMarginsInfo=new VMarginInfo(bitMask);
  }
  spacing=uidl.getBooleanAttribute("spacing");
  expandRatios=uidl.getMapAttribute("expandRatios");
  alignments=uidl.getMapAttribute("alignments");
  client.getMeasuredSize(this).setDirty(true);
}
