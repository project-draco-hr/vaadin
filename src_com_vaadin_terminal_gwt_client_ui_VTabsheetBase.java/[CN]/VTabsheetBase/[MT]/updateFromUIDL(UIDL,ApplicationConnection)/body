{
  this.client=client;
  cachedUpdate=client.updateComponent(this,uidl,true);
  if (cachedUpdate) {
    return;
  }
  id=uidl.getId();
  disabled=uidl.hasAttribute("disabled");
  final UIDL tabs=uidl.getChildUIDL(0);
  ArrayList<Widget> oldWidgets=new ArrayList<Widget>();
  for (Iterator<Widget> iterator=getWidgetIterator(); iterator.hasNext(); ) {
    oldWidgets.add(iterator.next());
  }
  tabKeys.clear();
  disabledTabKeys.clear();
  int index=0;
  for (final Iterator<Object> it=tabs.getChildIterator(); it.hasNext(); ) {
    final UIDL tab=(UIDL)it.next();
    final String key=tab.getStringAttribute("key");
    final boolean selected=tab.getBooleanAttribute("selected");
    final boolean hidden=tab.getBooleanAttribute("hidden");
    if (tab.getBooleanAttribute("disabled")) {
      disabledTabKeys.add(key);
    }
    tabKeys.add(key);
    if (selected) {
      activeTabIndex=index;
    }
    renderTab(tab,index,selected,hidden);
    index++;
  }
  int tabCount=getTabCount();
  while (tabCount-- > index) {
    removeTab(index);
  }
  for (int i=0; i < getTabCount(); i++) {
    VPaintableWidget p=getTab(i);
    if (p != null) {
      oldWidgets.remove(p.getWidgetForPaintable());
    }
  }
  for (Iterator<Widget> iterator=oldWidgets.iterator(); iterator.hasNext(); ) {
    Widget oldWidget=iterator.next();
    VPaintableWidget oldPaintable=VPaintableMap.get(client).getPaintable(oldWidget);
    if (oldWidget.isAttached()) {
      oldWidget.removeFromParent();
    }
    VPaintableMap.get(client).unregisterPaintable(oldPaintable);
  }
}
