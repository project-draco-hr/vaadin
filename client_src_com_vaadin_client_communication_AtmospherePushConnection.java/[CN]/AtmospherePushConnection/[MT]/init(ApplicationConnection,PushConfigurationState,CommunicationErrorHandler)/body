{
  this.connection=connection;
  this.errorHandler=errorHandler;
  connection.addHandler(ApplicationStoppedEvent.TYPE,new ApplicationStoppedHandler(){
    @Override public void onApplicationStopped(    ApplicationStoppedEvent event){
      if (state == State.DISCONNECT_PENDING || state == State.DISCONNECTED) {
        return;
      }
      disconnect(new Command(){
        @Override public void execute(){
        }
      }
);
    }
  }
);
  config=createConfig();
  String debugParameter=Location.getParameter("debug");
  if ("push".equals(debugParameter)) {
    config.setStringValue("logLevel","debug");
  }
  for (  String param : pushConfiguration.parameters.keySet()) {
    config.setStringValue(param,pushConfiguration.parameters.get(param));
  }
  runWhenAtmosphereLoaded(new Command(){
    @Override public void execute(){
      Scheduler.get().scheduleDeferred(new Command(){
        @Override public void execute(){
          connect();
        }
      }
);
    }
  }
);
}
