{
  this.locale=locale;
  this.address=address;
  this.secureConnection=secureConnection;
  if (agent != null) {
    browserApplication=agent;
    browserDetails=new VBrowserDetails(agent);
  }
  if (sw != null) {
    try {
      screenHeight=Integer.parseInt(sh);
      screenWidth=Integer.parseInt(sw);
    }
 catch (    final NumberFormatException e) {
      screenHeight=screenWidth=0;
    }
  }
  if (tzo != null) {
    try {
      timezoneOffset=-Integer.parseInt(tzo) * 60 * 1000;
    }
 catch (    final NumberFormatException e) {
      timezoneOffset=0;
    }
  }
  if (rtzo != null) {
    try {
      rawTimezoneOffset=-Integer.parseInt(rtzo) * 60 * 1000;
    }
 catch (    final NumberFormatException e) {
      rawTimezoneOffset=0;
    }
  }
  if (dstSavings != null) {
    try {
      this.dstSavings=Integer.parseInt(dstSavings) * 60 * 1000;
    }
 catch (    final NumberFormatException e) {
      this.dstSavings=0;
    }
  }
  if (dstInEffect != null) {
    this.dstInEffect=Boolean.parseBoolean(dstInEffect);
  }
  if (curDate != null) {
    try {
      long curTime=Long.parseLong(curDate);
      currentDate=new Date(curTime);
    }
 catch (    final NumberFormatException e) {
      currentDate=new Date();
    }
  }
}
