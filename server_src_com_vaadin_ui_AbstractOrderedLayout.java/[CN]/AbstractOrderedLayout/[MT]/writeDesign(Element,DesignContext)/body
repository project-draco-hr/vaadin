{
  super.writeDesign(design,designContext);
  AbstractOrderedLayout def=(AbstractOrderedLayout)designContext.getDefaultInstance(this);
  MarginInfo marginInfo=getMargin();
  if (marginInfo.hasAll()) {
    DesignAttributeHandler.writeAttribute("margin",design.attributes(),marginInfo.hasAll(),def.getMargin().hasAll(),Boolean.class);
  }
 else {
    DesignAttributeHandler.writeAttribute("margin-left",design.attributes(),marginInfo.hasLeft(),def.getMargin().hasLeft(),Boolean.class);
    DesignAttributeHandler.writeAttribute("margin-right",design.attributes(),marginInfo.hasRight(),def.getMargin().hasRight(),Boolean.class);
    DesignAttributeHandler.writeAttribute("margin-top",design.attributes(),marginInfo.hasTop(),def.getMargin().hasTop(),Boolean.class);
    DesignAttributeHandler.writeAttribute("margin-bottom",design.attributes(),marginInfo.hasBottom(),def.getMargin().hasBottom(),Boolean.class);
  }
  if (!designContext.shouldWriteChildren(this,def)) {
    return;
  }
  for (  Component child : this) {
    Element childElement=designContext.createElement(child);
    design.appendChild(childElement);
    Alignment alignment=getComponentAlignment(child);
    if (alignment.isMiddle()) {
      childElement.attr(":middle","");
    }
 else     if (alignment.isBottom()) {
      childElement.attr(":bottom","");
    }
    if (alignment.isCenter()) {
      childElement.attr(":center","");
    }
 else     if (alignment.isRight()) {
      childElement.attr(":right","");
    }
    float expandRatio=getExpandRatio(child);
    if (expandRatio == 1.0f) {
      childElement.attr(":expand","");
    }
 else     if (expandRatio > 0) {
      childElement.attr(":expand",DesignAttributeHandler.getFormatter().format(expandRatio));
    }
  }
}
