{
  int totalCachedRows=pageBuffer[CELL_ITEMID].length;
  int totalRows=size();
  int firstIndexInPageBuffer=firstIndex - pageBufferFirstIndex;
  if (firstIndexInPageBuffer + rows > totalCachedRows) {
    rows=totalCachedRows - firstIndexInPageBuffer;
  }
  unregisterComponentsAndPropertiesInRows(firstIndex,rows);
  int newCachedRowCount=totalCachedRows;
  if (newCachedRowCount + pageBufferFirstIndex > totalRows) {
    newCachedRowCount=totalRows - pageBufferFirstIndex;
  }
  int firstAppendedRowInPageBuffer=totalCachedRows - rows;
  int firstAppendedRow=firstAppendedRowInPageBuffer + pageBufferFirstIndex;
  int maxRowsToRender=(totalRows - firstAppendedRow);
  int rowsToAdd=rows;
  if (rowsToAdd > maxRowsToRender) {
    rowsToAdd=maxRowsToRender;
  }
  Object[][] cells=null;
  if (rowsToAdd > 0) {
    cells=getVisibleCellsNoCache(firstAppendedRow,rowsToAdd,false);
  }
  Object[][] newPageBuffer=new Object[pageBuffer.length][newCachedRowCount];
  for (int i=0; i < pageBuffer.length; i++) {
    for (int row=0; row < firstIndexInPageBuffer; row++) {
      newPageBuffer[i][row]=pageBuffer[i][row];
    }
    for (int row=firstIndexInPageBuffer; row < firstAppendedRowInPageBuffer; row++) {
      newPageBuffer[i][row]=pageBuffer[i][row + rows];
    }
    for (int row=firstAppendedRowInPageBuffer; row < newCachedRowCount; row++) {
      newPageBuffer[i][row]=cells[i][row - firstAppendedRowInPageBuffer];
    }
  }
  pageBuffer=newPageBuffer;
}
