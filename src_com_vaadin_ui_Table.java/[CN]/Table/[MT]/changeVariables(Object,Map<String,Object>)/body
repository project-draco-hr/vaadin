{
  boolean clientNeedsContentRefresh=false;
  handleClickEvent(variables);
  handleColumnResizeEvent(variables);
  disableContentRefreshing();
  if (!isSelectable() && variables.containsKey("selected")) {
    variables=new HashMap<String,Object>(variables);
    variables.remove("selected");
  }
 else   if (isSelectable() && isMultiSelect() && variables.containsKey("selected")&& multiSelectMode == MultiSelectMode.DEFAULT) {
    handleSelectedItems(variables);
    variables=new HashMap<String,Object>(variables);
    variables.remove("selected");
  }
  super.changeVariables(source,variables);
  if (variables.containsKey("pagelength")) {
    pageLength=(Integer)variables.get("pagelength");
  }
  if (variables.containsKey("firstvisible")) {
    final Integer value=(Integer)variables.get("firstvisible");
    if (value != null) {
      setCurrentPageFirstItemIndex(value.intValue(),false);
    }
  }
  if (variables.containsKey("reqfirstrow") || variables.containsKey("reqrows")) {
    try {
      firstToBeRenderedInClient=((Integer)variables.get("firstToBeRendered")).intValue();
      lastToBeRenderedInClient=((Integer)variables.get("lastToBeRendered")).intValue();
    }
 catch (    Exception e) {
      logger.log(Level.FINER,"Could not parse the first and/or last rows.",e);
    }
    if (!containerChangeToBeRendered) {
      Integer value=(Integer)variables.get("reqfirstrow");
      if (value != null) {
        reqFirstRowToPaint=value.intValue();
      }
      value=(Integer)variables.get("reqrows");
      if (value != null) {
        reqRowsToPaint=value.intValue();
        if (reqFirstRowToPaint + reqRowsToPaint > size()) {
          reqRowsToPaint=size() - reqFirstRowToPaint;
        }
      }
    }
    clientNeedsContentRefresh=true;
  }
  if (!sortDisabled) {
    boolean doSort=false;
    if (variables.containsKey("sortcolumn")) {
      final String colId=(String)variables.get("sortcolumn");
      if (colId != null && !"".equals(colId) && !"null".equals(colId)) {
        final Object id=columnIdMap.get(colId);
        setSortContainerPropertyId(id,false);
        doSort=true;
      }
    }
    if (variables.containsKey("sortascending")) {
      final boolean state=((Boolean)variables.get("sortascending")).booleanValue();
      if (state != sortAscending) {
        setSortAscending(state,false);
        doSort=true;
      }
    }
    if (doSort) {
      this.sort();
      resetPageBuffer();
    }
  }
  if (isColumnCollapsingAllowed()) {
    if (variables.containsKey("collapsedcolumns")) {
      try {
        final Object[] ids=(Object[])variables.get("collapsedcolumns");
        for (final Iterator<Object> it=visibleColumns.iterator(); it.hasNext(); ) {
          setColumnCollapsed(it.next(),false);
        }
        for (int i=0; i < ids.length; i++) {
          setColumnCollapsed(columnIdMap.get(ids[i].toString()),true);
        }
      }
 catch (      final Exception e) {
        logger.log(Level.FINER,"Could not determine column collapsing state",e);
      }
      clientNeedsContentRefresh=true;
    }
  }
  if (isColumnReorderingAllowed()) {
    if (variables.containsKey("columnorder")) {
      try {
        final Object[] ids=(Object[])variables.get("columnorder");
        final Object[] idsTemp=new Object[ids.length];
        for (int i=0; i < ids.length; i++) {
          idsTemp[i]=columnIdMap.get(ids[i].toString());
        }
        setColumnOrder(idsTemp);
        if (hasListeners(ColumnReorderEvent.class)) {
          fireEvent(new ColumnReorderEvent(this));
        }
      }
 catch (      final Exception e) {
        logger.log(Level.FINER,"Could not determine column reordering state",e);
      }
      clientNeedsContentRefresh=true;
    }
  }
  enableContentRefreshing(clientNeedsContentRefresh);
  if (variables.containsKey("action")) {
    final StringTokenizer st=new StringTokenizer((String)variables.get("action"),",");
    if (st.countTokens() == 2) {
      final Object itemId=itemIdMapper.get(st.nextToken());
      final Action action=(Action)actionMapper.get(st.nextToken());
      if (action != null && containsId(itemId) && actionHandlers != null) {
        for (final Iterator<Handler> i=actionHandlers.iterator(); i.hasNext(); ) {
          (i.next()).handleAction(action,this,itemId);
        }
      }
    }
  }
}
